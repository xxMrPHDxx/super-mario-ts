/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/AudioBoard.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.buffers=new Map}add(t,e){this.buffers.set(t,e)}play(t,e){const s=this.buffers.get(t);if(!s)return;const i=e.createBufferSource();i.connect(e.destination),i.buffer=s,i.start(0)}}},"./src/BoundingBox.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t,e,s){this.pos=t,this.size=e,this.offset=s}overlaps(t){return this.bottom>t.top&&this.top<t.bottom&&this.left<t.right&&this.right>t.left}get bottom(){return this.pos.y+this.size.y+this.offset.y}get top(){return this.pos.y+this.offset.y}get left(){return this.pos.x+this.offset.x}get right(){return this.pos.x+this.size.x+this.offset.x}set bottom(t){this.pos.y=t-(this.size.y+this.offset.y)}set top(t){this.pos.y=t-this.offset.y}set left(t){this.pos.x=t-this.offset.x}set right(t){this.pos.x=t-(this.size.x+this.offset.x)}}},"./src/Camera.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/math.ts");class r{constructor(){this.pos=new i.Vector(0,0),this.size=new i.Vector(256,224)}}},"./src/Compositor.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.layers=[]}add(t){this.layers.push(t)}draw(t,e){this.layers.forEach((s=>s(t,e)))}}},"./src/Entity.ts":(t,e,s)=>{s.r(e),s.d(e,{Sides:()=>i,default:()=>c});var i,r=s("./src/BoundingBox.ts"),n=s("./src/EventBuffer.ts"),a=s("./src/math.ts"),o=s("./src/Trait.ts");!function(t){t[t.TOP=0]="TOP",t[t.BOTTOM=1]="BOTTOM",t[t.LEFT=2]="LEFT",t[t.RIGHT=3]="RIGHT"}(i||(i={}));class c{constructor(t){this.sounds=new Set,this.events=new n.default,this.pos=new a.Vector,this.size=new a.Vector,this.offset=new a.Vector,this.vel=new a.Vector,this.lifetime=0,this.traits=new Map,this.draw=(t,e)=>{},this.audioBoard=t,this.bounds=new r.default(this.pos,this.size,this.offset)}addTrait(t){this.traits.set(t.constructor,t)}collides(t){this.traits.forEach((e=>{e.collides(this,t)}))}finalize(){this.events.emit(o.default.TASK,this),this.traits.forEach((t=>{t.finalize(this)})),this.events.clear()}getTrait(t){return this.traits.get(t)}hasTrait(t){return this.traits.has(t)}obstruct(t,e){this.traits.forEach((s=>{s.obstruct(this,t,e)}))}playSounds(t,e){this.sounds.forEach((s=>{t.play(s,e)})),this.sounds.clear()}update(t,e){this.traits.forEach((s=>{s.update(this,t,e)})),this.playSounds(this.audioBoard,t.audioContext),this.lifetime+=t.dt}}},"./src/EntityCollider.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t){this.entities=t}check(t){this.entities.forEach((e=>{t!==e&&t.bounds.overlaps(e.bounds)&&t.collides(e)}))}}},"./src/EventBuffer.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.events=[]}clear(){this.events.length=0}emit(t,...e){const s={name:t,args:e};this.events.push(s)}process(t,e){this.events.forEach((s=>{s.name===t&&e(...s.args)}))}}},"./src/EventEmitter.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.listeners=new Map}listen(t,e){const s=this.listeners.get(t)||[];s.push(e),this.listeners.set(t,s)}emit(t,...e){const s=this.listeners.get(t);s&&s.forEach((t=>{t(...e)}))}}},"./src/InputRouter.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.receivers=new Set}addReceiver(t){this.receivers.add(t)}dropReceiver(t){this.receivers.delete(t)}route(t){for(const e of this.receivers)t(e)}}},"./src/KeyboardState.ts":(t,e,s)=>{var i;s.r(e),s.d(e,{KeyState:()=>i,default:()=>r}),function(t){t[t.RELEASED=0]="RELEASED",t[t.PRESSED=1]="PRESSED"}(i||(i={}));class r{constructor(){this.keyStates=new Map,this.keyMap=new Map}addMapping(t,e){this.keyMap.set(t,e)}handleEvent(t){const{code:e,type:s}=t;if(!this.keyMap.has(e))return;t.preventDefault();const r="keydown"===s?i.PRESSED:i.RELEASED;this.keyStates.get(e)!==r&&(this.keyStates.set(e,r),this.keyMap.get(e)(r))}listenTo(t){["keydown","keyup"].forEach((e=>{t.addEventListener(e,(t=>{this.handleEvent(t)}))}))}}},"./src/Level.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>d});var i=s("./src/Camera.ts"),r=s("./src/EntityCollider.ts"),n=s("./src/MusicController.ts"),a=s("./src/player.ts"),o=s("./src/Scene.ts"),c=s("./src/TileCollider.ts");class d extends o.default{constructor(){super(...arguments),this.name="",this.camera=new i.default,this.music=new n.default,this.entities=new Set,this.tileCollider=new c.default,this.entityCollider=new r.default(this.entities),this.time=0}draw(t){this.comp.draw(t,this.camera)}pause(){this.music.pause()}update(t){const{dt:e}=t;this.entities.forEach((e=>{e.update(t,this)})),this.entities.forEach((t=>{this.entityCollider.check(t)})),this.entities.forEach((t=>{t.finalize()})),function(t){for(const e of(0,a.findPlayers)(t))t.camera.pos.x=Math.max(0,e.pos.x-100)}(this),this.time+=e}}d.TRIGGER=Symbol("trigger")},"./src/MusicController.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.musicPlayer=null}setPlayer(t){this.musicPlayer=t}pause(){this.musicPlayer.pauseAll()}playTheme(t=1){this.musicPlayer.play("main").playbackRate=t}playHurryTheme(){const t=this.musicPlayer.play("hurry");t.loop=!1,t.onended=()=>this.playTheme(1.3)}}},"./src/MusicPlayer.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.tracks=new Map}addTrack(t,e){const s=new Audio(e);s.loop=!0,this.tracks.set(t,s)}pauseAll(){for(const t of this.tracks.values())t.pause()}play(t){this.pauseAll();const e=this.tracks.get(t);return e&&e.play(),e}}},"./src/Scene.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Compositor.ts"),r=s("./src/EventEmitter.ts");class n{constructor(){this.events=new r.default,this.comp=new i.default}draw(t){this.comp.draw(t)}pause(){}update(t){}}n.COMPLETE=Symbol("scene.complete")},"./src/SceneRunner.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Scene.ts");class r{constructor(){this.sceneIndex=-1,this.scenes=[]}addScene(t){t.events.listen(i.default.COMPLETE,(()=>this.runNext())),this.scenes.push(t)}runNext(){const t=this.scenes[this.sceneIndex];t&&t.pause(),this.sceneIndex++}update(t){const e=this.scenes[this.sceneIndex];e&&(e.update(t),e.draw(t.videoContext))}}},"./src/SpriteSheet.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t,e,s){this.image=t,this.width=e,this.height=s,this.frames=new Map,this.animations=new Map}getAnimation(t){return this.animations.get(t)}defineAnim(t,e){this.animations.set(t,e)}define(t,e,s,i,r){const n=[!1,!0].map((t=>{const n=document.createElement("canvas").getContext("2d");return n.canvas.setAttribute("width",`${this.width}px`),n.canvas.setAttribute("height",`${this.height}px`),t&&(n.scale(-1,1),n.translate(-i,0)),n.drawImage(this.image,e,s,i,r,0,0,i,r),n.canvas}));this.frames.set(t,n)}defineTile(t,e,s){this.define(t,e*this.width,s*this.height,this.width,this.height)}draw(t,e,s,i,r=!1){const n=this.frames.get(t);n||console.warn(`Frame ${t} is not defined!`),e.drawImage(n[r?1:0],s,i)}drawAnim(t,e,s,i,r){const n=this.animations.get(t);if(!n)return this.drawTile(t,e,s,i);this.drawTile(n(r),e,s,i)}drawTile(t,e,s,i,r=!1){this.draw(t,e,s*this.width,i*this.height,r)}}},"./src/TileCollider.ts":(t,e,s)=>{s.r(e),s.d(e,{TileResolver:()=>o,default:()=>c});var i=s("./src/tiles/brick.ts"),r=s("./src/tiles/ground.ts"),n=s("./src/tiles/coin.ts");const a={brick:i.brick,ground:r.ground,coin:n.coin};class o{constructor(t,e=16){this.matrix=t,this.tileSize=e}toIndex(t){return Math.floor(t/this.tileSize)}toIndexRange(t,e){const s=Math.ceil(e/this.tileSize)*this.tileSize,i=[];let r=t;do{i.push(this.toIndex(r)),r+=this.tileSize}while(r<s);return i}getByIndex(t,e){const s=this.matrix.get(t,e);return s?{tile:s,x1:t*this.tileSize,x2:(t+1)*this.tileSize,y1:e*this.tileSize,y2:(e+1)*this.tileSize,indexX:t,indexY:e}:null}searchByPosition(t,e){return this.getByIndex(this.toIndex(t),this.toIndex(e))}searchByRange(t,e,s,i){const r=[];return this.toIndexRange(t,e).forEach((t=>{this.toIndexRange(s,i).forEach((e=>{const s=this.getByIndex(t,e);s&&r.push(s)}))})),r}}class c{constructor(){this.resolvers=[]}addGrid(t){this.resolvers.push(new o(t))}checkX(t,e,s){if(0===t.vel.x)return;let i=t.bounds.left+(t.vel.x>0?t.size.x:0);for(const r of this.resolvers){r.searchByRange(i,i,t.bounds.top,t.bounds.bottom).forEach((i=>{this.handle(0,{entity:t,match:i,resolver:r,gameContext:e},s)}))}}checkY(t,e,s){if(0===t.vel.y)return;let i=t.bounds.top+(t.vel.y>0?t.size.y:0);for(const r of this.resolvers){r.searchByRange(t.bounds.left,t.bounds.right,i,i).forEach((i=>{this.handle(1,{entity:t,match:i,resolver:r,gameContext:e},s)}))}}handle(t,e,s){const i=a[e.match.tile.type];i&&i[t]&&i[t](e,s)}}},"./src/TimedScene.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Scene.ts");class r extends i.default{constructor(){super(...arguments),this.countdown=2}draw(t){this.comp.draw(t)}update(t){this.countdown-=t.dt,this.countdown<=0&&this.events.emit(i.default.COMPLETE)}}},"./src/Timer.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t=1/60){this.running=!1;let e=0,s=null;this.updateProxy=(i=0)=>{if(s)for(e+=(i-s)/1e3,e>1&&(e=1);e>t;)this.update(t),e-=t;s=i,this.enqueue()}}enqueue(){requestAnimationFrame(this.updateProxy)}start(){this.running||(this.running=!0,this.enqueue())}}},"./src/Trait.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.listeners=[]}collides(t,e){}finalize(t){this.listeners=this.listeners.filter((e=>(t.events.process(e.name,e.callback),--e.count)))}listen(t,e,s=1/0){this.listeners.push({name:t,callback:e,count:s})}obstruct(t,e,s){}queue(t){this.listen(i.TASK,t,1)}update(t,e,s){}}i.TASK=Symbol("task")},"./src/anim.ts":(t,e,s)=>{function i(t,e){return function(s){return t[Math.floor(s/e)%t.length]}}s.r(e),s.d(e,{createAnim:()=>i})},"./src/entities.ts":(t,e,s)=>{s.r(e),s.d(e,{loadEntities:()=>c});var i=s("./src/entities/Mario.ts"),r=s("./src/entities/Goomba.ts"),n=s("./src/entities/Koopa.ts"),a=s("./src/entities/Bullet.ts"),o=s("./src/entities/Cannon.ts");function c(t){const e={};function s(t){return s=>e[t]=s}return Promise.all([(0,i.loadMario)(t).then(s("mario")),(0,r.loadGoomba)(t).then(s("goomba")),(0,n.loadKoopa)(t).then(s("koopa")),(0,a.loadBullet)(t).then(s("bullet")),(0,o.loadCannon)(t).then(s("cannon"))]).then((()=>e))}},"./src/entities/Bullet.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h,loadBullet:()=>f});var i=s("./src/Entity.ts"),r=s("./src/loaders/sprite.ts"),n=s("./src/Trait.ts"),a=s("./src/traits/Gravity.ts"),o=s("./src/traits/Killable.ts"),c=s("./src/traits/Stomper.ts"),d=s("./src/traits/Velocity.ts"),l=s("./src/entities/Mario.ts");class u extends n.default{constructor(){super(...arguments),this.gravity=new a.default}collides(t,e){t instanceof h&&e.hasTrait(c.default)&&(t.killable.dead||(e.vel.y>t.vel.y?(t.killable.kill(),t.vel.set(100,-200)):e instanceof l.default&&e.killable.kill()))}update(t,e){t instanceof h&&t.killable.dead&&this.gravity.update(t,e)}}class h extends i.default{constructor(){super(),this.addTrait(this.velocity=new d.default),this.addTrait(this.behavior=new u),this.addTrait(this.killable=new o.default)}}function f(t){return(0,r.loadSpriteSheet)("bullet").then(p)}function p(t){function e(e){t.draw("bullet",e,0,0,this.vel.x<0)}return function(){const t=new h;return t.size.set(16,16),t.draw=e,t}}},"./src/entities/Cannon.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o,loadCannon:()=>c});var i=s("./src/Entity.ts"),r=s("./src/loaders/audio.ts"),n=s("./src/player.ts"),a=s("./src/traits/Emitter.ts");class o extends i.default{constructor(t){super(t),this.addTrait(this.emitter=new a.default),this.size.set(16,14)}}function c(t){return(0,r.loadAudioBoard)("cannon",t).then((t=>function(t){function e(t,e,s){if(!(t instanceof o))return;let i;for(const e of(0,n.findPlayers)(s))if(i=e.pos.x-t.pos.x,Math.abs(e.pos.x-t.pos.x)<=30)return;const r=e.entityFactory.bullet();r.pos.copy(t.pos),r.vel.x=80*Math.sign(i),t.sounds.add("shoot"),s.entities.add(r)}return function(){const s=new o(t);return s.emitter.interval=4,s.emitter.emitters.push(e),s}}(t)))}},"./src/entities/Goomba.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>f,loadGoomba:()=>p});var i=s("./src/Entity.ts"),r=s("./src/loaders/sprite.ts"),n=s("./src/Trait.ts"),a=s("./src/traits/Killable.ts"),o=s("./src/traits/PendulumMove.ts"),c=s("./src/traits/Physics.ts"),d=s("./src/traits/Solid.ts"),l=s("./src/traits/Stomper.ts"),u=s("./src/entities/Mario.ts");class h extends n.default{collides(t,e){t instanceof f&&e.hasTrait(l.default)&&(t.killable.dead||(e.vel.y>t.vel.y?(t.killable.kill(),t.pendulumMove.speed=0):e instanceof u.default&&e.killable.kill()))}}class f extends i.default{constructor(){super(),this.addTrait(this.physics=new c.default),this.addTrait(this.solid=new d.default),this.addTrait(this.pendulumMove=new o.default),this.addTrait(this.behavior=new h),this.addTrait(this.killable=new a.default)}}function p(t){return(0,r.loadSpriteSheet)("goomba").then(y)}function y(t){const e=t.getAnimation("walk");function s(s){var i;t.draw((i=this).killable.dead?"flat":e(i.lifetime),s,0,0)}return function(){const t=new f;return t.size.set(16,16),t.draw=s,t}}},"./src/entities/Koopa.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>p,loadKoopa:()=>y});var i,r=s("./src/Entity.ts"),n=s("./src/loaders/sprite.ts"),a=s("./src/Trait.ts"),o=s("./src/traits/Killable.ts"),c=s("./src/traits/PendulumMove.ts"),d=s("./src/traits/Physics.ts"),l=s("./src/traits/Solid.ts"),u=s("./src/traits/Stomper.ts"),h=s("./src/entities/Mario.ts");!function(t){t[t.WALKING=0]="WALKING",t[t.HIDING=1]="HIDING",t[t.PANIC=2]="PANIC"}(i||(i={}));class f extends a.default{constructor(){super(...arguments),this.state=i.WALKING,this.hideTime=0,this.hideDuration=5,this.panicSpeed=300,this.walkSpeed=null}collides(t,e){t instanceof p&&e.hasTrait(u.default)&&(t.killable.dead||(e.vel.y>t.vel.y?this.handleStomp(t,e):e instanceof h.default&&this.handleNudge(t,e)))}handleNudge(t,e){switch(this.state){case i.WALKING:e.killable.kill();break;case i.HIDING:this.panic(t,e);break;case i.PANIC:{const s=Math.sign(t.vel.x),i=Math.sign(t.pos.x-e.pos.x);0!==s&&s!==i&&e.killable.kill()}}}handleStomp(t,e){switch(this.state){case i.WALKING:this.hide(t);break;case i.HIDING:t.killable.kill(),t.vel.set(100,-200),t.solid.obstructs=!1;break;case i.PANIC:this.hide(t)}}hide(t){t.vel.x=0,t.pendulumMove.enabled=!1,this.walkSpeed||(this.walkSpeed=t.pendulumMove.speed),this.state=i.HIDING,this.hideTime=0}panic(t,e){t.pendulumMove.enabled=!0,t.pendulumMove.speed=this.panicSpeed*Math.sign(e.vel.x),this.state=i.PANIC}unhide(t){t.pendulumMove.enabled=!0,t.pendulumMove.speed=this.walkSpeed,this.state=i.WALKING}update(t,e){const{dt:s}=e;t instanceof p&&this.state===i.HIDING&&(this.hideTime+=s,this.hideTime>this.hideDuration&&this.unhide(t))}}class p extends r.default{constructor(){super(),this.addTrait(this.physics=new d.default),this.addTrait(this.solid=new l.default),this.addTrait(this.pendulumMove=new c.default),this.addTrait(this.behavior=new f),this.addTrait(this.killable=new o.default)}}function y(t){return(0,n.loadSpriteSheet)("koopa").then(m)}function m(t){const e=t.getAnimation("walk"),s=t.getAnimation("wake");function r(r){t.draw(function(t){switch(t.behavior.state){case i.HIDING:if(t.behavior.hideTime>3)return s(t.lifetime);case i.PANIC:return"hiding";default:return e(t.lifetime)}}(this),r,0,0,this.vel.x<0)}return function(){const t=new p;return t.size.set(16,16),t.offset.y=8,t.draw=r,t}}},"./src/entities/Mario.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>f,loadMario:()=>p});var i=s("./src/Entity.ts"),r=s("./src/loaders/audio.ts"),n=s("./src/loaders/sprite.ts"),a=s("./src/traits/Go.ts"),o=s("./src/traits/Jump.ts"),c=s("./src/traits/Killable.ts"),d=s("./src/traits/Physics.ts"),l=s("./src/traits/Player.ts"),u=s("./src/traits/Solid.ts"),h=s("./src/traits/Stomper.ts");class f extends i.default{constructor(t){super(t),this.size.set(14,16),this.addTrait(this.player=new l.default),this.addTrait(this.physics=new d.default),this.addTrait(this.solid=new u.default),this.addTrait(this.go=new a.default),this.addTrait(this.jump=new o.default),this.addTrait(this.stomper=new h.default),this.addTrait(this.killable=new c.default),this.go.drag=.001}turbo(t){this.go.drag=t?2e-4:.001}}function p(t){return Promise.all([(0,n.loadSpriteSheet)("mario"),(0,r.loadAudioBoard)("mario",t)]).then((([t,e])=>function(t,e){const s=t.getAnimation("run");function i(t){return t.jump.falling?"jump":t.go.distance>0?t.vel.x>0&&t.go.dir<0||t.vel.x<0&&t.go.dir>0?"break":s(t.go.distance):"idle"}function r(e){t.draw(i(this),e,0,0,this.go.dir<0)}return function(){const t=new f(e);return t.draw=r,t.killable.removeAfter=0,t}}(t,e)))}},"./src/input.ts":(t,e,s)=>{s.r(e),s.d(e,{setupKeyboard:()=>n});var i=s("./src/InputRouter.ts"),r=s("./src/KeyboardState.ts");function n(t){const e=new r.default,s=new i.default;return e.listenTo(t),e.addMapping("KeyP",(t=>{t?s.route((t=>t.jump.start())):s.route((t=>t.jump.cancel()))})),e.addMapping("KeyO",(t=>{s.route((e=>e.turbo(1===t)))})),e.addMapping("KeyA",(t=>{s.route((e=>e.go.dir+=t?-1:1))})),e.addMapping("KeyD",(t=>{s.route((e=>e.go.dir+=t?1:-1))})),s}},"./src/layers/background.ts":(t,e,s)=>{s.r(e),s.d(e,{createBackgroundLayer:()=>r});var i=s("./src/TileCollider.ts");function r(t,e,s){const r=new i.TileResolver(e),n=document.createElement("canvas").getContext("2d");return n.imageSmoothingEnabled=!1,n.canvas.width=272,n.canvas.height=240,function(i,a){const o=r.toIndex(a.size.x),c=r.toIndex(a.pos.x);!function(i,r){n.clearRect(0,0,n.canvas.width,n.canvas.height);for(let a=i;a<=r;a++){const r=e.grid[a];r&&r.forEach(((e,r)=>{s.drawAnim(e.name,n,a-i,r,t.time)}))}}(c,c+o),i.drawImage(n.canvas,Math.floor(-a.pos.x%16),Math.floor(-a.pos.y))}}},"./src/layers/collision.ts":(t,e,s)=>{function i(t){const e=[],s=t.tileSize,i=t.getByIndex;return t.getByIndex=function(s,r){return e.push({x:s,y:r}),i.call(t,s,r)},function(t,i){t.strokeStyle="blue",e.forEach((({x:e,y:r})=>{t.beginPath(),t.rect(Math.floor(e*s-i.pos.x),Math.floor(r*s-i.pos.y),s,s),t.stroke(),t.closePath()})),e.length=0}}function r(t){const e=t.tileCollider.resolvers.map(i),s=(r=t.entities,function(t,e){t.strokeStyle="red",r.forEach((s=>{t.beginPath(),t.rect(Math.floor(s.bounds.left-e.pos.x),Math.floor(s.bounds.top-e.pos.y),s.size.x,s.size.y),t.stroke(),t.closePath()}))});var r;return function(t,i){e.forEach((e=>e(t,i))),s(t,i)}}s.r(e),s.d(e,{createCollisionLayer:()=>r})},"./src/layers/color.ts":(t,e,s)=>{function i(t){return function(e){e.fillStyle=t,e.fillRect(0,0,e.canvas.width,e.canvas.height)}}s.r(e),s.d(e,{createColorLayer:()=>i})},"./src/layers/dashboard.ts":(t,e,s)=>{s.r(e),s.d(e,{createDashboardLayer:()=>a});var i=s("./src/player.ts"),r=s("./src/traits/LevelTimer.ts"),n=s("./src/traits/Player.ts");function a(t,e){const s=t.size,a=2*t.size,o=function(t){for(const e of t.entities)if(e.hasTrait(r.default))return e.getTrait(r.default)}(e);return function(r){const c=function(t){for(const e of(0,i.findPlayers)(t))return e.getTrait(n.default)}(e);c&&(t.draw(c.name,r,16,s),t.draw(c.score.toString().padStart(6,"0"),r,16,a),t.draw(`@x${c.coins.toString().padStart(2,"0")}`,r,96,a),t.draw("WORLD",r,152,s),t.draw(e.name,r,160,a),t.draw("TIME",r,208,s),t.draw(Math.max(0,o.currentTime).toFixed(0).padStart(3,"0"),r,216,a))}}},"./src/layers/player-progress.ts":(t,e,s)=>{s.r(e),s.d(e,{createPlayerProgressLayer:()=>n});var i=s("./src/entities/Mario.ts"),r=s("./src/player.ts");function n(t,e){const s=t.size,n=document.createElement("canvas");n.width=n.height=32;const a=n.getContext("2d");return function(o){const c=function(t){for(const e of(0,r.findPlayers)(t))if(e instanceof i.default)return e}(e);t.draw(`WORLD ${e.name}`,o,12*s,12*s),a.clearRect(0,0,n.width,n.height),c.draw(a),o.drawImage(n,12*s,15*s),t.draw(`x ${c.player.lives.toString().padStart(3," ")}`,o,16*s,16*s)}}},"./src/layers/sprite.ts":(t,e,s)=>{function i(t,e=64,s=64){const i=document.createElement("canvas").getContext("2d");return i.imageSmoothingEnabled=!1,i.canvas.width=e,i.canvas.height=s,function(r,n){t.forEach((t=>{i.clearRect(0,0,e,s),t.draw(i),r.drawImage(i.canvas,Math.floor(t.pos.x-n.pos.x),Math.floor(t.pos.y-n.pos.y))}))}}s.r(e),s.d(e,{createSpriteLayer:()=>i})},"./src/layers/text.ts":(t,e,s)=>{function i(t,e){const s=t.size;return function(i){const r=e.length,n=(Math.floor(i.canvas.width/s)-r)/2,a=Math.floor(i.canvas.height/s)/2;t.draw(e,i,n*s,a*s)}}s.r(e),s.d(e,{createTextLayer:()=>i})},"./src/loaders.ts":(t,e,s)=>{s.r(e),s.d(e,{loadImage:()=>r,loadJSON:()=>n});var i=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function r(t){return i(this,void 0,void 0,(function*(){return new Promise(((e,s)=>{const i=new Image;i.onload=()=>e(i),i.onerror=s,i.src=t}))}))}function n(t){return fetch(t).then((t=>t.json()))}},"./src/loaders/audio.ts":(t,e,s)=>{s.r(e),s.d(e,{loadAudioBoard:()=>a,createAudioLoader:()=>o});var i=s("./src/AudioBoard.ts"),r=s("./src/loaders.ts"),n=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function a(t,e){return n(this,void 0,void 0,(function*(){const s=o(e),n=yield(0,r.loadJSON)(`./sounds/${t}.json`),a=new i.default,c=[];return n.fx.forEach((({name:t,url:e})=>{c.push(s(e).then((e=>{a.add(t,e)})))})),yield Promise.all(c),a}))}function o(t){return function(e){return fetch(e).then((t=>t.arrayBuffer())).then((e=>t.decodeAudioData(e)))}}},"./src/loaders/font.ts":(t,e,s)=>{s.r(e),s.d(e,{FontSheet:()=>o,loadFont:()=>c});var i=s("./src/loaders.ts"),r=s("./src/SpriteSheet.ts"),n=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};const a=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";class o{constructor(t,e){this.sheet=t,this.size=e}draw(t,e,s,i){for(let r=0;r<t.length;r++)this.sheet.draw(t[r],e,s+r*this.size,i)}}function c(){return n(this,void 0,void 0,(function*(){const t=yield(0,i.loadImage)("./sheets/font.png"),e=new r.default(t);for(let t=0;t<a.length;t++){const s=8*(15&t),i=8*(t>>4);e.define(a[t],s,i,8,8)}return new o(e,8)}))}},"./src/loaders/level.ts":(t,e,s)=>{s.r(e),s.d(e,{createLevelLoader:()=>m});var i=s("./src/Entity.ts"),r=s("./src/layers/background.ts"),n=s("./src/layers/sprite.ts"),a=s("./src/Level.ts"),o=s("./src/loaders.ts"),c=s("./src/math.ts"),d=s("./src/traits/LevelTimer.ts"),l=s("./src/traits/Trigger.ts"),u=s("./src/loaders/music.ts"),h=s("./src/loaders/sprite.ts"),f=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function p(t){return f(this,void 0,void 0,(function*(){return yield(0,o.loadJSON)(`./sprites/patterns/${t}.json`)}))}function y(t,e,s,i){t.layers.forEach((t=>{const n=function(t,e){const s=new c.Matrix;for(const{tile:i,x:r,y:n}of function*(t,e){function*s(t,i,r){for(const n of t)for(const{x:t,y:a}of w(n.ranges)){const o=t+i,c=a+r;if(n.pattern){const t=e[n.pattern].tiles;yield*s(t,o,c)}else yield{tile:n,x:o,y:c}}}yield*s(t,0,0)}(t,e))s.set(r,n,i);return s}(t.tiles,i),a=(0,r.createBackgroundLayer)(e,n,s);e.comp.add(a),e.tileCollider.addGrid(n)}))}function m(t){return function(e){return(0,o.loadJSON)(`./levels/${e}.json`).then((t=>Promise.all([t,(0,h.loadSpriteSheet)(t.spriteSheet),(0,u.loadMusicSheet)(t.musicSheet),p(t.patternSheet)]))).then((([s,r,o,c])=>{const u=new a.default;return u.name=e,u.music.setPlayer(o),y(s,u,r,c),function(t,e,s){t.entities.forEach((({name:t,pos:[i,r]})=>{const n=(0,s[t])();n.pos.set(i,r),e.entities.add(n)}));const i=(0,n.createSpriteLayer)(e.entities);e.comp.add(i)}(s,u,t),function(t,e){if(t.triggers)for(const s of t.triggers){const t=new l.default;if(!t)continue;t.conditions.push(((t,e,i,r)=>{r.events.emit(a.default.TRIGGER,s,t,e)}));const r=new i.default;r.addTrait(t),r.pos.set(...s.pos),r.size.set(16,16),e.entities.add(r)}}(s,u),function(t){const e=new i.default;e.addTrait(new d.default),t.entities.add(e),t.events.listen(d.default.TIMER_OKAY,(()=>t.music.playTheme())),t.events.listen(d.default.TIMER_HURRY,(()=>t.music.playHurryTheme()))}(u),u}))}}function*v(t,e,s,i){const r=t+e,n=s+i;for(let e=t;e<r;e++)for(let t=s;t<n;t++)yield{x:e,y:t}}function g(t){switch(t.length){case 4:return v(...t);case 3:return v(t[0],t[1],t[2],1);case 2:return v(t[0],1,t[1],1)}}function*w(t){for(const e of t)yield*g(e)}},"./src/loaders/music.ts":(t,e,s)=>{s.r(e),s.d(e,{loadMusicSheet:()=>a});var i=s("./src/loaders.ts"),r=s("./src/MusicPlayer.ts"),n=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function a(t){return n(this,void 0,void 0,(function*(){const e=yield(0,i.loadJSON)(`./music/${t}.json`),s=new r.default;for(const[t,i]of Object.entries(e))s.addTrack(t,i.url);return s}))}},"./src/loaders/sprite.ts":(t,e,s)=>{s.r(e),s.d(e,{loadSpriteSheet:()=>a});var i=s("./src/anim.ts"),r=s("./src/loaders.ts"),n=s("./src/SpriteSheet.ts");function a(t){return(0,r.loadJSON)(`./sprites/${t}.json`).then((t=>Promise.all([t,(0,r.loadImage)(t.imageURL)]))).then((([t,e])=>{const s=new n.default(e,t.tileW,t.tileH);return t.tiles&&t.tiles.forEach((t=>{s.defineTile(t.name,...t.index)})),t.frames&&t.frames.forEach((({name:t,rect:e})=>{s.define(t,...e)})),t.animations&&t.animations.forEach((({name:t,frameLen:e,frames:r})=>{const n=(0,i.createAnim)(r,e);s.defineAnim(t,n)})),s}))}},"./src/math.ts":(t,e,s)=>{s.r(e),s.d(e,{Matrix:()=>i,Vector:()=>r});class i{constructor(){this.grid=[]}delete(t,e){const s=this.grid[t];s&&delete s[e]}get(t,e){const s=this.grid[t];if(s)return s[e]}set(t,e,s){this.grid[t]||(this.grid[t]=[]),this.grid[t][e]=s}forEach(t){this.grid.forEach(((e,s)=>{e.forEach(((e,i)=>{t(s,i,e)}))}))}}class r{constructor(t=0,e=0){this.set(t,e)}copy(t){this.set(t.x,t.y)}set(t,e){this.x=t,this.y=e}}},"./src/player.ts":(t,e,s)=>{s.r(e),s.d(e,{createPlayerEnv:()=>a,findPlayers:()=>o});var i=s("./src/Entity.ts"),r=s("./src/traits/Player.ts"),n=s("./src/traits/PlayerController.ts");function a(t){const e=new i.default,s=new n.default;return s.checkpoint.set(64,64),s.setPlayer(t),e.addTrait(s),e}function*o(t){if(t)for(const e of t.entities)e.hasTrait(r.default)&&(yield e)}},"./src/tiles/brick.ts":(t,e,s)=>{s.r(e),s.d(e,{brick:()=>n});var i=s("./src/Entity.ts"),r=s("./src/traits/Player.ts");const n=[function(t,e){const{entity:s,match:r}=t;s.vel.x>0?s.bounds.right>r.x1&&s.obstruct(i.Sides.RIGHT,r):s.vel.x<0&&s.bounds.left<r.x2&&s.obstruct(i.Sides.LEFT,r)},function(t,e){const{entity:s,match:n,resolver:a,gameContext:o}=t;if(s.vel.y>0)s.bounds.bottom>n.y1&&s.obstruct(i.Sides.BOTTOM,n);else if(s.vel.y<0){if(s.getTrait(r.default)){a.matrix.delete(n.indexX,n.indexY);const t=o.entityFactory.goomba();t.pos.set(s.pos.x,n.y1),t.vel.set(50,-400),e.entities.add(t)}s.bounds.top<n.y2&&s.obstruct(i.Sides.TOP,n)}}]},"./src/tiles/coin.ts":(t,e,s)=>{s.r(e),s.d(e,{coin:()=>n});var i=s("./src/traits/Player.ts");function r(t){const{entity:e,resolver:s,match:r}=t,n=e.getTrait(i.default);if(n instanceof i.default){n.addCoins(1);s.matrix.delete(r.indexX,r.indexY)}}const n=[r,r]},"./src/tiles/ground.ts":(t,e,s)=>{s.r(e),s.d(e,{ground:()=>r});var i=s("./src/Entity.ts");const r=[function(t){const{entity:e,match:s}=t;e.vel.x>0?e.bounds.right>s.x1&&e.obstruct(i.Sides.RIGHT,s):e.vel.x<0&&e.bounds.left<s.x2&&e.obstruct(i.Sides.LEFT,s)},function(t){const{entity:e,match:s}=t;e.vel.y>0?e.bounds.bottom>s.y1&&e.obstruct(i.Sides.BOTTOM,s):e.vel.y<0&&e.bounds.top<s.y2&&e.obstruct(i.Sides.TOP,s)}]},"./src/traits/Emitter.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{constructor(){super(...arguments),this.cooldown=2,this.interval=2,this.emitters=[]}emit(t,e,s){for(const i of this.emitters)i(t,e,s)}update(t,e,s){const{dt:i}=e;this.cooldown-=i,this.cooldown<0&&(this.emit(t,e,s),this.cooldown=this.interval)}}},"./src/traits/Go.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Trait.ts"),r=s("./src/traits/Jump.ts");class n extends i.default{constructor(){super(),this.dir=0,this.acceleration=400,this.deceleration=300,this.friction=2e-4,this.distance=0,this.heading=1}set drag(t){this.friction=t}update(t,e){const{dt:s}=e,i=Math.abs(t.vel.x);if(0!==this.dir)t.vel.x+=this.acceleration*s*this.dir,t.hasTrait(r.default)&&t.getTrait(r.default).falling||(this.heading=this.dir);else if(0!==t.vel.x){const e=Math.min(i,this.deceleration*s);t.vel.x+=e*(t.vel.x>0?-1:1)}else this.distance=0;const n=this.friction*t.vel.x*i;t.vel.x-=n,this.distance+=i*s}}},"./src/traits/Gravity.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{constructor(){super(...arguments),this.gravity=1500}update(t,e){const{dt:s}=e;t.vel.y+=this.gravity*s}}},"./src/traits/Jump.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Entity.ts"),r=s("./src/Trait.ts");class n extends r.default{constructor(){super(),this.duration=.3,this.velocity=200,this.engageTime=0,this.ready=0,this.graceTime=0,this.graceDuration=.1}get falling(){return this.ready<0}start(){this.graceTime=this.graceDuration}cancel(){this.engageTime=0,this.graceTime=0}obstruct(t,e){e===i.Sides.BOTTOM&&(this.ready=1),e===i.Sides.TOP&&this.cancel()}update(t,e){const{dt:s}=e;this.graceTime>0&&(this.ready>0&&(t.sounds.add("jump"),this.engageTime=this.duration,this.graceTime=0),this.graceTime-=s),this.engageTime>0&&(t.vel.y=-(this.velocity+.3*Math.abs(t.vel.x)),this.engageTime-=s),this.ready--}}},"./src/traits/Killable.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{constructor(){super(...arguments),this.dead=!1,this.removeAfter=2,this.deadTime=0}kill(){this.queue((()=>this.dead=!0))}revive(){this.dead=!1,this.deadTime=0}update(t,e,s){this.dead&&(this.deadTime+=e.dt,this.deadTime>this.removeAfter&&this.queue((()=>s.entities.delete(t))))}}},"./src/traits/LevelTimer.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{constructor(){super(...arguments),this.totalTime=300,this.currentTime=this.totalTime,this.hurryTime=100,this.hurryEmitted=null}update(t,e,s){this.currentTime-=2*e.dt,!0!==this.hurryEmitted&&this.currentTime<this.hurryTime&&(s.events.emit(r.TIMER_HURRY),this.hurryEmitted=!0),!1!==this.hurryEmitted&&this.currentTime>this.hurryTime&&(s.events.emit(r.TIMER_OKAY),this.hurryEmitted=!1)}}r.TIMER_HURRY=Symbol("timer.hurry"),r.TIMER_OKAY=Symbol("timer.okay")},"./src/traits/PendulumMove.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Entity.ts"),r=s("./src/Trait.ts");class n extends r.default{constructor(){super(...arguments),this.enabled=!0,this.speed=-30}obstruct(t,e){e!==i.Sides.LEFT&&e!==i.Sides.RIGHT||(this.speed*=-1)}update(t,e){this.enabled&&(t.vel.x=this.speed)}}},"./src/traits/Physics.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{constructor(){super(...arguments),this.gravity=1500}update(t,e,s){const{dt:i}=e;t.pos.x+=t.vel.x*i,s.tileCollider.checkX(t,e,s),t.pos.y+=t.vel.y*i,s.tileCollider.checkY(t,e,s),t.vel.y+=this.gravity*i}}},"./src/traits/Player.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Trait.ts"),r=s("./src/traits/Stomper.ts");class n extends i.default{constructor(){super(),this.name="N/A",this.coins=0,this.lives=3,this.score=0,this.listen(r.default.STOMP,(()=>{this.score+=100}))}addCoins(t){for(this.coins+=t,this.queue((t=>t.sounds.add("coin")));this.coins>=100;)this.addLives(1),this.coins-=100}addLives(t){this.lives+=t}}},"./src/traits/PlayerController.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/math.ts"),r=s("./src/Trait.ts");class n extends r.default{constructor(){super(...arguments),this.checkpoint=new i.Vector,this.player=null}setPlayer(t){this.player=t}update(t,e,s){this.player&&!s.entities.has(this.player)&&(this.player.killable.revive(),this.player.pos.set(this.checkpoint.x,this.checkpoint.y),s.entities.add(this.player))}}},"./src/traits/Solid.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Entity.ts"),r=s("./src/Trait.ts");class n extends r.default{constructor(){super(...arguments),this.obstructs=!0}obstruct(t,e,s){if(this.obstructs)switch(e){case i.Sides.RIGHT:t.bounds.left=s.x1-t.size.x,t.vel.x=0;break;case i.Sides.LEFT:t.bounds.left=s.x2,t.vel.x=0;break;case i.Sides.BOTTOM:t.bounds.top=s.y1-t.size.y,t.vel.y=0;break;case i.Sides.TOP:t.bounds.top=s.y2,t.vel.y=0}}}},"./src/traits/Stomper.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Trait.ts"),r=s("./src/traits/Killable.ts");class n extends i.default{constructor(){super(...arguments),this.boundSpeed=400}bounce(t,e){t.bounds.bottom=e.bounds.top,t.vel.y=-this.boundSpeed}collides(t,e){if(!e.hasTrait(r.default))return;const s=e.getTrait(r.default);s&&!s.dead&&t.vel.y>e.vel.y&&(this.queue((()=>this.bounce(t,e))),t.sounds.add("stomp"),t.events.emit(n.STOMP,t,e))}}n.STOMP=Symbol("stomp")},"./src/traits/Trigger.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{constructor(){super(...arguments),this.touches=new Set,this.conditions=[]}collides(t,e){this.touches.add(e)}update(t,e,s){if(this.touches.size>0){for(const i of this.conditions)i(t,this.touches,e,s);this.touches.clear()}}}},"./src/traits/Velocity.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Trait.ts");class r extends i.default{update(t,e){const{dt:s}=e;t.pos.x+=t.vel.x*s,t.pos.y+=t.vel.y*s}}}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{s.r(i);var t=s("./src/Timer.ts"),e=s("./src/input.ts"),r=s("./src/loaders/level.ts"),n=s("./src/entities.ts"),a=s("./src/layers/collision.ts"),o=s("./src/loaders/font.ts"),c=s("./src/layers/dashboard.ts"),d=s("./src/player.ts"),l=s("./src/SceneRunner.ts"),u=s("./src/layers/player-progress.ts"),h=s("./src/TimedScene.ts"),f=s("./src/layers/color.ts"),p=s("./src/Level.ts"),y=s("./src/traits/Player.ts"),m=s("./src/Scene.ts"),v=s("./src/layers/text.ts"),g=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};const w=document.querySelector("canvas#screen"),x=()=>{window.removeEventListener("click",x),function(s){g(this,void 0,void 0,(function*(){const i=s.getContext("2d");i.imageSmoothingEnabled=!1;const w=new AudioContext,[x,T]=yield Promise.all([(0,n.loadEntities)(w),(0,o.loadFont)()]),b=yield(0,r.createLevelLoader)(x),S=new l.default,E=x.mario();E.player.name="MARIO",(0,e.setupKeyboard)(window).addReceiver(E);const M=new t.default;M.update=t=>{S.update({dt:t,audioContext:w,entityFactory:x,videoContext:i})},M.start(),function t(e){return g(this,void 0,void 0,(function*(){const s=new m.default;s.comp.add((0,f.createColorLayer)("#000")),s.comp.add((0,v.createTextLayer)(T,`Loading ${e}`)),S.addScene(s),S.runNext();const i=yield b(e);i.events.listen(p.default.TRIGGER,((e,s,i)=>{if("goto"===e.type)for(const s of i)if(s.hasTrait(y.default))return t(e.name)})),yield new Promise((t=>setTimeout(t,1e3)));const r=(0,c.createDashboardLayer)(T,i),n=(0,u.createPlayerProgressLayer)(T,i);E.pos.set(0,0),i.entities.add(E);const o=(0,d.createPlayerEnv)(E);i.entities.add(o);const l=new h.default;l.comp.add((0,f.createColorLayer)("#000")),l.comp.add(r),l.comp.add(n),S.addScene(l),i.comp.add((0,a.createCollisionLayer)(i)),i.comp.add(r),S.addScene(i),S.runNext()}))}("debug-progression")}))}(w)};window.addEventListener("click",x)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUVyQm1jLEVBQVlwWCxhQVdkcVgsQ0FBUyx3QkFPVFEsQ0FBSzNXLElBRVA1RCxPQUFPRSxpQkFBaUIsUUFBUzNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvQXVkaW9Cb2FyZC50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9Cb3VuZGluZ0JveC50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9DYW1lcmEudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvQ29tcG9zaXRvci50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9FbnRpdHkudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvRW50aXR5Q29sbGlkZXIudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvRXZlbnRCdWZmZXIudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvRXZlbnRFbWl0dGVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL0lucHV0Um91dGVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL0tleWJvYXJkU3RhdGUudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvTGV2ZWwudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvTXVzaWNDb250cm9sbGVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL011c2ljUGxheWVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL1NjZW5lLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL1NjZW5lUnVubmVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL1Nwcml0ZVNoZWV0LnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL1RpbGVDb2xsaWRlci50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9UaW1lZFNjZW5lLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL1RpbWVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL1RyYWl0LnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL2FuaW0udHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvZW50aXRpZXMudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvZW50aXRpZXMvQnVsbGV0LnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL2VudGl0aWVzL0Nhbm5vbi50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9lbnRpdGllcy9Hb29tYmEudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvZW50aXRpZXMvS29vcGEudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvZW50aXRpZXMvTWFyaW8udHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvaW5wdXQudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbGF5ZXJzL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbGF5ZXJzL2NvbGxpc2lvbi50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9sYXllcnMvY29sb3IudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbGF5ZXJzL2Rhc2hib2FyZC50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9sYXllcnMvcGxheWVyLXByb2dyZXNzLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL2xheWVycy9zcHJpdGUudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbGF5ZXJzL3RleHQudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbG9hZGVycy50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9sb2FkZXJzL2F1ZGlvLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL2xvYWRlcnMvZm9udC50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9sb2FkZXJzL2xldmVsLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL2xvYWRlcnMvbXVzaWMudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbG9hZGVycy9zcHJpdGUudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvbWF0aC50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy9wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvdGlsZXMvYnJpY2sudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvdGlsZXMvY29pbi50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy90aWxlcy9ncm91bmQudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvdHJhaXRzL0VtaXR0ZXIudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvdHJhaXRzL0dvLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9HcmF2aXR5LnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9KdW1wLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9LaWxsYWJsZS50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy90cmFpdHMvTGV2ZWxUaW1lci50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby8uL3NyYy90cmFpdHMvUGVuZHVsdW1Nb3ZlLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9QaHlzaWNzLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvdHJhaXRzL1BsYXllckNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vLi9zcmMvdHJhaXRzL1NvbGlkLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9TdG9tcGVyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9UcmlnZ2VyLnRzIiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL3RyYWl0cy9WZWxvY2l0eS50cyIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3VwZXItbWFyaW8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zdXBlci1tYXJpby93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3N1cGVyLW1hcmlvLy4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXVkaW9Cb2FyZCB7XG4gIHByaXZhdGUgYnVmZmVyczogTWFwPHN0cmluZywgQXVkaW9CdWZmZXI+ID0gbmV3IE1hcCgpO1xuXG4gIGFkZChuYW1lOiBzdHJpbmcsIGJ1ZmZlcjogQXVkaW9CdWZmZXIpe1xuICAgIHRoaXMuYnVmZmVycy5zZXQobmFtZSwgYnVmZmVyKTtcbiAgfVxuXG4gIHBsYXkobmFtZTogc3RyaW5nLCBjb250ZXh0OiBBdWRpb0NvbnRleHQpe1xuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVycy5nZXQobmFtZSk7XG4gICAgaWYoIWJ1ZmZlcikgcmV0dXJuO1xuICAgIGNvbnN0IHNvdXJjZSA9IGNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgc291cmNlLmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgc291cmNlLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICBzb3VyY2Uuc3RhcnQoMCk7XG4gIH1cbn0iLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvdW5kaW5nQm94IHtcbiAgcHJpdmF0ZSBwb3M6IFZlY3RvcjtcbiAgcHJpdmF0ZSBzaXplOiBWZWN0b3I7XG4gIHByaXZhdGUgb2Zmc2V0OiBWZWN0b3I7XG5cbiAgY29uc3RydWN0b3IocG9zOiBWZWN0b3IsIHNpemU6IFZlY3Rvciwgb2Zmc2V0OiBWZWN0b3Ipe1xuICAgIHRoaXMucG9zID0gcG9zO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gIH1cblxuICBvdmVybGFwcyhib3g6IEJvdW5kaW5nQm94KSA6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmJvdHRvbSA+IGJveC50b3AgXG4gICAgICAgICYmIHRoaXMudG9wIDwgYm94LmJvdHRvbSBcbiAgICAgICAgJiYgdGhpcy5sZWZ0IDwgYm94LnJpZ2h0IFxuICAgICAgICAmJiB0aGlzLnJpZ2h0ID4gYm94LmxlZnQ7XG4gIH1cblxuICBnZXQgYm90dG9tKCl7IHJldHVybiB0aGlzLnBvcy55ICsgdGhpcy5zaXplLnkgKyB0aGlzLm9mZnNldC55OyB9XG4gIGdldCB0b3AoKXsgcmV0dXJuIHRoaXMucG9zLnkgKyB0aGlzLm9mZnNldC55OyB9XG4gIGdldCBsZWZ0KCl7IHJldHVybiB0aGlzLnBvcy54ICsgdGhpcy5vZmZzZXQueDsgfVxuICBnZXQgcmlnaHQoKXsgcmV0dXJuIHRoaXMucG9zLnggKyB0aGlzLnNpemUueCArIHRoaXMub2Zmc2V0Lng7IH1cblxuICBzZXQgYm90dG9tKHkpeyB0aGlzLnBvcy55ID0geSAtICh0aGlzLnNpemUueSArIHRoaXMub2Zmc2V0LnkpOyB9XG4gIHNldCB0b3AoeSl7IHRoaXMucG9zLnkgPSB5IC0gdGhpcy5vZmZzZXQueTsgfVxuICBzZXQgbGVmdCh4KXsgdGhpcy5wb3MueCA9IHggLSB0aGlzLm9mZnNldC54OyB9XG4gIHNldCByaWdodCh4KXsgdGhpcy5wb3MueCA9IHggLSAodGhpcy5zaXplLnggKyB0aGlzLm9mZnNldC54KTsgfVxufSIsImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FtZXJhIHtcbiAgcHVibGljIHBvczogVmVjdG9yO1xuICBwdWJsaWMgc2l6ZTogVmVjdG9yO1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMucG9zID0gbmV3IFZlY3RvcigwLCAwKTtcbiAgICB0aGlzLnNpemUgPSBuZXcgVmVjdG9yKDI1NiwgMjI0KTtcbiAgfVxufSIsImltcG9ydCBDYW1lcmEgZnJvbSBcIi4vQ2FtZXJhXCI7XG5cbmV4cG9ydCB0eXBlIExheWVyUmVuZGVyZXIgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbWVyYT86IENhbWVyYSkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9zaXRvciB7XG4gIHByaXZhdGUgbGF5ZXJzOiBMYXllclJlbmRlcmVyW107XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy5sYXllcnMgPSBbXTtcbiAgfVxuICBhZGQobGF5ZXI6IExheWVyUmVuZGVyZXIpe1xuICAgIHRoaXMubGF5ZXJzLnB1c2gobGF5ZXIpO1xuICB9XG4gIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbWVyYT86IENhbWVyYSl7XG4gICAgdGhpcy5sYXllcnMuZm9yRWFjaChsYXllciA9PiBsYXllcihjdHgsIGNhbWVyYSkpXG4gIH1cbn0iLCJpbXBvcnQgQXVkaW9Cb2FyZCBmcm9tIFwiLi9BdWRpb0JvYXJkXCI7XG5pbXBvcnQgQm91bmRpbmdCb3ggZnJvbSBcIi4vQm91bmRpbmdCb3hcIjtcbmltcG9ydCB7IExheWVyUmVuZGVyZXIgfSBmcm9tIFwiLi9Db21wb3NpdG9yXCI7XG5pbXBvcnQgRXZlbnRCdWZmZXIgZnJvbSBcIi4vRXZlbnRCdWZmZXJcIjtcbmltcG9ydCBMZXZlbCwgeyBHYW1lQ29udGV4dCB9IGZyb20gXCIuL0xldmVsXCI7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgeyBSZXNvbHZlZFRpbGUgfSBmcm9tIFwiLi9UaWxlQ29sbGlkZXJcIjtcbmltcG9ydCBUcmFpdCBmcm9tIFwiLi9UcmFpdFwiO1xuXG5leHBvcnQgZW51bSBTaWRlcyB7XG4gIFRPUCwgQk9UVE9NLCBMRUZULCBSSUdIVCxcbn1cblxuZXhwb3J0IHR5cGUgVGFzayA9IChlbnRpdHk/OiBFbnRpdHkpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBMaXN0ZW5lciA9IHtcbiAgbmFtZTogU3ltYm9sLFxuICBjYWxsYmFjazogVGFzayxcbiAgY291bnQ6IG51bWJlcixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudGl0eSB7XG4gIHB1YmxpYyBhdWRpb0JvYXJkOiBBdWRpb0JvYXJkO1xuICBwdWJsaWMgc291bmRzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICBwdWJsaWMgZXZlbnRzOiBFdmVudEJ1ZmZlciA9IG5ldyBFdmVudEJ1ZmZlcigpO1xuICBcbiAgcHVibGljIHBvczogVmVjdG9yID0gbmV3IFZlY3RvcigpO1xuICBwdWJsaWMgc2l6ZTogVmVjdG9yID0gbmV3IFZlY3RvcigpO1xuICBwdWJsaWMgb2Zmc2V0OiBWZWN0b3IgPSBuZXcgVmVjdG9yKCk7XG4gIHB1YmxpYyBib3VuZHM6IEJvdW5kaW5nQm94O1xuICBwdWJsaWMgdmVsOiBWZWN0b3IgPSBuZXcgVmVjdG9yKCk7XG4gIHB1YmxpYyBsaWZldGltZTogbnVtYmVyID0gMDtcblxuICBwcml2YXRlIHRyYWl0czogTWFwPEZ1bmN0aW9uLCBUcmFpdD4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoYXVkaW9Cb2FyZD86IEF1ZGlvQm9hcmQpe1xuICAgIHRoaXMuYXVkaW9Cb2FyZCA9IGF1ZGlvQm9hcmQ7XG4gICAgdGhpcy5ib3VuZHMgPSBuZXcgQm91bmRpbmdCb3godGhpcy5wb3MsIHRoaXMuc2l6ZSwgdGhpcy5vZmZzZXQpO1xuICB9XG5cbiAgYWRkVHJhaXQodHJhaXQ6IFRyYWl0KXtcbiAgICB0aGlzLnRyYWl0cy5zZXQodHJhaXQuY29uc3RydWN0b3IsIHRyYWl0KTtcbiAgfVxuXG4gIGNvbGxpZGVzKGNhbmRpZGF0ZTogRW50aXR5KXtcbiAgICB0aGlzLnRyYWl0cy5mb3JFYWNoKHRyYWl0ID0+IHtcbiAgICAgIHRyYWl0LmNvbGxpZGVzKHRoaXMsIGNhbmRpZGF0ZSk7XG4gICAgfSlcbiAgfVxuXG4gIGZpbmFsaXplKCl7XG4gICAgdGhpcy5ldmVudHMuZW1pdChUcmFpdC5UQVNLLCB0aGlzKTtcblxuICAgIHRoaXMudHJhaXRzLmZvckVhY2godHJhaXQgPT4ge1xuICAgICAgdHJhaXQuZmluYWxpemUodGhpcyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmV2ZW50cy5jbGVhcigpO1xuICB9XG5cbiAgZ2V0VHJhaXQ8VCBleHRlbmRzIFRyYWl0PihjbHM6IEZ1bmN0aW9uKSA6IFQge1xuICAgIHJldHVybiB0aGlzLnRyYWl0cy5nZXQoY2xzKSBhcyBUO1xuICB9XG5cbiAgaGFzVHJhaXQoY2xzOiBGdW5jdGlvbikgOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50cmFpdHMuaGFzKGNscyk7XG4gIH1cblxuICBvYnN0cnVjdChzaWRlOiBTaWRlcywgbWF0Y2g/OiBSZXNvbHZlZFRpbGUpe1xuICAgIHRoaXMudHJhaXRzLmZvckVhY2godHJhaXQgPT4ge1xuICAgICAgdHJhaXQub2JzdHJ1Y3QodGhpcywgc2lkZSwgbWF0Y2gpO1xuICAgIH0pO1xuICB9XG5cbiAgcGxheVNvdW5kcyhhdWRpb0JvYXJkOiBBdWRpb0JvYXJkLCBhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCl7XG4gICAgdGhpcy5zb3VuZHMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIGF1ZGlvQm9hcmQucGxheShuYW1lLCBhdWRpb0NvbnRleHQpO1xuICAgIH0pO1xuICAgIHRoaXMuc291bmRzLmNsZWFyKCk7XG4gIH1cblxuICB1cGRhdGUoZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0LCBsZXZlbD86IExldmVsKXtcbiAgICB0aGlzLnRyYWl0cy5mb3JFYWNoKHRyYWl0ID0+IHtcbiAgICAgIHRyYWl0LnVwZGF0ZSh0aGlzLCBnYW1lQ29udGV4dCwgbGV2ZWwpO1xuICAgIH0pO1xuICAgIHRoaXMucGxheVNvdW5kcyh0aGlzLmF1ZGlvQm9hcmQsIGdhbWVDb250ZXh0LmF1ZGlvQ29udGV4dCk7XG4gICAgdGhpcy5saWZldGltZSArPSBnYW1lQ29udGV4dC5kdDtcbiAgfVxuXG4gIHB1YmxpYyBkcmF3OiBMYXllclJlbmRlcmVyID0gKGN0eCwgY2FtZXJhKSA9PiB7fTtcbn0iLCJpbXBvcnQgRW50aXR5IGZyb20gXCIuL0VudGl0eVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRpdHlDb2xsaWRlciB7XG4gIGVudGl0aWVzOiBTZXQ8RW50aXR5PjtcbiAgY29uc3RydWN0b3IoZW50aXRpZXM6IFNldDxFbnRpdHk+KXtcbiAgICB0aGlzLmVudGl0aWVzID0gZW50aXRpZXM7XG4gIH1cbiAgY2hlY2soc3ViamVjdDogRW50aXR5KXtcbiAgICB0aGlzLmVudGl0aWVzLmZvckVhY2goY2FuZGlkYXRlID0+IHtcbiAgICAgIGlmKHN1YmplY3QgPT09IGNhbmRpZGF0ZSkgcmV0dXJuO1xuXG4gICAgICBpZihzdWJqZWN0LmJvdW5kcy5vdmVybGFwcyhjYW5kaWRhdGUuYm91bmRzKSl7XG4gICAgICAgIHN1YmplY3QuY29sbGlkZXMoY2FuZGlkYXRlKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG59IiwidHlwZSBFdmVudCA9IHtcbiAgbmFtZTogU3ltYm9sLFxuICBhcmdzOiBhbnlbXSxcbn1cbnR5cGUgRXZlbnRDYWxsYmFjayA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRCdWZmZXIge1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRbXSA9IFtdO1xuICBcbiAgY2xlYXIoKXtcbiAgICB0aGlzLmV2ZW50cy5sZW5ndGggPSAwO1xuICB9XG5cbiAgZW1pdChuYW1lOiBTeW1ib2wsIC4uLmFyZ3M6IGFueVtdKXtcbiAgICBjb25zdCBldmVudCA9IHsgbmFtZSwgYXJncyB9O1xuICAgIHRoaXMuZXZlbnRzLnB1c2goZXZlbnQpO1xuICB9XG5cbiAgcHJvY2VzcyhuYW1lOiBTeW1ib2wsIGNhbGxiYWNrOiBFdmVudENhbGxiYWNrKXtcbiAgICB0aGlzLmV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmKGV2ZW50Lm5hbWUgPT09IG5hbWUpe1xuICAgICAgICBjYWxsYmFjayguLi5ldmVudC5hcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSIsInR5cGUgRXZlbnRDYWxsYmFjayA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IE1hcDxTeW1ib2wsIEV2ZW50Q2FsbGJhY2tbXT4gPSBuZXcgTWFwKCk7XG5cbiAgbGlzdGVuKG5hbWU6IFN5bWJvbCwgY2FsbGJhY2s6IEV2ZW50Q2FsbGJhY2spe1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzLmdldChuYW1lKSB8fCBbXTtcbiAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5saXN0ZW5lcnMuc2V0KG5hbWUsIGNhbGxiYWNrcyk7XG4gIH1cblxuICBlbWl0KG5hbWU6IFN5bWJvbCwgLi4uYXJnczogYW55W10pe1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzLmdldChuYW1lKTtcbiAgICBpZighY2FsbGJhY2tzKSByZXR1cm47XG4gICAgY2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4ge1xuICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgfSk7XG4gIH1cbn0iLCJ0eXBlIFJlY2VpdmVyID0gYW55O1xudHlwZSBSZWNlaXZlckNhbGxiYWNrID0gKHJlY2VpdmVyOiBSZWNlaXZlcikgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXRSb3V0ZXIge1xuICBwdWJsaWMgcmVjZWl2ZXJzOiBTZXQ8UmVjZWl2ZXI+ID0gbmV3IFNldCgpO1xuXG4gIGFkZFJlY2VpdmVyKHJlY2VpdmVyOiBSZWNlaXZlcil7XG4gICAgdGhpcy5yZWNlaXZlcnMuYWRkKHJlY2VpdmVyKTtcbiAgfVxuXG4gIGRyb3BSZWNlaXZlcihyZWNlaXZlcjogUmVjZWl2ZXIpe1xuICAgIHRoaXMucmVjZWl2ZXJzLmRlbGV0ZShyZWNlaXZlcik7XG4gIH1cblxuICByb3V0ZShyb3V0ZUlucHV0OiBSZWNlaXZlckNhbGxiYWNrKXtcbiAgICBmb3IoY29uc3QgcmVjZWl2ZXIgb2YgdGhpcy5yZWNlaXZlcnMpe1xuICAgICAgcm91dGVJbnB1dChyZWNlaXZlcik7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGVudW0gS2V5U3RhdGUgeyBSRUxFQVNFRCwgUFJFU1NFRCB9O1xuXG50eXBlIEtleU1hcCA9IChzdGF0ZTogS2V5U3RhdGUpID0+IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtleWJvYXJkU3RhdGUge1xuICBwcml2YXRlIGtleVN0YXRlczogTWFwPHN0cmluZyxLZXlTdGF0ZT47XG4gIHByaXZhdGUga2V5TWFwOiBNYXA8c3RyaW5nLEtleU1hcD47XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy5rZXlTdGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5rZXlNYXAgPSBuZXcgTWFwKCk7XG4gIH1cbiAgYWRkTWFwcGluZyhjb2RlOiBzdHJpbmcsIGNhbGxiYWNrOiBLZXlNYXApe1xuICAgIHRoaXMua2V5TWFwLnNldChjb2RlLCBjYWxsYmFjayk7XG4gIH1cbiAgaGFuZGxlRXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpe1xuICAgIGNvbnN0IHsgY29kZSwgdHlwZSB9ID0gZXZlbnQ7XG5cbiAgICBpZighdGhpcy5rZXlNYXAuaGFzKGNvZGUpKSByZXR1cm47XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3Qga2V5U3RhdGUgPSB0eXBlID09PSAna2V5ZG93bicgPyBLZXlTdGF0ZS5QUkVTU0VEIDogS2V5U3RhdGUuUkVMRUFTRUQ7XG5cbiAgICBpZih0aGlzLmtleVN0YXRlcy5nZXQoY29kZSkgPT09IGtleVN0YXRlKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmtleVN0YXRlcy5zZXQoY29kZSwga2V5U3RhdGUpO1xuXG4gICAgdGhpcy5rZXlNYXAuZ2V0KGNvZGUpKGtleVN0YXRlKTtcbiAgfVxuICBsaXN0ZW5Ubyh3aW5kb3c6IGFueSl7XG4gICAgWydrZXlkb3duJywgJ2tleXVwJ10uZm9yRWFjaChldmVudE5hbWU9PntcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuL0NhbWVyYVwiO1xuaW1wb3J0IHsgRW50aXR5RmFjdG9yeSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XG5pbXBvcnQgRW50aXR5IGZyb20gXCIuL0VudGl0eVwiO1xuaW1wb3J0IEVudGl0eUNvbGxpZGVyIGZyb20gXCIuL0VudGl0eUNvbGxpZGVyXCI7XG5pbXBvcnQgTXVzaWNDb250cm9sbGVyIGZyb20gXCIuL011c2ljQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgZmluZFBsYXllcnMgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcbmltcG9ydCBTY2VuZSBmcm9tIFwiLi9TY2VuZVwiO1xuaW1wb3J0IFRpbGVDb2xsaWRlciBmcm9tIFwiLi9UaWxlQ29sbGlkZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lQ29udGV4dCB7XG4gIGR0OiBudW1iZXIsXG4gIGF1ZGlvQ29udGV4dDogQXVkaW9Db250ZXh0LFxuICBlbnRpdHlGYWN0b3J5OiBFbnRpdHlGYWN0b3J5LFxuICB2aWRlb0NvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbn1cblxuZnVuY3Rpb24gZm9jdXNQbGF5ZXIobGV2ZWw6IExldmVsKXtcbiAgZm9yKGNvbnN0IHBsYXllciBvZiBmaW5kUGxheWVycyhsZXZlbCkpe1xuICAgIGxldmVsLmNhbWVyYS5wb3MueCA9IE1hdGgubWF4KDAsIHBsYXllci5wb3MueCAtIDEwMCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWwgZXh0ZW5kcyBTY2VuZSB7XG4gIHN0YXRpYyBUUklHR0VSID0gU3ltYm9sKCd0cmlnZ2VyJyk7XG5cbiAgcHVibGljIG5hbWU6IHN0cmluZyA9ICcnO1xuICBwdWJsaWMgY2FtZXJhOiBDYW1lcmEgPSBuZXcgQ2FtZXJhKCk7XG4gIHB1YmxpYyBtdXNpYzogTXVzaWNDb250cm9sbGVyID0gbmV3IE11c2ljQ29udHJvbGxlcigpO1xuICBwdWJsaWMgZW50aXRpZXM6IFNldDxFbnRpdHk+ID0gbmV3IFNldCgpO1xuICBwdWJsaWMgdGlsZUNvbGxpZGVyOiBUaWxlQ29sbGlkZXIgPSBuZXcgVGlsZUNvbGxpZGVyKCk7XG4gIHB1YmxpYyBlbnRpdHlDb2xsaWRlcjogRW50aXR5Q29sbGlkZXIgPSBuZXcgRW50aXR5Q29sbGlkZXIodGhpcy5lbnRpdGllcyk7XG4gIHB1YmxpYyB0aW1lOiBudW1iZXIgPSAwO1xuXG4gIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpe1xuICAgIHRoaXMuY29tcC5kcmF3KGN0eCwgdGhpcy5jYW1lcmEpO1xuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5tdXNpYy5wYXVzZSgpO1xuICB9XG4gIFxuICB1cGRhdGUoZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0KXtcbiAgICBjb25zdCB7IGR0IH0gPSBnYW1lQ29udGV4dDtcblxuICAgIHRoaXMuZW50aXRpZXMuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgZW50aXR5LnVwZGF0ZShnYW1lQ29udGV4dCwgdGhpcyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcbiAgICAgIHRoaXMuZW50aXR5Q29sbGlkZXIuY2hlY2soZW50aXR5KTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXRpZXMuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgZW50aXR5LmZpbmFsaXplKCk7XG4gICAgfSk7XG5cbiAgICBmb2N1c1BsYXllcih0aGlzKTtcblxuICAgIHRoaXMudGltZSArPSBkdDtcbiAgfVxufSIsImltcG9ydCBNdXNpY1BsYXllciBmcm9tIFwiLi9NdXNpY1BsYXllclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdXNpY0NvbnRyb2xsZXIge1xuICBwcml2YXRlIG11c2ljUGxheWVyOiBNdXNpY1BsYXllciA9IG51bGw7XG5cbiAgc2V0UGxheWVyKHBsYXllcjogTXVzaWNQbGF5ZXIpe1xuICAgIHRoaXMubXVzaWNQbGF5ZXIgPSBwbGF5ZXI7XG4gIH1cblxuICBwYXVzZSgpe1xuICAgIHRoaXMubXVzaWNQbGF5ZXIucGF1c2VBbGwoKTtcbiAgfVxuXG4gIHBsYXlUaGVtZShzcGVlZDogbnVtYmVyID0gMSl7XG4gICAgY29uc3QgYXVkaW8gPSB0aGlzLm11c2ljUGxheWVyLnBsYXkoJ21haW4nKTtcbiAgICBhdWRpby5wbGF5YmFja1JhdGUgPSBzcGVlZDtcbiAgfVxuXG4gIHBsYXlIdXJyeVRoZW1lKCl7XG4gICAgY29uc3QgYXVkaW8gPSB0aGlzLm11c2ljUGxheWVyLnBsYXkoJ2h1cnJ5Jyk7XG4gICAgYXVkaW8ubG9vcCA9IGZhbHNlO1xuICAgIGF1ZGlvLm9uZW5kZWQgPSAoKSA9PiB0aGlzLnBsYXlUaGVtZSgxLjMpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVzaWNQbGF5ZXIge1xuICBwcml2YXRlIHRyYWNrczogTWFwPHN0cmluZywgSFRNTEF1ZGlvRWxlbWVudD4gPSBuZXcgTWFwKCk7XG5cbiAgYWRkVHJhY2sobmFtZTogc3RyaW5nLCB0cmFjazogc3RyaW5nKXtcbiAgICBjb25zdCBhdWRpbyA9IG5ldyBBdWRpbyh0cmFjayk7XG4gICAgYXVkaW8ubG9vcCA9IHRydWU7XG4gICAgdGhpcy50cmFja3Muc2V0KG5hbWUsIGF1ZGlvKTtcbiAgfVxuXG4gIHBhdXNlQWxsKCl7XG4gICAgZm9yKGNvbnN0IGF1ZGlvIG9mIHRoaXMudHJhY2tzLnZhbHVlcygpKXtcbiAgICAgIGF1ZGlvLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgcGxheShuYW1lOiBzdHJpbmcpIDogSFRNTEF1ZGlvRWxlbWVudCB7XG4gICAgdGhpcy5wYXVzZUFsbCgpO1xuICAgIGNvbnN0IHRyYWNrID0gdGhpcy50cmFja3MuZ2V0KG5hbWUpO1xuICAgIGlmKHRyYWNrKSB0cmFjay5wbGF5KCk7XG4gICAgcmV0dXJuIHRyYWNrO1xuICB9XG59IiwiaW1wb3J0IENvbXBvc2l0b3IgZnJvbSBcIi4vQ29tcG9zaXRvclwiO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiLi9FdmVudEVtaXR0ZXJcIjtcbmltcG9ydCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4vTGV2ZWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NlbmUge1xuICBzdGF0aWMgQ09NUExFVEUgPSBTeW1ib2woJ3NjZW5lLmNvbXBsZXRlJyk7XG5cbiAgcHVibGljIGV2ZW50czogRXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwdWJsaWMgY29tcDogQ29tcG9zaXRvciA9IG5ldyBDb21wb3NpdG9yKCk7XG5cbiAgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCl7XG4gICAgdGhpcy5jb21wLmRyYXcoY3R4KTtcbiAgfVxuXG4gIHBhdXNlKCl7fVxuICBcbiAgdXBkYXRlKGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCl7fVxufSIsImltcG9ydCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4vTGV2ZWxcIjtcbmltcG9ydCBTY2VuZSBmcm9tIFwiLi9TY2VuZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2VuZVJ1bm5lciB7XG4gIHB1YmxpYyBzY2VuZUluZGV4OiBudW1iZXIgPSAtMTtcbiAgcHVibGljIHNjZW5lczogU2NlbmVbXSA9IFtdO1xuXG4gIGFkZFNjZW5lKHNjZW5lOiBTY2VuZSl7XG4gICAgc2NlbmUuZXZlbnRzLmxpc3RlbihTY2VuZS5DT01QTEVURSwgKCkgPT4gdGhpcy5ydW5OZXh0KCkpO1xuICAgIHRoaXMuc2NlbmVzLnB1c2goc2NlbmUpO1xuICB9XG5cbiAgcnVuTmV4dCgpe1xuICAgIGNvbnN0IGN1cnJlbnRTY2VuZSA9IHRoaXMuc2NlbmVzW3RoaXMuc2NlbmVJbmRleF07XG4gICAgaWYoY3VycmVudFNjZW5lKXtcbiAgICAgIGN1cnJlbnRTY2VuZS5wYXVzZSgpO1xuICAgIH1cbiAgICB0aGlzLnNjZW5lSW5kZXgrKztcbiAgfVxuXG4gIHVwZGF0ZShnYW1lQ29udGV4dDogR2FtZUNvbnRleHQpe1xuICAgIGNvbnN0IGN1cnJlbnRTY2VuZSA9IHRoaXMuc2NlbmVzW3RoaXMuc2NlbmVJbmRleF07XG4gICAgaWYoIWN1cnJlbnRTY2VuZSkgcmV0dXJuO1xuICAgIGN1cnJlbnRTY2VuZS51cGRhdGUoZ2FtZUNvbnRleHQpO1xuICAgIGN1cnJlbnRTY2VuZS5kcmF3KGdhbWVDb250ZXh0LnZpZGVvQ29udGV4dCk7XG4gIH1cbn0iLCJ0eXBlIEFuaW1hdGlvblJlbmRlcmVyID0gKGRpc3RhbmNlOiBudW1iZXIpID0+IHN0cmluZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3ByaXRlU2hlZXQge1xuICBwcml2YXRlIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xuICBwcml2YXRlIHdpZHRoOiBudW1iZXI7IFxuICBwcml2YXRlIGhlaWdodDogbnVtYmVyO1xuICBwcml2YXRlIGZyYW1lczogTWFwPHN0cmluZywgSFRNTENhbnZhc0VsZW1lbnRbXT47XG4gIHByaXZhdGUgYW5pbWF0aW9uczogTWFwPHN0cmluZywgQW5pbWF0aW9uUmVuZGVyZXI+O1xuICBjb25zdHJ1Y3RvcihpbWFnZTogSFRNTEltYWdlRWxlbWVudCwgd2lkdGg/OiBudW1iZXIsIGhlaWdodD86IG51bWJlcil7XG4gICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmZyYW1lcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmFuaW1hdGlvbnMgPSBuZXcgTWFwKCk7XG4gIH1cbiAgZ2V0QW5pbWF0aW9uKG5hbWU6IHN0cmluZyl7XG4gICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9ucy5nZXQobmFtZSk7XG4gIH1cbiAgZGVmaW5lQW5pbShuYW1lOiBzdHJpbmcsIGFuaW1hdGlvbjogQW5pbWF0aW9uUmVuZGVyZXIpe1xuICAgIHRoaXMuYW5pbWF0aW9ucy5zZXQobmFtZSwgYW5pbWF0aW9uKTtcbiAgfSAgXG4gIGRlZmluZShuYW1lOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcil7XG4gICAgY29uc3QgYnVmZmVycyA9IFtmYWxzZSwgdHJ1ZV0ubWFwKGZsaXAgPT4ge1xuICAgICAgY29uc3QgY3R4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5jYW52YXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGAke3RoaXMud2lkdGh9cHhgKTtcbiAgICAgIGN0eC5jYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBgJHt0aGlzLmhlaWdodH1weGApO1xuXG4gICAgICBpZihmbGlwKXtcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgtd2lkdGgsIDApO1xuICAgICAgfVxuXG4gICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICB0aGlzLmltYWdlLCBcbiAgICAgICAgeCwgeSwgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgMCwgMCwgd2lkdGgsIGhlaWdodFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGN0eC5jYW52YXM7XG4gICAgfSlcblxuICAgIHRoaXMuZnJhbWVzLnNldChuYW1lLCBidWZmZXJzKTtcbiAgfVxuICBkZWZpbmVUaWxlKG5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIpe1xuICAgIHRoaXMuZGVmaW5lKG5hbWUsIHgqdGhpcy53aWR0aCwgeSp0aGlzLmhlaWdodCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG4gIGRyYXcobmFtZTogc3RyaW5nLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGZsaXA6IGJvb2xlYW4gPSBmYWxzZSl7XG4gICAgY29uc3QgZnJhbWUgPSB0aGlzLmZyYW1lcy5nZXQobmFtZSk7XG4gICAgaWYoIWZyYW1lKXtcbiAgICAgIGNvbnNvbGUud2FybihgRnJhbWUgJHtuYW1lfSBpcyBub3QgZGVmaW5lZCFgKTtcbiAgICB9XG4gICAgY3R4LmRyYXdJbWFnZShmcmFtZVtmbGlwPzE6MF0sIHgsIHkpO1xuICB9XG4gIGRyYXdBbmltKG5hbWU6IHN0cmluZywgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkaXN0YW5jZTogbnVtYmVyKXtcbiAgICBjb25zdCBhbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbnMuZ2V0KG5hbWUpO1xuICAgIGlmKCFhbmltYXRpb24pIHJldHVybiB0aGlzLmRyYXdUaWxlKG5hbWUsIGN0eCwgeCwgeSk7XG4gICAgdGhpcy5kcmF3VGlsZShhbmltYXRpb24oZGlzdGFuY2UpLCBjdHgsIHgsIHkpO1xuICB9XG4gIGRyYXdUaWxlKG5hbWU6IHN0cmluZywgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBmbGlwOiBib29sZWFuID0gZmFsc2Upe1xuICAgIHRoaXMuZHJhdyhuYW1lLCBjdHgsIHgqdGhpcy53aWR0aCwgeSp0aGlzLmhlaWdodCwgZmxpcCk7XG4gIH1cbn0iLCJpbXBvcnQgRW50aXR5IGZyb20gXCIuL0VudGl0eVwiO1xuaW1wb3J0IExldmVsLCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4vTGV2ZWxcIjtcbmltcG9ydCB7IExldmVsVGlsZVNwZWMgfSBmcm9tIFwiLi9sb2FkZXJzL2xldmVsXCI7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgeyBicmljayB9IGZyb20gXCIuL3RpbGVzL2JyaWNrXCI7XG5pbXBvcnQgeyBncm91bmQgfSBmcm9tIFwiLi90aWxlcy9ncm91bmRcIjtcbmltcG9ydCB7IGNvaW4gfSBmcm9tIFwiLi90aWxlcy9jb2luXCI7XG5cbmV4cG9ydCB0eXBlIFJlc29sdmVkVGlsZSA9IHtcbiAgdGlsZTogTGV2ZWxUaWxlU3BlYyxcbiAgeDE6IG51bWJlciwgeDI6IG51bWJlcixcbiAgeTE6IG51bWJlciwgeTI6IG51bWJlcixcbiAgaW5kZXhYOiBudW1iZXIsIGluZGV4WTogbnVtYmVyLFxufVxuXG5leHBvcnQgdHlwZSBUaWxlQ29sbGlzaW9uQ29udGV4dCA9IHtcbiAgZW50aXR5OiBFbnRpdHksIFxuICBtYXRjaDogUmVzb2x2ZWRUaWxlLCBcbiAgcmVzb2x2ZXI6IFRpbGVSZXNvbHZlciwgXG4gIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dFxufVxuXG5leHBvcnQgdHlwZSBIYW5kbGVyQ2FsbGJhY2sgPSAodGlsZUNvbGxpc2lvbkNvbnRleHQ6IFRpbGVDb2xsaXNpb25Db250ZXh0LCBsZXZlbDogTGV2ZWwpID0+IHZvaWQ7XG5cbnR5cGUgSGFuZGxlcnMgPSB7XG4gIFtrZXk6IHN0cmluZ106IEhhbmRsZXJDYWxsYmFja1tdLFxufVxuXG5jb25zdCBoYW5kbGVyczogSGFuZGxlcnMgPSB7XG4gIGJyaWNrLFxuICBncm91bmQsXG4gIGNvaW4sXG59O1xuXG5leHBvcnQgY2xhc3MgVGlsZVJlc29sdmVyIHtcbiAgcHVibGljIG1hdHJpeDogTWF0cml4PExldmVsVGlsZVNwZWM+O1xuICBwdWJsaWMgdGlsZVNpemU6IG51bWJlcjtcbiAgY29uc3RydWN0b3IobWF0cml4OiBNYXRyaXg8TGV2ZWxUaWxlU3BlYz4sIHRpbGVTaXplOiBudW1iZXIgPSAxNil7XG4gICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgdGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplO1xuICB9XG4gIHRvSW5kZXgocG9zOiBudW1iZXIpIDogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihwb3MgLyB0aGlzLnRpbGVTaXplKTtcbiAgfVxuICB0b0luZGV4UmFuZ2UocG9zMTogbnVtYmVyLCBwb3MyOiBudW1iZXIpOiBudW1iZXJbXXtcbiAgICBjb25zdCBwTWF4ID0gTWF0aC5jZWlsKHBvczIgLyB0aGlzLnRpbGVTaXplKSAqIHRoaXMudGlsZVNpemU7XG4gICAgY29uc3QgcmFuZ2UgPSBbXTtcbiAgICBsZXQgcG9zID0gcG9zMTtcbiAgICBkbyB7XG4gICAgICByYW5nZS5wdXNoKHRoaXMudG9JbmRleChwb3MpKTtcbiAgICAgIHBvcyArPSB0aGlzLnRpbGVTaXplO1xuICAgIH13aGlsZShwb3MgPCBwTWF4KTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgZ2V0QnlJbmRleCh4OiBudW1iZXIsIHk6IG51bWJlcikgOiBSZXNvbHZlZFRpbGUge1xuICAgIGNvbnN0IHRpbGUgPSB0aGlzLm1hdHJpeC5nZXQoeCwgeSk7XG4gICAgaWYodGlsZSkgcmV0dXJuIHtcbiAgICAgIHRpbGUsXG4gICAgICB4MTogeCAqIHRoaXMudGlsZVNpemUsXG4gICAgICB4MjogKHgrMSkgKiB0aGlzLnRpbGVTaXplLFxuICAgICAgeTE6IHkgKiB0aGlzLnRpbGVTaXplLFxuICAgICAgeTI6ICh5KzEpICogdGhpcy50aWxlU2l6ZSxcbiAgICAgIGluZGV4WDogeCwgaW5kZXhZOiB5LFxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzZWFyY2hCeVBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKSA6IFJlc29sdmVkVGlsZSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QnlJbmRleCh0aGlzLnRvSW5kZXgoeCksIHRoaXMudG9JbmRleCh5KSk7XG4gIH1cbiAgc2VhcmNoQnlSYW5nZSh4MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MTogbnVtYmVyLCB5MjogbnVtYmVyKSA6IFJlc29sdmVkVGlsZVtdIHtcbiAgICBjb25zdCBtYXRjaGVzOiBSZXNvbHZlZFRpbGVbXSA9IFtdO1xuICAgIHRoaXMudG9JbmRleFJhbmdlKHgxLCB4MikuZm9yRWFjaCh4ID0+IHtcbiAgICAgIHRoaXMudG9JbmRleFJhbmdlKHkxLCB5MikuZm9yRWFjaCh5ID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLmdldEJ5SW5kZXgoeCwgeSk7XG4gICAgICAgIGlmKCFtYXRjaCkgcmV0dXJuO1xuICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hdGNoZXM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlsZUNvbGxpZGVyIHtcbiAgcHVibGljIHJlc29sdmVyczogVGlsZVJlc29sdmVyW10gPSBbXTtcblxuICBhZGRHcmlkKHRpbGVNYXRyaXg6IE1hdHJpeDxMZXZlbFRpbGVTcGVjPil7XG4gICAgdGhpcy5yZXNvbHZlcnMucHVzaChuZXcgVGlsZVJlc29sdmVyKHRpbGVNYXRyaXgpKTtcbiAgfVxuXG4gIGNoZWNrWChlbnRpdHk6IEVudGl0eSwgZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0LCBsZXZlbDogTGV2ZWwpe1xuICAgIGlmKGVudGl0eS52ZWwueCA9PT0gMCkgcmV0dXJuO1xuICAgIGxldCB4ID0gZW50aXR5LmJvdW5kcy5sZWZ0ICsgKGVudGl0eS52ZWwueCA+IDAgPyBlbnRpdHkuc2l6ZS54IDogMCk7XG5cbiAgICBmb3IoY29uc3QgcmVzb2x2ZXIgb2YgdGhpcy5yZXNvbHZlcnMpe1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHJlc29sdmVyLnNlYXJjaEJ5UmFuZ2UoXG4gICAgICAgIHgsIHgsXG4gICAgICAgIGVudGl0eS5ib3VuZHMudG9wLCBlbnRpdHkuYm91bmRzLmJvdHRvbVxuICAgICAgKTtcblxuICAgICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+e1xuICAgICAgICB0aGlzLmhhbmRsZSgwLCB7IGVudGl0eSwgbWF0Y2gsIHJlc29sdmVyLCBnYW1lQ29udGV4dCB9LCBsZXZlbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjaGVja1koZW50aXR5OiBFbnRpdHksIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCwgbGV2ZWw6IExldmVsKXtcbiAgICBpZihlbnRpdHkudmVsLnkgPT09IDApIHJldHVybjtcbiAgICBsZXQgeSA9IGVudGl0eS5ib3VuZHMudG9wICsgKGVudGl0eS52ZWwueSA+IDAgPyBlbnRpdHkuc2l6ZS55IDogMCk7XG4gIFxuICAgIGZvcihjb25zdCByZXNvbHZlciBvZiB0aGlzLnJlc29sdmVycyl7XG4gICAgICBjb25zdCBtYXRjaGVzID0gcmVzb2x2ZXIuc2VhcmNoQnlSYW5nZShcbiAgICAgICAgZW50aXR5LmJvdW5kcy5sZWZ0LCBlbnRpdHkuYm91bmRzLnJpZ2h0LCBcbiAgICAgICAgeSwgeVxuICAgICAgKTtcblxuICAgICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+e1xuICAgICAgICB0aGlzLmhhbmRsZSgxLCB7IGVudGl0eSwgbWF0Y2gsIHJlc29sdmVyLCBnYW1lQ29udGV4dCB9LCBsZXZlbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZShpbmRleDogbnVtYmVyLCB0aWxlQ29sbGlzaW9uQ29udGV4dDogVGlsZUNvbGxpc2lvbkNvbnRleHQsIGxldmVsOiBMZXZlbCl7XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3RpbGVDb2xsaXNpb25Db250ZXh0Lm1hdGNoLnRpbGUudHlwZV07XG4gICAgaWYoIWhhbmRsZXIgfHwgIWhhbmRsZXJbaW5kZXhdKSByZXR1cm47XG4gICAgaGFuZGxlcltpbmRleF0odGlsZUNvbGxpc2lvbkNvbnRleHQsIGxldmVsKTtcbiAgfVxufSIsImltcG9ydCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4vTGV2ZWxcIjtcbmltcG9ydCBTY2VuZSBmcm9tIFwiLi9TY2VuZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lZFNjZW5lIGV4dGVuZHMgU2NlbmUge1xuICBwdWJsaWMgY291bnRkb3duOiBudW1iZXIgPSAyO1xuXG4gIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpe1xuICAgIHRoaXMuY29tcC5kcmF3KGN0eCk7XG4gIH1cbiAgXG4gIHVwZGF0ZShnYW1lQ29udGV4dDogR2FtZUNvbnRleHQpe1xuICAgIHRoaXMuY291bnRkb3duIC09IGdhbWVDb250ZXh0LmR0O1xuICAgIGlmKHRoaXMuY291bnRkb3duIDw9IDApe1xuICAgICAgdGhpcy5ldmVudHMuZW1pdChTY2VuZS5DT01QTEVURSk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBwdWJsaWMgdXBkYXRlOiAoZHQ6IG51bWJlcikgPT4gdm9pZDtcbiAgcHJpdmF0ZSB1cGRhdGVQcm94eTogKGR0OiBudW1iZXIpID0+IHZvaWQ7XG4gIHByaXZhdGUgcnVubmluZzogYm9vbGVhbiA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihkZWx0YVRpbWU6IG51bWJlciA9IDEvNjApe1xuICAgIGxldCBhY2N1bXVsYXRlZFRpbWUgPSAwLCBsYXN0VGltZTogbnVtYmVyID0gbnVsbDtcblxuICAgIHRoaXMudXBkYXRlUHJveHkgPSAodGltZTogbnVtYmVyID0gMCkgPT4ge1xuICAgICAgaWYobGFzdFRpbWUpe1xuICAgICAgICBhY2N1bXVsYXRlZFRpbWUgKz0gKHRpbWUgLSBsYXN0VGltZSkgLyAxMDAwO1xuXG4gICAgICAgIGlmKGFjY3VtdWxhdGVkVGltZSA+IDEpIGFjY3VtdWxhdGVkVGltZSA9IDE7XG4gICAgXG4gICAgICAgIHdoaWxlKGFjY3VtdWxhdGVkVGltZSA+IGRlbHRhVGltZSl7XG4gICAgICAgICAgdGhpcy51cGRhdGUoZGVsdGFUaW1lKVxuICAgICAgICAgIGFjY3VtdWxhdGVkVGltZSAtPSBkZWx0YVRpbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGFzdFRpbWUgPSB0aW1lO1xuXG4gICAgICB0aGlzLmVucXVldWUoKTtcbiAgICB9XG4gIH1cbiAgZW5xdWV1ZSgpe1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZVByb3h5KTtcbiAgfVxuICBzdGFydCgpe1xuICAgIGlmKHRoaXMucnVubmluZykgcmV0dXJuO1xuICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgdGhpcy5lbnF1ZXVlKCk7XG4gIH1cbn0iLCJpbXBvcnQgRW50aXR5LCB7IExpc3RlbmVyLCBTaWRlcywgVGFzayB9IGZyb20gXCIuL0VudGl0eVwiO1xuaW1wb3J0IExldmVsLCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4vTGV2ZWxcIjtcbmltcG9ydCB7IFJlc29sdmVkVGlsZSB9IGZyb20gXCIuL1RpbGVDb2xsaWRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFpdCB7XG4gIHN0YXRpYyBUQVNLID0gU3ltYm9sKCd0YXNrJyk7XG4gIHB1YmxpYyBsaXN0ZW5lcnM6IExpc3RlbmVyW10gPSBbXTtcblxuICBjb2xsaWRlcyh1czogRW50aXR5LCB0aGVtOiBFbnRpdHkpe31cbiAgZmluYWxpemUoZW50aXR5OiBFbnRpdHkpe1xuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZmlsdGVyKGxpc3RlbmVyID0+IHtcbiAgICAgIGVudGl0eS5ldmVudHMucHJvY2VzcyhsaXN0ZW5lci5uYW1lLCBsaXN0ZW5lci5jYWxsYmFjayk7XG4gICAgICByZXR1cm4gLS1saXN0ZW5lci5jb3VudDtcbiAgICB9KTtcbiAgfVxuICBsaXN0ZW4obmFtZTogU3ltYm9sLCBjYWxsYmFjazogVGFzaywgY291bnQ6IG51bWJlciA9IEluZmluaXR5KXtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHsgbmFtZSwgY2FsbGJhY2ssIGNvdW50IH0pO1xuICB9XG4gIG9ic3RydWN0KGVudGl0eTogRW50aXR5LCBzaWRlOiBTaWRlcywgbWF0Y2g/OiBSZXNvbHZlZFRpbGUpe31cbiAgcXVldWUodGFzazogVGFzayl7XG4gICAgdGhpcy5saXN0ZW4oVHJhaXQuVEFTSywgdGFzaywgMSk7XG4gIH1cbiAgdXBkYXRlKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dD86IEdhbWVDb250ZXh0LCBsZXZlbD86IExldmVsKXt9XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFuaW0oZnJhbWVzOiBzdHJpbmdbXSwgZnJhbWVMZW46IG51bWJlcil7XG4gIHJldHVybiBmdW5jdGlvbiByZXNvbHZlRnJhbWUoZGlzdGFuY2U6IG51bWJlcil7XG4gICAgcmV0dXJuIGZyYW1lc1tNYXRoLmZsb29yKGRpc3RhbmNlIC8gZnJhbWVMZW4pICUgZnJhbWVzLmxlbmd0aF07XG4gIH1cbn0iLCJpbXBvcnQgTWFyaW8sIHsgbG9hZE1hcmlvIH0gZnJvbSAnLi9lbnRpdGllcy9NYXJpbyc7XG5pbXBvcnQgR29vbWJhLCB7IGxvYWRHb29tYmEgfSBmcm9tICcuL2VudGl0aWVzL0dvb21iYSc7XG5pbXBvcnQgS29vcGEsIHsgbG9hZEtvb3BhIH0gZnJvbSAnLi9lbnRpdGllcy9Lb29wYSc7XG5pbXBvcnQgRW50aXR5IGZyb20gJy4vRW50aXR5JztcbmltcG9ydCBCdWxsZXQsIHsgbG9hZEJ1bGxldCB9IGZyb20gJy4vZW50aXRpZXMvQnVsbGV0JztcbmltcG9ydCBDYW5ub24sIHsgbG9hZENhbm5vbiB9IGZyb20gJy4vZW50aXRpZXMvQ2Fubm9uJztcblxuZXhwb3J0IHR5cGUgRW50aXR5Q3JlYXRvcjxUIGV4dGVuZHMgRW50aXR5PiA9ICgpID0+IFQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5RmFjdG9yeSB7XG4gIFtrZXk6IHN0cmluZ106IEVudGl0eUNyZWF0b3I8RW50aXR5PjtcbiAgbWFyaW8/OiBFbnRpdHlDcmVhdG9yPE1hcmlvPixcbiAgZ29vbWJhPzogRW50aXR5Q3JlYXRvcjxHb29tYmE+LFxuICBrb29wYT86IEVudGl0eUNyZWF0b3I8S29vcGE+LFxuICBidWxsZXQ/OiBFbnRpdHlDcmVhdG9yPEJ1bGxldD4sXG4gIGNhbm5vbj86IEVudGl0eUNyZWF0b3I8Q2Fubm9uPixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFbnRpdGllcyhhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCkgOiBQcm9taXNlPEVudGl0eUZhY3Rvcnk+IHtcbiAgY29uc3QgZW50aXR5RmFjdG9yeTogRW50aXR5RmFjdG9yeSA9IHt9O1xuXG4gIGZ1bmN0aW9uIGFkZEFzKG5hbWU6IHN0cmluZyl7XG4gICAgcmV0dXJuIChmYWN0b3J5OiBFbnRpdHlDcmVhdG9yPEVudGl0eT4pID0+IGVudGl0eUZhY3RvcnlbbmFtZV0gPSBmYWN0b3J5O1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICBsb2FkTWFyaW8oYXVkaW9Db250ZXh0KS50aGVuKGFkZEFzKCdtYXJpbycpKSxcbiAgICBsb2FkR29vbWJhKGF1ZGlvQ29udGV4dCkudGhlbihhZGRBcygnZ29vbWJhJykpLFxuICAgIGxvYWRLb29wYShhdWRpb0NvbnRleHQpLnRoZW4oYWRkQXMoJ2tvb3BhJykpLFxuICAgIGxvYWRCdWxsZXQoYXVkaW9Db250ZXh0KS50aGVuKGFkZEFzKCdidWxsZXQnKSksXG4gICAgbG9hZENhbm5vbihhdWRpb0NvbnRleHQpLnRoZW4oYWRkQXMoJ2Nhbm5vbicpKSxcbiAgXSlcbiAgLnRoZW4oKCkgPT4gZW50aXR5RmFjdG9yeSk7XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBHYW1lQ29udGV4dCB9IGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IHsgbG9hZFNwcml0ZVNoZWV0IH0gZnJvbSBcIi4uL2xvYWRlcnMvc3ByaXRlXCI7XG5pbXBvcnQgU3ByaXRlU2hlZXQgZnJvbSBcIi4uL1Nwcml0ZVNoZWV0XCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5pbXBvcnQgR3Jhdml0eSBmcm9tIFwiLi4vdHJhaXRzL0dyYXZpdHlcIjtcbmltcG9ydCBLaWxsYWJsZSBmcm9tIFwiLi4vdHJhaXRzL0tpbGxhYmxlXCI7XG5pbXBvcnQgU3RvbXBlciBmcm9tIFwiLi4vdHJhaXRzL1N0b21wZXJcIjtcbmltcG9ydCBWZWxvY2l0eSBmcm9tIFwiLi4vdHJhaXRzL1ZlbG9jaXR5XCI7XG5pbXBvcnQgTWFyaW8gZnJvbSBcIi4vTWFyaW9cIjtcblxuY2xhc3MgQmVoYXZpb3IgZXh0ZW5kcyBUcmFpdCB7XG4gIHByaXZhdGUgZ3Jhdml0eTogR3Jhdml0eSA9IG5ldyBHcmF2aXR5KCk7XG5cbiAgY29sbGlkZXModXM6IEVudGl0eSwgdGhlbTogRW50aXR5KTogdm9pZCB7XG4gICAgaWYoISh1cyBpbnN0YW5jZW9mIEJ1bGxldCAmJiB0aGVtLmhhc1RyYWl0KFN0b21wZXIpKSkgcmV0dXJuO1xuICAgIGlmKCF1cy5raWxsYWJsZS5kZWFkKXtcbiAgICAgIGlmKHRoZW0udmVsLnkgPiB1cy52ZWwueSl7XG4gICAgICAgIHVzLmtpbGxhYmxlLmtpbGwoKTtcbiAgICAgICAgdXMudmVsLnNldCgxMDAsIC0yMDApO1xuICAgICAgfWVsc2UgaWYodGhlbSBpbnN0YW5jZW9mIE1hcmlvKXtcbiAgICAgICAgdGhlbS5raWxsYWJsZS5raWxsKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQpOiB2b2lkIHtcbiAgICBpZighKGVudGl0eSBpbnN0YW5jZW9mIEJ1bGxldCkpIHJldHVybjtcbiAgICBpZihlbnRpdHkua2lsbGFibGUuZGVhZCl7XG4gICAgICB0aGlzLmdyYXZpdHkudXBkYXRlKGVudGl0eSwgZ2FtZUNvbnRleHQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWxsZXQgZXh0ZW5kcyBFbnRpdHkge1xuICBwdWJsaWMgdmVsb2NpdHk6IFZlbG9jaXR5O1xuICBwdWJsaWMgYmVoYXZpb3I6IEJlaGF2aW9yO1xuICBwdWJsaWMga2lsbGFibGU6IEtpbGxhYmxlO1xuXG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMudmVsb2NpdHkgPSBuZXcgVmVsb2NpdHkoKSk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLmJlaGF2aW9yID0gbmV3IEJlaGF2aW9yKCkpO1xuICAgIHRoaXMuYWRkVHJhaXQodGhpcy5raWxsYWJsZSA9IG5ldyBLaWxsYWJsZSgpKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBCdWxsZXRGYWN0b3J5ID0gKCkgPT4gQnVsbGV0O1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEJ1bGxldChhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCkgOiBQcm9taXNlPEJ1bGxldEZhY3Rvcnk+IHtcbiAgcmV0dXJuIGxvYWRTcHJpdGVTaGVldCgnYnVsbGV0JylcbiAgLnRoZW4oY3JlYXRlQnVsbGV0RmFjdG9yeSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1bGxldEZhY3Rvcnkoc3ByaXRlczogU3ByaXRlU2hlZXQpIDogQnVsbGV0RmFjdG9yeSB7XG4gIGZ1bmN0aW9uIGRyYXdCdWxsZXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpe1xuICAgIHNwcml0ZXMuZHJhdygnYnVsbGV0JywgY3R4LCAwLCAwLCB0aGlzLnZlbC54IDwgMCk7XG4gIH1cbiAgXG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVCdWxsZXQoKXtcbiAgICBjb25zdCBidWxsZXQgPSBuZXcgQnVsbGV0KCk7XG4gICAgYnVsbGV0LnNpemUuc2V0KDE2LCAxNik7XG5cbiAgICBidWxsZXQuZHJhdyA9IGRyYXdCdWxsZXQ7XG5cbiAgICByZXR1cm4gYnVsbGV0O1xuICB9XG59IiwiaW1wb3J0IEF1ZGlvQm9hcmQgZnJvbSBcIi4uL0F1ZGlvQm9hcmRcIjtcbmltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IExldmVsLCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgeyBsb2FkQXVkaW9Cb2FyZCB9IGZyb20gXCIuLi9sb2FkZXJzL2F1ZGlvXCI7XG5pbXBvcnQgeyBmaW5kUGxheWVycyB9IGZyb20gXCIuLi9wbGF5ZXJcIjtcbmltcG9ydCBFbWl0dGVyIGZyb20gXCIuLi90cmFpdHMvRW1pdHRlclwiO1xuXG5jb25zdCBIT0xEX0ZJUkVfVEhSRVNIT0xEID0gMzA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbm5vbiBleHRlbmRzIEVudGl0eSB7XG4gIHB1YmxpYyBlbWl0dGVyOiBFbWl0dGVyO1xuXG4gIGNvbnN0cnVjdG9yKGF1ZGlvQm9hcmQ6IEF1ZGlvQm9hcmQpe1xuICAgIHN1cGVyKGF1ZGlvQm9hcmQpO1xuICAgIHRoaXMuYWRkVHJhaXQodGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKSk7XG4gICAgdGhpcy5zaXplLnNldCgxNiwgMTQpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIENhbm5vbkZhY3RvcnkgPSAoKSA9PiBDYW5ub247XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQ2Fubm9uKGF1ZGlvQ29udGV4dDogQXVkaW9Db250ZXh0KSA6IFByb21pc2U8Q2Fubm9uRmFjdG9yeT4ge1xuICByZXR1cm4gbG9hZEF1ZGlvQm9hcmQoJ2Nhbm5vbicsIGF1ZGlvQ29udGV4dClcbiAgLnRoZW4oYXVkaW8gPT4ge1xuICAgIHJldHVybiBjcmVhdGVDYW5ub25GYWN0b3J5KGF1ZGlvKTtcbiAgfSk7XG59XG5cblxuZnVuY3Rpb24gY3JlYXRlQ2Fubm9uRmFjdG9yeShhdWRpb0JvYXJkOiBBdWRpb0JvYXJkKSA6IENhbm5vbkZhY3Rvcnkge1xuICBmdW5jdGlvbiBlbWl0QnVsbGV0KGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQsIGxldmVsOiBMZXZlbCl7XG4gICAgaWYoIShlbnRpdHkgaW5zdGFuY2VvZiBDYW5ub24pKSByZXR1cm47XG5cbiAgICBsZXQgZGlyO1xuICAgIGZvcihjb25zdCBwbGF5ZXIgb2YgZmluZFBsYXllcnMobGV2ZWwpKXtcbiAgICAgIGRpciA9IHBsYXllci5wb3MueCAtIGVudGl0eS5wb3MueDtcbiAgICAgIGlmKE1hdGguYWJzKHBsYXllci5wb3MueCAtIGVudGl0eS5wb3MueCkgPD0gSE9MRF9GSVJFX1RIUkVTSE9MRCl7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBidWxsZXQgPSBnYW1lQ29udGV4dC5lbnRpdHlGYWN0b3J5LmJ1bGxldCgpO1xuICAgIGJ1bGxldC5wb3MuY29weShlbnRpdHkucG9zKTtcbiAgICBidWxsZXQudmVsLnggPSA4MCAqIE1hdGguc2lnbihkaXIpO1xuXG4gICAgZW50aXR5LnNvdW5kcy5hZGQoJ3Nob290Jyk7XG4gICAgbGV2ZWwuZW50aXRpZXMuYWRkKGJ1bGxldCk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQ2Fubm9uKCl7XG4gICAgY29uc3QgY2Fubm9uID0gbmV3IENhbm5vbihhdWRpb0JvYXJkKTtcblxuICAgIGNhbm5vbi5lbWl0dGVyLmludGVydmFsID0gNDtcbiAgICBjYW5ub24uZW1pdHRlci5lbWl0dGVycy5wdXNoKGVtaXRCdWxsZXQpO1xuXG4gICAgcmV0dXJuIGNhbm5vbjtcbiAgfVxufSIsImltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IHsgbG9hZFNwcml0ZVNoZWV0IH0gZnJvbSBcIi4uL2xvYWRlcnMvc3ByaXRlXCI7XG5pbXBvcnQgU3ByaXRlU2hlZXQgZnJvbSBcIi4uL1Nwcml0ZVNoZWV0XCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5pbXBvcnQgS2lsbGFibGUgZnJvbSBcIi4uL3RyYWl0cy9LaWxsYWJsZVwiO1xuaW1wb3J0IFBlbmR1bHVtTW92ZSBmcm9tIFwiLi4vdHJhaXRzL1BlbmR1bHVtTW92ZVwiO1xuaW1wb3J0IFBoeXNpY3MgZnJvbSBcIi4uL3RyYWl0cy9QaHlzaWNzXCI7XG5pbXBvcnQgU29saWQgZnJvbSBcIi4uL3RyYWl0cy9Tb2xpZFwiO1xuaW1wb3J0IFN0b21wZXIgZnJvbSBcIi4uL3RyYWl0cy9TdG9tcGVyXCI7XG5pbXBvcnQgTWFyaW8gZnJvbSBcIi4vTWFyaW9cIjtcblxuY2xhc3MgQmVoYXZpb3IgZXh0ZW5kcyBUcmFpdCB7XG4gIGNvbGxpZGVzKHVzOiBFbnRpdHksIHRoZW06IEVudGl0eSk6IHZvaWQge1xuICAgIGlmKCEodXMgaW5zdGFuY2VvZiBHb29tYmEgJiYgdGhlbS5oYXNUcmFpdChTdG9tcGVyKSkpIHJldHVybjtcbiAgICBpZighdXMua2lsbGFibGUuZGVhZCl7XG4gICAgICBpZih0aGVtLnZlbC55ID4gdXMudmVsLnkpe1xuICAgICAgICB1cy5raWxsYWJsZS5raWxsKCk7XG4gICAgICAgIHVzLnBlbmR1bHVtTW92ZS5zcGVlZCA9IDA7XG4gICAgICB9ZWxzZSBpZih0aGVtIGluc3RhbmNlb2YgTWFyaW8pe1xuICAgICAgICB0aGVtLmtpbGxhYmxlLmtpbGwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29vbWJhIGV4dGVuZHMgRW50aXR5IHtcbiAgcHVibGljIHBoeXNpY3M6IFBoeXNpY3M7XG4gIHB1YmxpYyBzb2xpZDogU29saWQ7XG4gIHB1YmxpYyBwZW5kdWx1bU1vdmU6IFBlbmR1bHVtTW92ZTtcbiAgcHVibGljIGJlaGF2aW9yOiBCZWhhdmlvcjtcbiAgcHVibGljIGtpbGxhYmxlOiBLaWxsYWJsZTtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLnBoeXNpY3MgPSBuZXcgUGh5c2ljcygpKTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMuc29saWQgPSBuZXcgU29saWQoKSk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLnBlbmR1bHVtTW92ZSA9IG5ldyBQZW5kdWx1bU1vdmUoKSk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLmJlaGF2aW9yID0gbmV3IEJlaGF2aW9yKCkpO1xuICAgIHRoaXMuYWRkVHJhaXQodGhpcy5raWxsYWJsZSA9IG5ldyBLaWxsYWJsZSgpKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBHb29tYmFGYWN0b3J5ID0gKCkgPT4gR29vbWJhO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEdvb21iYShhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCkgOiBQcm9taXNlPEdvb21iYUZhY3Rvcnk+IHtcbiAgcmV0dXJuIGxvYWRTcHJpdGVTaGVldCgnZ29vbWJhJylcbiAgLnRoZW4oY3JlYXRlR29vbWJhRmFjdG9yeSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdvb21iYUZhY3Rvcnkoc3ByaXRlczogU3ByaXRlU2hlZXQpIDogR29vbWJhRmFjdG9yeSB7XG4gIGNvbnN0IHdhbGtBbmltID0gc3ByaXRlcy5nZXRBbmltYXRpb24oJ3dhbGsnKTtcblxuICBmdW5jdGlvbiByb3V0ZUFuaW0oZ29vbWJhOiBHb29tYmEpIDogc3RyaW5nIHtcbiAgICBpZihnb29tYmEua2lsbGFibGUuZGVhZCl7XG4gICAgICByZXR1cm4gJ2ZsYXQnO1xuICAgIH1cbiAgICByZXR1cm4gd2Fsa0FuaW0oZ29vbWJhLmxpZmV0aW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdHb29tYmEoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpe1xuICAgIHNwcml0ZXMuZHJhdyhyb3V0ZUFuaW0odGhpcyksIGN0eCwgMCwgMCk7XG4gIH1cbiAgXG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVHb29tYmEoKXtcbiAgICBjb25zdCBnb29tYmEgPSBuZXcgR29vbWJhKCk7XG4gICAgZ29vbWJhLnNpemUuc2V0KDE2LCAxNik7XG5cbiAgICBnb29tYmEuZHJhdyA9IGRyYXdHb29tYmE7XG5cbiAgICByZXR1cm4gZ29vbWJhO1xuICB9XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBHYW1lQ29udGV4dCB9IGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IHsgbG9hZFNwcml0ZVNoZWV0IH0gZnJvbSBcIi4uL2xvYWRlcnMvc3ByaXRlXCI7XG5pbXBvcnQgU3ByaXRlU2hlZXQgZnJvbSBcIi4uL1Nwcml0ZVNoZWV0XCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5pbXBvcnQgS2lsbGFibGUgZnJvbSBcIi4uL3RyYWl0cy9LaWxsYWJsZVwiO1xuaW1wb3J0IFBlbmR1bHVtTW92ZSBmcm9tIFwiLi4vdHJhaXRzL1BlbmR1bHVtTW92ZVwiO1xuaW1wb3J0IFBoeXNpY3MgZnJvbSBcIi4uL3RyYWl0cy9QaHlzaWNzXCI7XG5pbXBvcnQgU29saWQgZnJvbSBcIi4uL3RyYWl0cy9Tb2xpZFwiO1xuaW1wb3J0IFN0b21wZXIgZnJvbSBcIi4uL3RyYWl0cy9TdG9tcGVyXCI7XG5pbXBvcnQgTWFyaW8gZnJvbSBcIi4vTWFyaW9cIjtcblxuZW51bSBLb29wYVN0YXRlIHtcbiAgV0FMS0lORywgSElESU5HLCBQQU5JQyxcbn1cblxuY2xhc3MgQmVoYXZpb3IgZXh0ZW5kcyBUcmFpdCB7XG4gIHB1YmxpYyBzdGF0ZTogS29vcGFTdGF0ZSA9IEtvb3BhU3RhdGUuV0FMS0lORztcbiAgcHVibGljIGhpZGVUaW1lOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGhpZGVEdXJhdGlvbjogbnVtYmVyID0gNTtcbiAgcHJpdmF0ZSBwYW5pY1NwZWVkOiBudW1iZXIgPSAzMDA7XG4gIHByaXZhdGUgd2Fsa1NwZWVkOiBudW1iZXIgPSBudWxsO1xuXG4gIGNvbGxpZGVzKHVzOiBFbnRpdHksIHRoZW06IEVudGl0eSk6IHZvaWQge1xuICAgIGlmKCEodXMgaW5zdGFuY2VvZiBLb29wYSAmJiB0aGVtLmhhc1RyYWl0KFN0b21wZXIpKSkgcmV0dXJuO1xuICAgIGlmKCF1cy5raWxsYWJsZS5kZWFkKXtcbiAgICAgIGlmKHRoZW0udmVsLnkgPiB1cy52ZWwueSl7XG4gICAgICAgIHRoaXMuaGFuZGxlU3RvbXAodXMsIHRoZW0pO1xuICAgICAgfWVsc2UgaWYodGhlbSBpbnN0YW5jZW9mIE1hcmlvKXtcbiAgICAgICAgdGhpcy5oYW5kbGVOdWRnZSh1cywgdGhlbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlTnVkZ2UodXM6IEtvb3BhLCB0aGVtOiBNYXJpbyl7XG4gICAgc3dpdGNoKHRoaXMuc3RhdGUpe1xuICAgICAgY2FzZSBLb29wYVN0YXRlLldBTEtJTkc6IHRoZW0ua2lsbGFibGUua2lsbCgpOyBicmVhaztcbiAgICAgIGNhc2UgS29vcGFTdGF0ZS5ISURJTkc6IHRoaXMucGFuaWModXMsIHRoZW0pOyBicmVhaztcbiAgICAgIGNhc2UgS29vcGFTdGF0ZS5QQU5JQzoge1xuICAgICAgICBjb25zdCB0cmF2ZWxEaXIgPSBNYXRoLnNpZ24odXMudmVsLngpO1xuICAgICAgICBjb25zdCBpbXBhY3REaXIgPSBNYXRoLnNpZ24odXMucG9zLnggLSB0aGVtLnBvcy54KTtcbiAgICAgICAgaWYodHJhdmVsRGlyICE9PSAwICYmIHRyYXZlbERpciAhPT0gaW1wYWN0RGlyKXtcbiAgICAgICAgICB0aGVtLmtpbGxhYmxlLmtpbGwoKTtcbiAgICAgICAgfVxuICAgICAgfSBicmVhaztcbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdG9tcCh1czogS29vcGEsIHRoZW06IEVudGl0eSl7XG4gICAgc3dpdGNoKHRoaXMuc3RhdGUpe1xuICAgICAgY2FzZSBLb29wYVN0YXRlLldBTEtJTkc6IHRoaXMuaGlkZSh1cyk7IGJyZWFrO1xuICAgICAgY2FzZSBLb29wYVN0YXRlLkhJRElORzoge1xuICAgICAgICB1cy5raWxsYWJsZS5raWxsKCk7XG4gICAgICAgIHVzLnZlbC5zZXQoMTAwLCAtMjAwKTtcbiAgICAgICAgdXMuc29saWQub2JzdHJ1Y3RzID0gZmFsc2U7XG4gICAgICB9IGJyZWFrO1xuICAgICAgY2FzZSBLb29wYVN0YXRlLlBBTklDOiB0aGlzLmhpZGUodXMpOyBicmVhaztcbiAgICB9XG4gIH1cblxuICBoaWRlKHVzOiBLb29wYSl7XG4gICAgdXMudmVsLnggPSAwO1xuICAgIHVzLnBlbmR1bHVtTW92ZS5lbmFibGVkID0gZmFsc2U7XG4gICAgaWYoIXRoaXMud2Fsa1NwZWVkKSB0aGlzLndhbGtTcGVlZCA9IHVzLnBlbmR1bHVtTW92ZS5zcGVlZDtcbiAgICB0aGlzLnN0YXRlID0gS29vcGFTdGF0ZS5ISURJTkc7XG4gICAgdGhpcy5oaWRlVGltZSA9IDA7XG4gIH1cblxuICBwYW5pYyh1czogS29vcGEsIHRoZW06IEVudGl0eSl7XG4gICAgdXMucGVuZHVsdW1Nb3ZlLmVuYWJsZWQgPSB0cnVlO1xuICAgIHVzLnBlbmR1bHVtTW92ZS5zcGVlZCA9IHRoaXMucGFuaWNTcGVlZCAqIE1hdGguc2lnbih0aGVtLnZlbC54KTtcbiAgICB0aGlzLnN0YXRlID0gS29vcGFTdGF0ZS5QQU5JQztcbiAgfVxuXG4gIHVuaGlkZSh1czogS29vcGEpe1xuICAgIHVzLnBlbmR1bHVtTW92ZS5lbmFibGVkID0gdHJ1ZTtcbiAgICB1cy5wZW5kdWx1bU1vdmUuc3BlZWQgPSB0aGlzLndhbGtTcGVlZDtcbiAgICB0aGlzLnN0YXRlID0gS29vcGFTdGF0ZS5XQUxLSU5HO1xuICB9XG5cbiAgdXBkYXRlKHVzOiBFbnRpdHksIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCk6IHZvaWQge1xuICAgIGNvbnN0IHsgZHQgfSA9IGdhbWVDb250ZXh0O1xuXG4gICAgaWYoISh1cyBpbnN0YW5jZW9mIEtvb3BhKSkgcmV0dXJuO1xuICAgIGlmKHRoaXMuc3RhdGUgPT09IEtvb3BhU3RhdGUuSElESU5HKXtcbiAgICAgIHRoaXMuaGlkZVRpbWUgKz0gZHQ7XG4gICAgICBpZih0aGlzLmhpZGVUaW1lID4gdGhpcy5oaWRlRHVyYXRpb24pe1xuICAgICAgICB0aGlzLnVuaGlkZSh1cyBhcyBLb29wYSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtvb3BhIGV4dGVuZHMgRW50aXR5IHtcbiAgcHVibGljIHBoeXNpY3M6IFBoeXNpY3M7XG4gIHB1YmxpYyBzb2xpZDogU29saWQ7XG4gIHB1YmxpYyBwZW5kdWx1bU1vdmU6IFBlbmR1bHVtTW92ZTtcbiAgcHVibGljIGJlaGF2aW9yOiBCZWhhdmlvcjtcbiAgcHVibGljIGtpbGxhYmxlOiBLaWxsYWJsZTtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLnBoeXNpY3MgPSBuZXcgUGh5c2ljcygpKTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMuc29saWQgPSBuZXcgU29saWQoKSk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLnBlbmR1bHVtTW92ZSA9IG5ldyBQZW5kdWx1bU1vdmUoKSk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLmJlaGF2aW9yID0gbmV3IEJlaGF2aW9yKCkpO1xuICAgIHRoaXMuYWRkVHJhaXQodGhpcy5raWxsYWJsZSA9IG5ldyBLaWxsYWJsZSgpKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBLb29wYUZhY3RvcnkgPSAoKSA9PiBLb29wYTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRLb29wYShhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCkgOiBQcm9taXNlPEtvb3BhRmFjdG9yeT4ge1xuICByZXR1cm4gbG9hZFNwcml0ZVNoZWV0KCdrb29wYScpXG4gIC50aGVuKGNyZWF0ZUtvb3BhRmFjdG9yeSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtvb3BhRmFjdG9yeShzcHJpdGVzOiBTcHJpdGVTaGVldCkgOiBLb29wYUZhY3Rvcnkge1xuICBjb25zdCB3YWxrQW5pbSA9IHNwcml0ZXMuZ2V0QW5pbWF0aW9uKCd3YWxrJyk7XG4gIGNvbnN0IHdha2VBbmltID0gc3ByaXRlcy5nZXRBbmltYXRpb24oJ3dha2UnKTtcblxuICBmdW5jdGlvbiByb3V0ZUFuaW0oa29vcGE6IEtvb3BhKXtcbiAgICBzd2l0Y2goa29vcGEuYmVoYXZpb3Iuc3RhdGUpe1xuICAgICAgY2FzZSBLb29wYVN0YXRlLkhJRElORzoge1xuICAgICAgICBpZihrb29wYS5iZWhhdmlvci5oaWRlVGltZSA+IDMpIHJldHVybiB3YWtlQW5pbShrb29wYS5saWZldGltZSk7XG4gICAgICB9XG4gICAgICBjYXNlIEtvb3BhU3RhdGUuUEFOSUM6IHJldHVybiAnaGlkaW5nJztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiB3YWxrQW5pbShrb29wYS5saWZldGltZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhd0tvb3BhKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKXtcbiAgICBzcHJpdGVzLmRyYXcocm91dGVBbmltKHRoaXMpLCBjdHgsIDAsIDAsIHRoaXMudmVsLnggPCAwKTtcbiAgfVxuICBcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUtvb3BhKCl7XG4gICAgY29uc3Qga29vcGEgPSBuZXcgS29vcGEoKTtcbiAgICBrb29wYS5zaXplLnNldCgxNiwgMTYpO1xuICAgIGtvb3BhLm9mZnNldC55ID0gODtcblxuICAgIGtvb3BhLmRyYXcgPSBkcmF3S29vcGE7XG5cbiAgICByZXR1cm4ga29vcGE7XG4gIH1cbn0iLCJpbXBvcnQgQXVkaW9Cb2FyZCBmcm9tIFwiLi4vQXVkaW9Cb2FyZFwiO1xuaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBsb2FkQXVkaW9Cb2FyZCB9IGZyb20gXCIuLi9sb2FkZXJzL2F1ZGlvXCI7XG5pbXBvcnQgeyBsb2FkU3ByaXRlU2hlZXQgfSBmcm9tIFwiLi4vbG9hZGVycy9zcHJpdGVcIjtcbmltcG9ydCBTcHJpdGVTaGVldCBmcm9tIFwiLi4vU3ByaXRlU2hlZXRcIjtcbmltcG9ydCBHbyBmcm9tIFwiLi4vdHJhaXRzL0dvXCI7XG5pbXBvcnQgSnVtcCBmcm9tIFwiLi4vdHJhaXRzL0p1bXBcIjtcbmltcG9ydCBLaWxsYWJsZSBmcm9tIFwiLi4vdHJhaXRzL0tpbGxhYmxlXCI7XG5pbXBvcnQgUGh5c2ljcyBmcm9tIFwiLi4vdHJhaXRzL1BoeXNpY3NcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4uL3RyYWl0cy9QbGF5ZXJcIjtcbmltcG9ydCBTb2xpZCBmcm9tIFwiLi4vdHJhaXRzL1NvbGlkXCI7XG5pbXBvcnQgU3RvbXBlciBmcm9tIFwiLi4vdHJhaXRzL1N0b21wZXJcIjtcblxuY29uc3QgZW51bSBEcmFnIHtcbiAgU0xPVyA9IDEvMTAwMCxcbiAgRkFTVCA9IDEvNTAwMCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmlvIGV4dGVuZHMgRW50aXR5IHtcbiAgcHVibGljIHBsYXllcjogUGxheWVyO1xuICBwdWJsaWMgcGh5c2ljczogUGh5c2ljcztcbiAgcHVibGljIHNvbGlkOiBTb2xpZDtcbiAgcHVibGljIGdvOiBHbztcbiAgcHVibGljIGp1bXA6IEp1bXA7XG4gIHB1YmxpYyBzdG9tcGVyOiBTdG9tcGVyO1xuICBwdWJsaWMga2lsbGFibGU6IEtpbGxhYmxlO1xuXG4gIGNvbnN0cnVjdG9yKGF1ZGlvQm9hcmQ6IEF1ZGlvQm9hcmQpe1xuICAgIHN1cGVyKGF1ZGlvQm9hcmQpO1xuICAgIHRoaXMuc2l6ZS5zZXQoMTQsIDE2KTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMucGxheWVyID0gbmV3IFBsYXllcigpKTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMucGh5c2ljcyA9IG5ldyBQaHlzaWNzKCkpO1xuICAgIHRoaXMuYWRkVHJhaXQodGhpcy5zb2xpZCA9IG5ldyBTb2xpZCgpKTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMuZ28gPSBuZXcgR28oKSk7XG4gICAgdGhpcy5hZGRUcmFpdCh0aGlzLmp1bXAgPSBuZXcgSnVtcCgpKTtcbiAgICB0aGlzLmFkZFRyYWl0KHRoaXMuc3RvbXBlciA9IG5ldyBTdG9tcGVyKCkpO1xuICAgIHRoaXMuYWRkVHJhaXQodGhpcy5raWxsYWJsZSA9IG5ldyBLaWxsYWJsZSgpKTtcbiAgICB0aGlzLmdvLmRyYWcgPSBEcmFnLlNMT1c7XG4gIH1cblxuICB0dXJibyhlbmFibGVkOiBib29sZWFuKXtcbiAgICB0aGlzLmdvLmRyYWcgPSBlbmFibGVkID8gRHJhZy5GQVNUIDogRHJhZy5TTE9XO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE1hcmlvRmFjdG9yeSA9ICgpID0+IE1hcmlvO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZE1hcmlvKGF1ZGlvQ29udGV4dDogQXVkaW9Db250ZXh0KSA6IFByb21pc2U8TWFyaW9GYWN0b3J5PiB7XG4gIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgbG9hZFNwcml0ZVNoZWV0KCdtYXJpbycpLFxuICAgIGxvYWRBdWRpb0JvYXJkKCdtYXJpbycsIGF1ZGlvQ29udGV4dCksXG4gIF0pXG4gIC50aGVuKChbc3ByaXRlcywgYXVkaW9dKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZU1hcmlvRmFjdG9yeShzcHJpdGVzLCBhdWRpbyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXJpb0ZhY3Rvcnkoc3ByaXRlczogU3ByaXRlU2hlZXQsIGF1ZGlvQm9hcmQ6IEF1ZGlvQm9hcmQpIDogTWFyaW9GYWN0b3J5IHtcbiAgY29uc3QgcnVuQW5pbSA9IHNwcml0ZXMuZ2V0QW5pbWF0aW9uKCdydW4nKTtcblxuICBmdW5jdGlvbiByb3V0ZUZyYW1lKG1hcmlvOiBNYXJpbyl7XG4gICAgaWYobWFyaW8uanVtcC5mYWxsaW5nKXtcbiAgICAgIHJldHVybiAnanVtcCc7XG4gICAgfVxuICAgIGlmKG1hcmlvLmdvLmRpc3RhbmNlID4gMCl7XG4gICAgICBpZigobWFyaW8udmVsLnggPiAwICYmIG1hcmlvLmdvLmRpciA8IDApIHx8IChtYXJpby52ZWwueCA8IDAgJiYgbWFyaW8uZ28uZGlyID4gMCkpXG4gICAgICAgIHJldHVybiAnYnJlYWsnO1xuICBcbiAgICAgIHJldHVybiBydW5BbmltKG1hcmlvLmdvLmRpc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuICdpZGxlJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdNYXJpbyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCl7XG4gICAgc3ByaXRlcy5kcmF3KHJvdXRlRnJhbWUodGhpcyksIGN0eCwgMCwgMCwgdGhpcy5nby5kaXIgPCAwKTtcbiAgfVxuICBcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU1hcmlvKCl7XG4gICAgY29uc3QgbWFyaW8gPSBuZXcgTWFyaW8oYXVkaW9Cb2FyZCk7XG5cbiAgICBtYXJpby5kcmF3ID0gZHJhd01hcmlvO1xuICAgIG1hcmlvLmtpbGxhYmxlLnJlbW92ZUFmdGVyID0gMDtcblxuICAgIHJldHVybiBtYXJpbztcbiAgfVxufSIsImltcG9ydCBNYXJpbyBmcm9tICcuL2VudGl0aWVzL01hcmlvJztcbmltcG9ydCBJbnB1dFJvdXRlciBmcm9tICcuL0lucHV0Um91dGVyJztcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL0tleWJvYXJkU3RhdGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBLZXlib2FyZCh3aW5kb3c6IFdpbmRvdykgOiBJbnB1dFJvdXRlciB7XG4gIGNvbnN0IGlucHV0ID0gbmV3IEtleWJvYXJkKCk7XG4gIGNvbnN0IHJvdXRlciA9IG5ldyBJbnB1dFJvdXRlcigpO1xuXG4gIGlucHV0Lmxpc3RlblRvKHdpbmRvdyk7XG4gIFxuICBpbnB1dC5hZGRNYXBwaW5nKCdLZXlQJywga2V5U3RhdGUgPT4ge1xuICAgIGlmKGtleVN0YXRlKXtcbiAgICAgIHJvdXRlci5yb3V0ZSgoZW50aXR5OiBNYXJpbykgPT4gZW50aXR5Lmp1bXAuc3RhcnQoKSk7XG4gICAgfWVsc2V7XG4gICAgICByb3V0ZXIucm91dGUoKGVudGl0eTogTWFyaW8pID0+IGVudGl0eS5qdW1wLmNhbmNlbCgpKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgaW5wdXQuYWRkTWFwcGluZygnS2V5TycsIGtleVN0YXRlID0+IHtcbiAgICByb3V0ZXIucm91dGUoKGVudGl0eTogTWFyaW8pID0+IGVudGl0eS50dXJibyhrZXlTdGF0ZSA9PT0gMSkpO1xuICB9KTtcblxuICBpbnB1dC5hZGRNYXBwaW5nKCdLZXlBJywga2V5U3RhdGUgPT4ge1xuICAgIHJvdXRlci5yb3V0ZSgoZW50aXR5OiBNYXJpbykgPT4gZW50aXR5LmdvLmRpciArPSBrZXlTdGF0ZSA/IC0xIDogMSk7XG4gIH0pO1xuICBcbiAgaW5wdXQuYWRkTWFwcGluZygnS2V5RCcsIGtleVN0YXRlID0+IHtcbiAgICByb3V0ZXIucm91dGUoKGVudGl0eTogTWFyaW8pID0+IGVudGl0eS5nby5kaXIgKz0ga2V5U3RhdGUgPyAxIDogLTEpO1xuICB9KTtcbiAgXG4gIHJldHVybiByb3V0ZXI7XG59IiwiaW1wb3J0IHsgTGF5ZXJSZW5kZXJlciB9IGZyb20gXCIuLi9Db21wb3NpdG9yXCI7XG5pbXBvcnQgTGV2ZWwgZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgeyBMZXZlbFRpbGVTcGVjIH0gZnJvbSBcIi4uL2xvYWRlcnMvbGV2ZWxcIjtcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgU3ByaXRlU2hlZXQgZnJvbSBcIi4uL1Nwcml0ZVNoZWV0XCI7XG5pbXBvcnQgeyBUaWxlUmVzb2x2ZXIgfSBmcm9tIFwiLi4vVGlsZUNvbGxpZGVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCYWNrZ3JvdW5kTGF5ZXIobGV2ZWw6IExldmVsLCB0aWxlczogTWF0cml4PExldmVsVGlsZVNwZWM+LCBzcHJpdGVzOiBTcHJpdGVTaGVldCkgOiBMYXllclJlbmRlcmVyIHtcbiAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgVGlsZVJlc29sdmVyKHRpbGVzKTtcblxuICBjb25zdCBjdHggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gIGN0eC5jYW52YXMud2lkdGggPSAyNTYgKyAxNjtcbiAgY3R4LmNhbnZhcy5oZWlnaHQgPSAyNDA7XG5cbiAgZnVuY3Rpb24gcmVkcmF3KGRyYXdGcm9tOiBudW1iZXIsIGRyYXdUbzogbnVtYmVyKXtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KTtcblxuICAgIGZvcihsZXQgeD1kcmF3RnJvbTsgeDw9ZHJhd1RvOyB4Kyspe1xuICAgICAgY29uc3QgY29sID0gdGlsZXMuZ3JpZFt4XTtcbiAgICAgIGlmKCFjb2wpIGNvbnRpbnVlO1xuICAgICAgY29sLmZvckVhY2goKHRpbGUsIHkpPT57XG4gICAgICAgIHNwcml0ZXMuZHJhd0FuaW0odGlsZS5uYW1lLCBjdHgsIHgtZHJhd0Zyb20sIHksIGxldmVsLnRpbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGRyYXdCYWNrZ3JvdW5kTGF5ZXIoc2NyZWVuLCBjYW1lcmEpeyBcbiAgICBjb25zdCBkcmF3V2lkdGggPSByZXNvbHZlci50b0luZGV4KGNhbWVyYS5zaXplLngpO1xuICAgIGNvbnN0IGRyYXdGcm9tID0gcmVzb2x2ZXIudG9JbmRleChjYW1lcmEucG9zLngpO1xuICAgIGNvbnN0IGRyYXdUbyA9IGRyYXdGcm9tICsgZHJhd1dpZHRoO1xuICAgIHJlZHJhdyhkcmF3RnJvbSwgZHJhd1RvKTtcbiAgICBzY3JlZW4uZHJhd0ltYWdlKFxuICAgICAgY3R4LmNhbnZhcywgXG4gICAgICBNYXRoLmZsb29yKC1jYW1lcmEucG9zLnggJSAxNiksIFxuICAgICAgTWF0aC5mbG9vcigtY2FtZXJhLnBvcy55KVxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9DYW1lcmFcIjtcbmltcG9ydCB7IExheWVyUmVuZGVyZXIgfSBmcm9tIFwiLi4vQ29tcG9zaXRvclwiO1xuaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgTGV2ZWwgZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgeyBUaWxlUmVzb2x2ZXIgfSBmcm9tIFwiLi4vVGlsZUNvbGxpZGVyXCI7XG5cbmludGVyZmFjZSBWZWMyIHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcblxuZnVuY3Rpb24gY3JlYXRlRW50aXR5TGF5ZXIoZW50aXRpZXM6IFNldDxFbnRpdHk+KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRyYXdCb3VuZGluZ0JveChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY2FtZXJhOiBDYW1lcmEpe1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZWQnO1xuICAgIGVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5yZWN0KFxuICAgICAgICBNYXRoLmZsb29yKGVudGl0eS5ib3VuZHMubGVmdCAtIGNhbWVyYS5wb3MueCksIFxuICAgICAgICBNYXRoLmZsb29yKGVudGl0eS5ib3VuZHMudG9wIC0gY2FtZXJhLnBvcy55KSwgXG4gICAgICAgIGVudGl0eS5zaXplLngsIGVudGl0eS5zaXplLnlcbiAgICAgICk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRpbGVDYW5kaWRhdGVMYXllcih0aWxlUmVzb2x2ZXI6IFRpbGVSZXNvbHZlcil7XG4gIGNvbnN0IHJlc29sdmVkVGlsZXM6IFZlYzJbXSA9IFtdO1xuXG4gIGNvbnN0IHRpbGVTaXplID0gdGlsZVJlc29sdmVyLnRpbGVTaXplO1xuXG4gIGNvbnN0IGdldEJ5SW5kZXhPcmlnaW5hbCA9IHRpbGVSZXNvbHZlci5nZXRCeUluZGV4O1xuICB0aWxlUmVzb2x2ZXIuZ2V0QnlJbmRleCA9IGZ1bmN0aW9uIGdldEJ5SW5kZXhGYWtlKHg6IG51bWJlciwgeTogbnVtYmVyKXtcbiAgICByZXNvbHZlZFRpbGVzLnB1c2goe3gsIHl9KTtcbiAgICByZXR1cm4gZ2V0QnlJbmRleE9yaWdpbmFsLmNhbGwodGlsZVJlc29sdmVyLCB4LCB5KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBkcmF3VGlsZUNhbmRpZGF0ZXMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbWVyYTogQ2FtZXJhKXtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XG4gICAgcmVzb2x2ZWRUaWxlcy5mb3JFYWNoKCh7eCx5fSkgPT4ge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LnJlY3QoXG4gICAgICAgIE1hdGguZmxvb3IoeCp0aWxlU2l6ZSAtIGNhbWVyYS5wb3MueCksIFxuICAgICAgICBNYXRoLmZsb29yKHkqdGlsZVNpemUgLSBjYW1lcmEucG9zLnkpLCBcbiAgICAgICAgdGlsZVNpemUsIHRpbGVTaXplXG4gICAgICApO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH0pO1xuXG4gICAgcmVzb2x2ZWRUaWxlcy5sZW5ndGggPSAwO1xuICB9O1xufVxuIFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbGxpc2lvbkxheWVyKGxldmVsOiBMZXZlbCkgOiBMYXllclJlbmRlcmVyIHtcbiAgY29uc3QgZHJhd1RpbGVDYW5kaWRhdGVzID0gbGV2ZWwudGlsZUNvbGxpZGVyLnJlc29sdmVycy5tYXAoY3JlYXRlVGlsZUNhbmRpZGF0ZUxheWVyKTtcbiAgY29uc3QgZHJhd0JvdW5kaW5nQm94ZXMgPSBjcmVhdGVFbnRpdHlMYXllcihsZXZlbC5lbnRpdGllcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGRyYXdDb2xsaXNpb24oY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbWVyYTogQ2FtZXJhKXtcbiAgICBkcmF3VGlsZUNhbmRpZGF0ZXMuZm9yRWFjaChkcmF3ID0+IGRyYXcoY3R4LCBjYW1lcmEpKTtcbiAgICBkcmF3Qm91bmRpbmdCb3hlcyhjdHgsIGNhbWVyYSk7XG4gIH1cbn0iLCJpbXBvcnQgeyBMYXllclJlbmRlcmVyIH0gZnJvbSBcIi4uL0NvbXBvc2l0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbG9yTGF5ZXIoY29sb3I6IHN0cmluZykgOiBMYXllclJlbmRlcmVyIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRyYXdEYXNoYm9hcmQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpe1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY3R4LmNhbnZhcy53aWR0aCwgY3R4LmNhbnZhcy5oZWlnaHQpO1xuICB9XG59IiwiaW1wb3J0IHsgTGF5ZXJSZW5kZXJlciB9IGZyb20gXCIuLi9Db21wb3NpdG9yXCI7XG5pbXBvcnQgTGV2ZWwgZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgeyBGb250U2hlZXQgfSBmcm9tIFwiLi4vbG9hZGVycy9mb250XCI7XG5pbXBvcnQgeyBmaW5kUGxheWVycyB9IGZyb20gXCIuLi9wbGF5ZXJcIjtcbmltcG9ydCBMZXZlbFRpbWVyIGZyb20gXCIuLi90cmFpdHMvTGV2ZWxUaW1lclwiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi4vdHJhaXRzL1BsYXllclwiO1xuXG5mdW5jdGlvbiBnZXRQbGF5ZXJUcmFpdChsZXZlbDogTGV2ZWwpIDogUGxheWVyIHtcbiAgZm9yKGNvbnN0IGVudGl0eSBvZiBmaW5kUGxheWVycyhsZXZlbCkpe1xuICAgIHJldHVybiBlbnRpdHkuZ2V0VHJhaXQoUGxheWVyKSBhcyBQbGF5ZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZXJUcmFpdChsZXZlbDogTGV2ZWwpIDogTGV2ZWxUaW1lciB7XG4gIGZvcihjb25zdCBlbnRpdHkgb2YgbGV2ZWwuZW50aXRpZXMpe1xuICAgIGlmKGVudGl0eS5oYXNUcmFpdChMZXZlbFRpbWVyKSl7XG4gICAgICByZXR1cm4gZW50aXR5LmdldFRyYWl0KExldmVsVGltZXIpIGFzIExldmVsVGltZXI7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEYXNoYm9hcmRMYXllcihmb250OiBGb250U2hlZXQsIGxldmVsOiBMZXZlbCkgOiBMYXllclJlbmRlcmVyIHtcbiAgY29uc3QgTElORTEgPSBmb250LnNpemU7XG4gIGNvbnN0IExJTkUyID0gZm9udC5zaXplICogMjtcblxuICBjb25zdCB0aW1lciA9IGdldFRpbWVyVHJhaXQobGV2ZWwpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBkcmF3RGFzaGJvYXJkKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKXtcbiAgICBjb25zdCBwbGF5ZXIgPSBnZXRQbGF5ZXJUcmFpdChsZXZlbCk7XG4gICAgaWYoIXBsYXllcikgcmV0dXJuO1xuICAgIFxuICAgIGZvbnQuZHJhdyhwbGF5ZXIubmFtZSwgY3R4LCAxNiwgTElORTEpO1xuICAgIGZvbnQuZHJhdyhwbGF5ZXIuc2NvcmUudG9TdHJpbmcoKS5wYWRTdGFydCg2LCAnMCcpLCBjdHgsIDE2LCBMSU5FMik7XG5cbiAgICBmb250LmRyYXcoYEB4JHtwbGF5ZXIuY29pbnMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWAsIGN0eCwgOTYsIExJTkUyKTtcblxuICAgIGZvbnQuZHJhdygnV09STEQnLCBjdHgsIDE1MiwgTElORTEpO1xuICAgIGZvbnQuZHJhdyhsZXZlbC5uYW1lLCBjdHgsIDE2MCwgTElORTIpO1xuXG4gICAgZm9udC5kcmF3KCdUSU1FJywgY3R4LCAyMDgsIExJTkUxKTtcbiAgICBmb250LmRyYXcoTWF0aC5tYXgoMCwgdGltZXIuY3VycmVudFRpbWUpLnRvRml4ZWQoMCkucGFkU3RhcnQoMywgJzAnKSwgY3R4LCAyMTYsIExJTkUyKTtcbiAgfVxufSIsImltcG9ydCB7IExheWVyUmVuZGVyZXIgfSBmcm9tIFwiLi4vQ29tcG9zaXRvclwiO1xuaW1wb3J0IE1hcmlvIGZyb20gXCIuLi9lbnRpdGllcy9NYXJpb1wiO1xuaW1wb3J0IExldmVsIGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IHsgRm9udFNoZWV0IH0gZnJvbSBcIi4uL2xvYWRlcnMvZm9udFwiO1xuaW1wb3J0IHsgZmluZFBsYXllcnMgfSBmcm9tIFwiLi4vcGxheWVyXCI7XG5cbmZ1bmN0aW9uIGdldFBsYXllcihsZXZlbDogTGV2ZWwpIDogTWFyaW8ge1xuICBmb3IoY29uc3QgZW50aXR5IG9mIGZpbmRQbGF5ZXJzKGxldmVsKSl7XG4gICAgaWYoZW50aXR5IGluc3RhbmNlb2YgTWFyaW8pIHJldHVybiBlbnRpdHk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBsYXllclByb2dyZXNzTGF5ZXIoZm9udDogRm9udFNoZWV0LCBsZXZlbDogTGV2ZWwpIDogTGF5ZXJSZW5kZXJlciB7XG4gIGNvbnN0IHNpemUgPSBmb250LnNpemU7XG5cbiAgY29uc3QgYnVmZmVyOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBidWZmZXIud2lkdGggPSBidWZmZXIuaGVpZ2h0ID0gMzI7XG4gIGNvbnN0IGJ1ZmZlckN0eCA9IGJ1ZmZlci5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBkcmF3UGxheWVyUHJvZ3Jlc3MoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpe1xuICAgIGNvbnN0IHBsYXllciA9IGdldFBsYXllcihsZXZlbCk7XG4gICAgZm9udC5kcmF3KGBXT1JMRCAke2xldmVsLm5hbWV9YCwgY3R4LCBzaXplKjEyLCBzaXplKjEyKTtcblxuICAgIGJ1ZmZlckN0eC5jbGVhclJlY3QoMCwgMCwgYnVmZmVyLndpZHRoLCBidWZmZXIuaGVpZ2h0KTtcbiAgICBwbGF5ZXIuZHJhdyhidWZmZXJDdHgpO1xuICAgIGN0eC5kcmF3SW1hZ2UoYnVmZmVyLCBzaXplKjEyLCBzaXplKjE1KTtcblxuICAgIGZvbnQuZHJhdyhgeCAke3BsYXllci5wbGF5ZXIubGl2ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgzLCAnICcpfWAsIGN0eCwgc2l6ZSoxNiwgc2l6ZSoxNik7XG4gIH1cbn0iLCJpbXBvcnQgeyBMYXllclJlbmRlcmVyIH0gZnJvbSBcIi4uL0NvbXBvc2l0b3JcIjtcbmltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ByaXRlTGF5ZXIoZW50aXRpZXM6IFNldDxFbnRpdHk+LCB3aWR0aDogbnVtYmVyID0gNjQsIGhlaWdodDogbnVtYmVyID0gNjQpIDogTGF5ZXJSZW5kZXJlciB7XG4gIGNvbnN0IHNwcml0ZUN0eCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG4gIHNwcml0ZUN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgc3ByaXRlQ3R4LmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICBzcHJpdGVDdHguY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICByZXR1cm4gZnVuY3Rpb24gZHJhd1Nwcml0ZUxheWVyKGN0eCwgY2FtZXJhKXtcbiAgICBlbnRpdGllcy5mb3JFYWNoKGVudGl0eSA9PiB7XG4gICAgICBzcHJpdGVDdHguY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgZW50aXR5LmRyYXcoc3ByaXRlQ3R4KTtcblxuICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgc3ByaXRlQ3R4LmNhbnZhcywgXG4gICAgICAgIE1hdGguZmxvb3IoZW50aXR5LnBvcy54IC0gY2FtZXJhLnBvcy54KSxcbiAgICAgICAgTWF0aC5mbG9vcihlbnRpdHkucG9zLnkgLSBjYW1lcmEucG9zLnkpXG4gICAgICApO1xuICAgIH0pXG4gIH1cbn0iLCJpbXBvcnQgeyBMYXllclJlbmRlcmVyIH0gZnJvbSBcIi4uL0NvbXBvc2l0b3JcIjtcbmltcG9ydCB7IEZvbnRTaGVldCB9IGZyb20gXCIuLi9sb2FkZXJzL2ZvbnRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRleHRMYXllcihmb250OiBGb250U2hlZXQsIHRleHQ6IHN0cmluZykgOiBMYXllclJlbmRlcmVyIHtcbiAgY29uc3Qgc2l6ZSA9IGZvbnQuc2l6ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRyYXdUZXh0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKXtcbiAgICBjb25zdCB0ZXh0VyA9IHRleHQubGVuZ3RoO1xuICAgIGNvbnN0IHNjcmVlblcgPSBNYXRoLmZsb29yKGN0eC5jYW52YXMud2lkdGggLyBzaXplKTtcbiAgICBjb25zdCBzY3JlZW5IID0gTWF0aC5mbG9vcihjdHguY2FudmFzLmhlaWdodCAvIHNpemUpO1xuICAgIGNvbnN0IHggPSAoc2NyZWVuVyAtIHRleHRXKSAvIDI7XG4gICAgY29uc3QgeSA9IHNjcmVlbkggLyAyO1xuXG4gICAgZm9udC5kcmF3KHRleHQsIGN0eCwgeCAqIHNpemUsIHkgKiBzaXplKTtcbiAgfVxufSIsImV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkSW1hZ2UocGF0aDogc3RyaW5nKSA6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD57XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGltZy5vbmxvYWQgPSAoKT0+cmVzb2x2ZShpbWcpO1xuICAgIGltZy5vbmVycm9yID0gcmVqZWN0O1xuICAgIGltZy5zcmMgPSBwYXRoO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRKU09OKHBhdGg6IHN0cmluZykgOiBQcm9taXNlPG9iamVjdD4ge1xuICByZXR1cm4gZmV0Y2gocGF0aCkudGhlbihyZXM9PnJlcy5qc29uKCkpO1xufSIsImltcG9ydCBBdWRpb0JvYXJkIGZyb20gXCIuLi9BdWRpb0JvYXJkXCI7XG5pbXBvcnQgeyBsb2FkSlNPTiB9IGZyb20gXCIuLi9sb2FkZXJzXCI7XG5cbnR5cGUgQXVkaW9Mb2FkZXIgPSAodXJsOiBzdHJpbmcpID0+IFByb21pc2U8QXVkaW9CdWZmZXI+O1xuXG5pbnRlcmZhY2UgQXVkaW9TcGVjIHtcbiAgbmFtZTogc3RyaW5nLFxuICB1cmw6IHN0cmluZyxcbn1cbmludGVyZmFjZSBBdWRpb1NoZWV0U3BlYyB7XG4gIGZ4OiBBdWRpb1NwZWNbXSxcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRBdWRpb0JvYXJkKG5hbWU6IHN0cmluZywgYXVkaW9Db250ZXh0OiBBdWRpb0NvbnRleHQpIDogUHJvbWlzZTxBdWRpb0JvYXJkPiB7XG4gIGNvbnN0IGxvYWRBdWRpbyA9IGNyZWF0ZUF1ZGlvTG9hZGVyKGF1ZGlvQ29udGV4dCk7XG4gIGNvbnN0IGF1ZGlvU2hlZXQgPSBhd2FpdCBsb2FkSlNPTihgLi9zb3VuZHMvJHtuYW1lfS5qc29uYCkgYXMgQXVkaW9TaGVldFNwZWM7XG4gIGNvbnN0IGF1ZGlvQm9hcmQgPSBuZXcgQXVkaW9Cb2FyZCgpO1xuICBjb25zdCBqb2JzOiBhbnlbXSA9IFtdO1xuICBhdWRpb1NoZWV0LmZ4LmZvckVhY2goKHsgbmFtZSwgdXJsIH0pID0+IHtcbiAgICBqb2JzLnB1c2goXG4gICAgICBsb2FkQXVkaW8odXJsKVxuICAgICAgLnRoZW4oYnVmZmVyID0+IHtcbiAgICAgICAgYXVkaW9Cb2FyZC5hZGQobmFtZSwgYnVmZmVyKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfSk7XG4gIGF3YWl0IFByb21pc2UuYWxsKGpvYnMpO1xuICByZXR1cm4gYXVkaW9Cb2FyZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUF1ZGlvTG9hZGVyKGNvbnRleHQ6IEF1ZGlvQ29udGV4dCkgOiBBdWRpb0xvYWRlciB7XG4gIHJldHVybiBmdW5jdGlvbiBsb2FkQXVkaW8odXJsOiBzdHJpbmcpIDogUHJvbWlzZTxBdWRpb0J1ZmZlcj4ge1xuICAgIHJldHVybiBmZXRjaCh1cmwpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICByZXR1cm4gY29udGV4dC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlCdWZmZXIpO1xuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSBcIi4uL2xvYWRlcnNcIjtcbmltcG9ydCBTcHJpdGVTaGVldCBmcm9tIFwiLi4vU3ByaXRlU2hlZXRcIjtcblxuY29uc3QgTEVUVEVSUyA9IGAgIVwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX1xcYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fmBcblxuZXhwb3J0IGNsYXNzIEZvbnRTaGVldCB7XG4gIHByaXZhdGUgc2hlZXQ6IFNwcml0ZVNoZWV0O1xuICBwdWJsaWMgc2l6ZTogbnVtYmVyO1xuICBjb25zdHJ1Y3RvcihzaGVldDogU3ByaXRlU2hlZXQsIHNpemU6IG51bWJlcil7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gIH1cbiAgZHJhdyh0ZXh0OiBzdHJpbmcsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBvZmZzZXRYOiBudW1iZXIsIG9mZnNldFk6IG51bWJlcil7XG4gICAgZm9yKGxldCB4PTA7IHg8dGV4dC5sZW5ndGg7IHgrKyl7XG4gICAgICB0aGlzLnNoZWV0LmRyYXcodGV4dFt4XSwgY3R4LCBvZmZzZXRYICsgeCAqIHRoaXMuc2l6ZSwgb2Zmc2V0WSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkRm9udCgpIDogUHJvbWlzZTxGb250U2hlZXQ+IHtcbiAgY29uc3QgaW1hZ2UgPSBhd2FpdCBsb2FkSW1hZ2UoJy4vc2hlZXRzL2ZvbnQucG5nJylcbiAgY29uc3Qgc3ByaXRlcyA9IG5ldyBTcHJpdGVTaGVldChpbWFnZSk7XG5cbiAgY29uc3Qgc2l6ZSA9IDg7XG4gIGZvcihsZXQgaT0wOyBpPExFVFRFUlMubGVuZ3RoOyBpKyspe1xuICAgIGNvbnN0IHggPSAoaSAmIDE1KSAqIHNpemU7XG4gICAgY29uc3QgeSA9IChpID4+IDQpICogc2l6ZTtcbiAgICBzcHJpdGVzLmRlZmluZShMRVRURVJTW2ldLCB4LCB5LCBzaXplLCBzaXplKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgRm9udFNoZWV0KHNwcml0ZXMsIHNpemUpO1xufSIsImltcG9ydCB7IEVudGl0eUZhY3RvcnkgfSBmcm9tIFwiLi4vZW50aXRpZXNcIjtcbmltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IHsgY3JlYXRlQmFja2dyb3VuZExheWVyIH0gZnJvbSBcIi4uL2xheWVycy9iYWNrZ3JvdW5kXCI7XG5pbXBvcnQgeyBjcmVhdGVTcHJpdGVMYXllciB9IGZyb20gXCIuLi9sYXllcnMvc3ByaXRlXCI7XG5pbXBvcnQgTGV2ZWwgZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgeyBsb2FkSlNPTiB9IGZyb20gXCIuLi9sb2FkZXJzXCI7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IFNwcml0ZVNoZWV0IGZyb20gXCIuLi9TcHJpdGVTaGVldFwiO1xuaW1wb3J0IExldmVsVGltZXIgZnJvbSBcIi4uL3RyYWl0cy9MZXZlbFRpbWVyXCI7XG5pbXBvcnQgVHJpZ2dlciBmcm9tIFwiLi4vdHJhaXRzL1RyaWdnZXJcIjtcbmltcG9ydCB7IGxvYWRNdXNpY1NoZWV0IH0gZnJvbSBcIi4vbXVzaWNcIjtcbmltcG9ydCB7IGxvYWRTcHJpdGVTaGVldCB9IGZyb20gXCIuL3Nwcml0ZVwiO1xuXG50eXBlIFJhbmdlID0gW251bWJlciwgbnVtYmVyLCBudW1iZXI/LCBudW1iZXI/XTtcbmV4cG9ydCB0eXBlIExldmVsVGlsZVNwZWMgPSB7XG4gIG5hbWU6IHN0cmluZyxcbiAgcGF0dGVybj86IHN0cmluZyxcbiAgdHlwZT86IHN0cmluZyxcbiAgcmFuZ2VzOiBSYW5nZVtdLFxufVxudHlwZSBQYXR0ZXJuU3BlYyA9IHtcbiAgdGlsZXM6IExldmVsVGlsZVNwZWNbXSxcbn1cbnR5cGUgUGF0dGVybnNTcGVjID0ge1xuICBba2V5OiBzdHJpbmddOiBQYXR0ZXJuU3BlYyxcbn07XG50eXBlIExheWVyU3BlYyA9IHtcbiAgdGlsZXM6IExldmVsVGlsZVNwZWNbXSxcbn1cbnR5cGUgRW50aXR5U3BlYyA9IHtcbiAgbmFtZTogc3RyaW5nLFxuICBwb3M6IFtudW1iZXIsIG51bWJlcl0sXG59XG5leHBvcnQgdHlwZSBUcmlnZ2VyU3BlYyA9IHtcbiAgdHlwZTogc3RyaW5nLFxuICBuYW1lOiBzdHJpbmcsXG4gIHBvczogW251bWJlciwgbnVtYmVyXSxcbn1cbnR5cGUgTGV2ZWxTcGVjID0ge1xuICBzcHJpdGVTaGVldDogc3RyaW5nLFxuICBtdXNpY1NoZWV0OiBzdHJpbmcsXG4gIHBhdHRlcm5TaGVldDogc3RyaW5nLFxuICBsYXllcnM6IExheWVyU3BlY1tdLFxuICBlbnRpdGllczogRW50aXR5U3BlY1tdLFxuICB0cmlnZ2Vycz86IFRyaWdnZXJTcGVjW10sXG59XG50eXBlIEV4cGFuZGVkVGlsZSA9IHtcbiAgdGlsZTogTGV2ZWxUaWxlU3BlYyxcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRQYXR0ZXJuKG5hbWU6IHN0cmluZykgOiBQcm9taXNlPFBhdHRlcm5zU3BlYz4ge1xuICByZXR1cm4gYXdhaXQgbG9hZEpTT04oYC4vc3ByaXRlcy9wYXR0ZXJucy8ke25hbWV9Lmpzb25gKSBhcyBQYXR0ZXJuc1NwZWM7XG59XG5cbmZ1bmN0aW9uIHNldHVwQmVoYXZpb3IobGV2ZWw6IExldmVsKXtcbiAgY29uc3QgdGltZXIgPSBuZXcgRW50aXR5KCk7XG4gIHRpbWVyLmFkZFRyYWl0KG5ldyBMZXZlbFRpbWVyKCkpO1xuICBsZXZlbC5lbnRpdGllcy5hZGQodGltZXIpO1xuXG4gIGxldmVsLmV2ZW50cy5saXN0ZW4oTGV2ZWxUaW1lci5USU1FUl9PS0FZLCAoKSA9PiBsZXZlbC5tdXNpYy5wbGF5VGhlbWUoKSk7XG4gIGxldmVsLmV2ZW50cy5saXN0ZW4oTGV2ZWxUaW1lci5USU1FUl9IVVJSWSwgKCkgPT4gbGV2ZWwubXVzaWMucGxheUh1cnJ5VGhlbWUoKSk7XG59XG5cbmZ1bmN0aW9uIHNldHVwQmFja2dyb3VuZHMobGV2ZWxTcGVjOiBMZXZlbFNwZWMsIGxldmVsOiBMZXZlbCwgc3ByaXRlczogU3ByaXRlU2hlZXQsIHBhdHRlcm5zU3BlYzogUGF0dGVybnNTcGVjKXtcbiAgbGV2ZWxTcGVjLmxheWVycy5mb3JFYWNoKGxheWVyID0+IHtcbiAgICBjb25zdCBncmlkID0gY3JlYXRlR3JpZChsYXllci50aWxlcywgcGF0dGVybnNTcGVjKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kTGF5ZXIgPSBjcmVhdGVCYWNrZ3JvdW5kTGF5ZXIobGV2ZWwsIGdyaWQsIHNwcml0ZXMpO1xuICAgIGxldmVsLmNvbXAuYWRkKGJhY2tncm91bmRMYXllcik7XG4gICAgbGV2ZWwudGlsZUNvbGxpZGVyLmFkZEdyaWQoZ3JpZCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXR1cEVudGl0aWVzKGxldmVsU3BlYzogTGV2ZWxTcGVjLCBsZXZlbDogTGV2ZWwsIGVudGl0eUZhY3Rvcnk6IEVudGl0eUZhY3Rvcnkpe1xuICBsZXZlbFNwZWMuZW50aXRpZXMuZm9yRWFjaCgoe25hbWUsIHBvczogW3gsIHldfSkgPT4ge1xuICAgIGNvbnN0IGNyZWF0ZUVudGl0eSA9IGVudGl0eUZhY3RvcnlbbmFtZV07XG4gICAgY29uc3QgZW50aXR5ID0gY3JlYXRlRW50aXR5KCk7XG4gICAgZW50aXR5LnBvcy5zZXQoeCwgeSk7XG4gICAgbGV2ZWwuZW50aXRpZXMuYWRkKGVudGl0eSk7XG4gIH0pXG5cbiAgY29uc3Qgc3ByaXRlTGF5ZXIgPSBjcmVhdGVTcHJpdGVMYXllcihsZXZlbC5lbnRpdGllcyk7XG4gIGxldmVsLmNvbXAuYWRkKHNwcml0ZUxheWVyKTtcbn1cblxuZnVuY3Rpb24gc2V0dXBUcmlnZ2VycyhsZXZlbFNwZWM6IExldmVsU3BlYywgbGV2ZWw6IExldmVsKXtcbiAgaWYoIWxldmVsU3BlYy50cmlnZ2VycykgcmV0dXJuO1xuICBmb3IoY29uc3QgdHJpZ2dlclNwZWMgb2YgbGV2ZWxTcGVjLnRyaWdnZXJzKXtcbiAgICBjb25zdCB0cmlnZ2VyID0gbmV3IFRyaWdnZXIoKTtcblxuICAgIGlmKCF0cmlnZ2VyKSBjb250aW51ZTtcbiAgICB0cmlnZ2VyLmNvbmRpdGlvbnMucHVzaCgoZW50aXR5LCB0b3VjaGVzLCBnYywgbGV2ZWwpID0+IHtcbiAgICAgIGxldmVsLmV2ZW50cy5lbWl0KExldmVsLlRSSUdHRVIsIHRyaWdnZXJTcGVjLCBlbnRpdHksIHRvdWNoZXMpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZW50aXR5ID0gbmV3IEVudGl0eSgpO1xuICAgIGVudGl0eS5hZGRUcmFpdCh0cmlnZ2VyKTtcbiAgICBlbnRpdHkucG9zLnNldCguLi50cmlnZ2VyU3BlYy5wb3MpO1xuICAgIGVudGl0eS5zaXplLnNldCgxNiwgMTYpO1xuICAgIGxldmVsLmVudGl0aWVzLmFkZChlbnRpdHkpO1xuICB9XG59XG5cbnR5cGUgTGV2ZWxMb2FkZXIgPSAobmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPExldmVsPjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMZXZlbExvYWRlcihlbnRpdHlGYWN0b3J5OiBFbnRpdHlGYWN0b3J5KSA6IExldmVsTG9hZGVyIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxvYWRMZXZlbChuYW1lOiBzdHJpbmcpIDogUHJvbWlzZTxMZXZlbD4ge1xuICAgIHJldHVybiAobG9hZEpTT04oYC4vbGV2ZWxzLyR7bmFtZX0uanNvbmApIGFzIFByb21pc2U8TGV2ZWxTcGVjPilcbiAgICAudGhlbihsZXZlbFNwZWMgPT4gUHJvbWlzZS5hbGwoW1xuICAgICAgbGV2ZWxTcGVjLFxuICAgICAgbG9hZFNwcml0ZVNoZWV0KGxldmVsU3BlYy5zcHJpdGVTaGVldCksXG4gICAgICBsb2FkTXVzaWNTaGVldChsZXZlbFNwZWMubXVzaWNTaGVldCksXG4gICAgICBsb2FkUGF0dGVybihsZXZlbFNwZWMucGF0dGVyblNoZWV0KSxcbiAgICBdKSlcbiAgICAudGhlbigoW2xldmVsU3BlYywgc3ByaXRlcywgbXVzaWNQbGF5ZXIsIHBhdHRlcm5TcGVjXSkgPT4ge1xuICAgICAgY29uc3QgbGV2ZWwgPSBuZXcgTGV2ZWwoKTtcbiAgICAgIGxldmVsLm5hbWUgPSBuYW1lO1xuICAgICAgbGV2ZWwubXVzaWMuc2V0UGxheWVyKG11c2ljUGxheWVyKTtcblxuICAgICAgc2V0dXBCYWNrZ3JvdW5kcyhsZXZlbFNwZWMsIGxldmVsLCBzcHJpdGVzLCBwYXR0ZXJuU3BlYyk7XG4gICAgICBzZXR1cEVudGl0aWVzKGxldmVsU3BlYywgbGV2ZWwsIGVudGl0eUZhY3RvcnkpO1xuICAgICAgc2V0dXBUcmlnZ2VycyhsZXZlbFNwZWMsIGxldmVsKTtcbiAgICAgIHNldHVwQmVoYXZpb3IobGV2ZWwpO1xuICAgICAgXG4gICAgICByZXR1cm4gbGV2ZWw7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR3JpZCh0aWxlczogTGV2ZWxUaWxlU3BlY1tdLCBwYXR0ZXJuczogUGF0dGVybnNTcGVjKSA6IE1hdHJpeDxMZXZlbFRpbGVTcGVjPiB7XG4gIGNvbnN0IGdyaWQ6IE1hdHJpeDxMZXZlbFRpbGVTcGVjPiA9IG5ldyBNYXRyaXgoKTtcblxuICBmb3IoY29uc3QgeyB0aWxlLCB4LCB5IH0gb2YgZXhwYW5kVGlsZXModGlsZXMsIHBhdHRlcm5zKSl7XG4gICAgZ3JpZC5zZXQoeCwgeSwgdGlsZSk7XG4gIH1cblxuICByZXR1cm4gZ3JpZDtcbn1cblxudHlwZSBDb29yZCA9IHsgeDogbnVtYmVyLCB5Om51bWJlciB9O1xuZnVuY3Rpb24qIGV4cGFuZFNwYW4oeFN0YXJ0OiBudW1iZXIsIHhMZW46IG51bWJlciwgeVN0YXJ0OiBudW1iZXIsIHlMZW46IG51bWJlcikgOiBHZW5lcmF0b3I8Q29vcmQ+IHtcbiAgY29uc3QgeEVuZCA9IHhTdGFydCArIHhMZW4sIHlFbmQgPSB5U3RhcnQgKyB5TGVuO1xuICBmb3IobGV0IHg9eFN0YXJ0OyB4PHhFbmQ7IHgrKyl7XG4gICAgZm9yKGxldCB5PXlTdGFydDsgeTx5RW5kOyB5Kyspe1xuICAgICAgeWllbGQgeyB4LCB5IH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4cGFuZFJhbmdlKHJhbmdlOiBSYW5nZSkgOiBHZW5lcmF0b3I8Q29vcmQ+IHtcbiAgc3dpdGNoKHJhbmdlLmxlbmd0aCl7XG4gICAgY2FzZSA0OiByZXR1cm4gZXhwYW5kU3BhbiguLi5yYW5nZSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZXhwYW5kU3BhbihyYW5nZVswXSwgcmFuZ2VbMV0sIHJhbmdlWzJdLCAxKTtcbiAgICBjYXNlIDI6IHJldHVybiBleHBhbmRTcGFuKHJhbmdlWzBdLCAxLCByYW5nZVsxXSwgMSk7XG4gIH1cbn1cblxuZnVuY3Rpb24qIGV4cGFuZFJhbmdlcyhyYW5nZXM6IFJhbmdlW10pIDogR2VuZXJhdG9yPGFueT4ge1xuICBmb3IoY29uc3QgcmFuZ2Ugb2YgcmFuZ2VzKXtcbiAgICB5aWVsZCogZXhwYW5kUmFuZ2UocmFuZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uKiBleHBhbmRUaWxlcyh0aWxlczogTGV2ZWxUaWxlU3BlY1tdLCBwYXR0ZXJuczogUGF0dGVybnNTcGVjKSA6IEdlbmVyYXRvcjxFeHBhbmRlZFRpbGU+IHtcbiAgZnVuY3Rpb24qIHdhbGtUaWxlcyh0aWxlczogTGV2ZWxUaWxlU3BlY1tdLCBvZmZzZXRYOiBudW1iZXIsIG9mZnNldFk6IG51bWJlcikgOiBHZW5lcmF0b3I8RXhwYW5kZWRUaWxlPiB7XG4gICAgZm9yKGNvbnN0IHRpbGUgb2YgdGlsZXMpe1xuICAgICAgZm9yKGNvbnN0IHsgeCwgeSB9IG9mIGV4cGFuZFJhbmdlcyh0aWxlLnJhbmdlcykpe1xuICAgICAgICBjb25zdCBkZXJpdmVkWCA9IHggKyBvZmZzZXRYLCBkZXJpdmVkWSA9IHkgKyBvZmZzZXRZO1xuICAgICAgICBpZih0aWxlLnBhdHRlcm4pe1xuICAgICAgICAgIGNvbnN0IHRpbGVzID0gcGF0dGVybnNbdGlsZS5wYXR0ZXJuXS50aWxlcztcbiAgICAgICAgICB5aWVsZCogd2Fsa1RpbGVzKHRpbGVzLCBkZXJpdmVkWCwgZGVyaXZlZFkpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICB0aWxlLFxuICAgICAgICAgICAgeDogZGVyaXZlZFgsXG4gICAgICAgICAgICB5OiBkZXJpdmVkWSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgeWllbGQqIHdhbGtUaWxlcyh0aWxlcywgMCwgMCk7XG59IiwiaW1wb3J0IHsgbG9hZEpTT04gfSBmcm9tIFwiLi4vbG9hZGVyc1wiO1xuaW1wb3J0IE11c2ljUGxheWVyIGZyb20gXCIuLi9NdXNpY1BsYXllclwiO1xuXG5pbnRlcmZhY2UgTXVzaWNTcGVjIHtcbiAgdXJsOiBzdHJpbmcsXG59XG5pbnRlcmZhY2UgTXVzaWNTaGVldFNwZWMge1xuICBbbmFtZTogc3RyaW5nXTogTXVzaWNTcGVjLFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZE11c2ljU2hlZXQobmFtZTogc3RyaW5nKSA6IFByb21pc2U8TXVzaWNQbGF5ZXI+IHtcbiAgY29uc3QgbXVzaWNTaGVldCA9IGF3YWl0IGxvYWRKU09OKGAuL211c2ljLyR7bmFtZX0uanNvbmApIGFzIE11c2ljU2hlZXRTcGVjO1xuICBjb25zdCBtdXNpY1BsYXllciA9IG5ldyBNdXNpY1BsYXllcigpO1xuICBmb3IoY29uc3QgW25hbWUsIHRyYWNrXSBvZiBPYmplY3QuZW50cmllcyhtdXNpY1NoZWV0KSl7XG4gICAgbXVzaWNQbGF5ZXIuYWRkVHJhY2sobmFtZSwgdHJhY2sudXJsKTtcbiAgfVxuICByZXR1cm4gbXVzaWNQbGF5ZXI7XG59IiwiaW1wb3J0IHsgY3JlYXRlQW5pbSB9IGZyb20gXCIuLi9hbmltXCI7XG5pbXBvcnQgeyBsb2FkSW1hZ2UsIGxvYWRKU09OIH0gZnJvbSBcIi4uL2xvYWRlcnNcIjtcbmltcG9ydCBTcHJpdGVTaGVldCBmcm9tIFwiLi4vU3ByaXRlU2hlZXRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUaWxlU3BlYyB7XG4gIG5hbWU6IHN0cmluZyxcbiAgaW5kZXg6IFtudW1iZXIsIG51bWJlcl0sXG59XG5pbnRlcmZhY2UgRnJhbWVTcGVjIHtcbiAgbmFtZTogc3RyaW5nLFxuICByZWN0OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcbn1cbmludGVyZmFjZSBBbmltYXRpb25TcGVjIHtcbiAgbmFtZTogc3RyaW5nLFxuICBmcmFtZUxlbjogbnVtYmVyLFxuICBmcmFtZXM6IHN0cmluZ1tdLFxufVxuaW50ZXJmYWNlIFNoZWV0U3BlYyB7XG4gIGltYWdlVVJMOiBzdHJpbmcsXG4gIHRpbGVXOiBudW1iZXIsIHRpbGVIOiBudW1iZXIsXG4gIHRpbGVzPzogVGlsZVNwZWNbXSxcbiAgZnJhbWVzPzogRnJhbWVTcGVjW10sXG4gIGFuaW1hdGlvbnM/OiBBbmltYXRpb25TcGVjW10sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3ByaXRlU2hlZXQobmFtZTogc3RyaW5nKXtcbiAgcmV0dXJuIChsb2FkSlNPTihgLi9zcHJpdGVzLyR7bmFtZX0uanNvbmApIGFzIFByb21pc2U8U2hlZXRTcGVjPilcbiAgLnRoZW4oc2hlZXRTcGVjID0+IFByb21pc2UuYWxsKFtcbiAgICBzaGVldFNwZWMsXG4gICAgbG9hZEltYWdlKHNoZWV0U3BlYy5pbWFnZVVSTCksXG4gIF0pKVxuICAudGhlbigoW3NoZWV0U3BlYywgaW1hZ2VdKT0+e1xuICAgIGNvbnN0IHNwcml0ZXMgPSBuZXcgU3ByaXRlU2hlZXQoaW1hZ2UsIHNoZWV0U3BlYy50aWxlVywgc2hlZXRTcGVjLnRpbGVIKTtcblxuICAgIGlmKHNoZWV0U3BlYy50aWxlcyl7XG4gICAgICBzaGVldFNwZWMudGlsZXMuZm9yRWFjaCh0aWxlU3BlYyA9PiB7XG4gICAgICAgIHNwcml0ZXMuZGVmaW5lVGlsZSh0aWxlU3BlYy5uYW1lLCAuLi50aWxlU3BlYy5pbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZihzaGVldFNwZWMuZnJhbWVzKXtcbiAgICAgIHNoZWV0U3BlYy5mcmFtZXMuZm9yRWFjaCgoe25hbWUsIHJlY3R9KSA9PiB7XG4gICAgICAgIHNwcml0ZXMuZGVmaW5lKG5hbWUsIC4uLnJlY3QpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYoc2hlZXRTcGVjLmFuaW1hdGlvbnMpe1xuICAgICAgc2hlZXRTcGVjLmFuaW1hdGlvbnMuZm9yRWFjaCgoe25hbWUsIGZyYW1lTGVuLCBmcmFtZXN9KSA9PiB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IGNyZWF0ZUFuaW0oZnJhbWVzLCBmcmFtZUxlbik7XG4gICAgICAgIHNwcml0ZXMuZGVmaW5lQW5pbShuYW1lLCBhbmltYXRpb24pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwcml0ZXM7XG4gIH0pXG59IiwidHlwZSBNYXRyaXhDYWxsYmFjazxUPiA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgdGlsZTogVCkgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIE1hdHJpeDxUPiB7XG4gIHB1YmxpYyBncmlkOiBUW11bXTtcbiAgY29uc3RydWN0b3IoKXtcbiAgICB0aGlzLmdyaWQgPSBbXTtcbiAgfVxuICBkZWxldGUoeDogbnVtYmVyLCB5OiBudW1iZXIpe1xuICAgIGNvbnN0IGNvbCA9IHRoaXMuZ3JpZFt4XTtcbiAgICBpZihjb2wpIGRlbGV0ZSBjb2xbeV07XG4gIH1cbiAgZ2V0KHg6IG51bWJlciwgeTogbnVtYmVyKSA6IFQge1xuICAgIGNvbnN0IGNvbCA9IHRoaXMuZ3JpZFt4XTtcbiAgICBpZihjb2wpIHJldHVybiBjb2xbeV07XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHZhbHVlOiBUKXtcbiAgICBpZighdGhpcy5ncmlkW3hdKSB0aGlzLmdyaWRbeF0gPSBbXTtcbiAgICB0aGlzLmdyaWRbeF1beV0gPSB2YWx1ZTtcbiAgfVxuICBmb3JFYWNoKGNhbGxiYWNrOiBNYXRyaXhDYWxsYmFjazxUPil7XG4gICAgdGhpcy5ncmlkLmZvckVhY2goKGNvbHVtbnMsIHgpID0+IHtcbiAgICAgIGNvbHVtbnMuZm9yRWFjaCgodGlsZSwgeSkgPT4ge1xuICAgICAgICBjYWxsYmFjayh4LCB5LCB0aWxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3Ige1xuICBwdWJsaWMgeDogbnVtYmVyO1xuICBwdWJsaWMgeTogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKXtcbiAgICB0aGlzLnNldCh4LCB5KTtcbiAgfVxuICBjb3B5KHNvdXJjZTogVmVjdG9yKXtcbiAgICB0aGlzLnNldChzb3VyY2UueCwgc291cmNlLnkpO1xuICB9XG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcil7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG59IiwiaW1wb3J0IE1hcmlvIGZyb20gXCIuL2VudGl0aWVzL01hcmlvXCI7XG5pbXBvcnQgRW50aXR5IGZyb20gXCIuL0VudGl0eVwiO1xuaW1wb3J0IExldmVsIGZyb20gXCIuL0xldmVsXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL3RyYWl0cy9QbGF5ZXJcIjtcbmltcG9ydCBQbGF5ZXJDb250cm9sbGVyIGZyb20gXCIuL3RyYWl0cy9QbGF5ZXJDb250cm9sbGVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQbGF5ZXJFbnYocGxheWVyOiBNYXJpbykgOiBFbnRpdHkge1xuICBjb25zdCBlbnYgPSBuZXcgRW50aXR5KCk7XG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgUGxheWVyQ29udHJvbGxlcigpO1xuICBjb250cm9sbGVyLmNoZWNrcG9pbnQuc2V0KDY0LCA2NCk7XG4gIGNvbnRyb2xsZXIuc2V0UGxheWVyKHBsYXllcik7XG4gIGVudi5hZGRUcmFpdChjb250cm9sbGVyKTtcbiAgcmV0dXJuIGVudjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBmaW5kUGxheWVycyhsZXZlbDogTGV2ZWwpIDogR2VuZXJhdG9yPEVudGl0eT4ge1xuICBpZighbGV2ZWwpIHJldHVybjtcbiAgZm9yKGNvbnN0IGVudGl0eSBvZiBsZXZlbC5lbnRpdGllcyl7XG4gICAgaWYoZW50aXR5Lmhhc1RyYWl0KFBsYXllcikpIHlpZWxkIGVudGl0eTtcbiAgfVxufSIsImltcG9ydCB7IFNpZGVzIH0gZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IExldmVsIGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IHsgVGlsZUNvbGxpc2lvbkNvbnRleHQgfSBmcm9tIFwiLi4vVGlsZUNvbGxpZGVyXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuLi90cmFpdHMvUGxheWVyXCI7XG5cbmZ1bmN0aW9uIGhhbmRsZVgodGlsZUNvbGxpc2lvbkNvbnRleHQ6IFRpbGVDb2xsaXNpb25Db250ZXh0LCBsZXZlbDogTGV2ZWwpe1xuICBjb25zdCB7IGVudGl0eSwgbWF0Y2ggfSA9IHRpbGVDb2xsaXNpb25Db250ZXh0O1xuICBpZihlbnRpdHkudmVsLnggPiAwKXtcbiAgICBpZihlbnRpdHkuYm91bmRzLnJpZ2h0ID4gbWF0Y2gueDEpe1xuICAgICAgZW50aXR5Lm9ic3RydWN0KFNpZGVzLlJJR0hULCBtYXRjaCk7XG4gICAgfVxuICB9ZWxzZSBpZihlbnRpdHkudmVsLnggPCAwKXtcbiAgICBpZihlbnRpdHkuYm91bmRzLmxlZnQgPCBtYXRjaC54Mil7XG4gICAgICBlbnRpdHkub2JzdHJ1Y3QoU2lkZXMuTEVGVCwgbWF0Y2gpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVZKHRpbGVDb2xsaXNpb25Db250ZXh0OiBUaWxlQ29sbGlzaW9uQ29udGV4dCwgbGV2ZWw6IExldmVsKXtcbiAgY29uc3QgeyBlbnRpdHksIG1hdGNoLCByZXNvbHZlciwgZ2FtZUNvbnRleHQgfSA9IHRpbGVDb2xsaXNpb25Db250ZXh0OyBcblxuICBpZihlbnRpdHkudmVsLnkgPiAwKXtcbiAgICBpZihlbnRpdHkuYm91bmRzLmJvdHRvbSA+IG1hdGNoLnkxKXtcbiAgICAgIGVudGl0eS5vYnN0cnVjdChTaWRlcy5CT1RUT00sIG1hdGNoKTtcbiAgICB9XG4gIH1lbHNlIGlmKGVudGl0eS52ZWwueSA8IDApe1xuICAgIGlmKGVudGl0eS5nZXRUcmFpdChQbGF5ZXIpKXtcbiAgICAgIGNvbnN0IGdyaWQgPSByZXNvbHZlci5tYXRyaXg7XG4gICAgICBncmlkLmRlbGV0ZShtYXRjaC5pbmRleFgsIG1hdGNoLmluZGV4WSk7XG4gICAgICBjb25zdCBnb29tYmEgPSBnYW1lQ29udGV4dC5lbnRpdHlGYWN0b3J5Lmdvb21iYSgpO1xuICAgICAgZ29vbWJhLnBvcy5zZXQoZW50aXR5LnBvcy54LCBtYXRjaC55MSk7XG4gICAgICBnb29tYmEudmVsLnNldCg1MCwgLTQwMCk7XG4gICAgICBsZXZlbC5lbnRpdGllcy5hZGQoZ29vbWJhKTtcbiAgICB9XG4gICAgaWYoZW50aXR5LmJvdW5kcy50b3AgPCBtYXRjaC55Mil7XG4gICAgICBlbnRpdHkub2JzdHJ1Y3QoU2lkZXMuVE9QLCBtYXRjaCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBicmljayA9IFsgaGFuZGxlWCwgaGFuZGxlWSBdOyIsImltcG9ydCB7IFRpbGVDb2xsaXNpb25Db250ZXh0IH0gZnJvbSBcIi4uL1RpbGVDb2xsaWRlclwiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi4vdHJhaXRzL1BsYXllclwiO1xuXG5mdW5jdGlvbiBoYW5kbGUodGlsZUNvbGxpc2lvbkNvbnRleHQ6IFRpbGVDb2xsaXNpb25Db250ZXh0KXtcbiAgY29uc3QgeyBlbnRpdHksIHJlc29sdmVyLCBtYXRjaCB9ID0gdGlsZUNvbGxpc2lvbkNvbnRleHQ7XG4gIGNvbnN0IHBsYXllciA9IGVudGl0eS5nZXRUcmFpdChQbGF5ZXIpO1xuICBpZihwbGF5ZXIgaW5zdGFuY2VvZiBQbGF5ZXIpe1xuICAgIHBsYXllci5hZGRDb2lucygxKTtcbiAgICBjb25zdCBncmlkID0gcmVzb2x2ZXIubWF0cml4O1xuICAgIGdyaWQuZGVsZXRlKG1hdGNoLmluZGV4WCwgbWF0Y2guaW5kZXhZKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY29pbiA9IFsgaGFuZGxlLCBoYW5kbGUgXTsiLCJpbXBvcnQgeyBTaWRlcyB9IGZyb20gXCIuLi9FbnRpdHlcIjtcbmltcG9ydCB7IFRpbGVDb2xsaXNpb25Db250ZXh0IH0gZnJvbSBcIi4uL1RpbGVDb2xsaWRlclwiO1xuXG5mdW5jdGlvbiBoYW5kbGVYKHRpbGVDb2xsaXNpb25Db250ZXh0OiBUaWxlQ29sbGlzaW9uQ29udGV4dCl7XG4gIGNvbnN0IHsgZW50aXR5LCBtYXRjaCB9ID0gdGlsZUNvbGxpc2lvbkNvbnRleHQ7XG4gIGlmKGVudGl0eS52ZWwueCA+IDApe1xuICAgIGlmKGVudGl0eS5ib3VuZHMucmlnaHQgPiBtYXRjaC54MSl7XG4gICAgICBlbnRpdHkub2JzdHJ1Y3QoU2lkZXMuUklHSFQsIG1hdGNoKTtcbiAgICB9XG4gIH1lbHNlIGlmKGVudGl0eS52ZWwueCA8IDApe1xuICAgIGlmKGVudGl0eS5ib3VuZHMubGVmdCA8IG1hdGNoLngyKXtcbiAgICAgIGVudGl0eS5vYnN0cnVjdChTaWRlcy5MRUZULCBtYXRjaCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVkodGlsZUNvbGxpc2lvbkNvbnRleHQ6IFRpbGVDb2xsaXNpb25Db250ZXh0KXtcbiAgY29uc3QgeyBlbnRpdHksIG1hdGNoIH0gPSB0aWxlQ29sbGlzaW9uQ29udGV4dDtcbiAgaWYoZW50aXR5LnZlbC55ID4gMCl7XG4gICAgaWYoZW50aXR5LmJvdW5kcy5ib3R0b20gPiBtYXRjaC55MSl7XG4gICAgICBlbnRpdHkub2JzdHJ1Y3QoU2lkZXMuQk9UVE9NLCBtYXRjaCk7XG4gICAgfVxuICB9ZWxzZSBpZihlbnRpdHkudmVsLnkgPCAwKXtcbiAgICBpZihlbnRpdHkuYm91bmRzLnRvcCA8IG1hdGNoLnkyKXtcbiAgICAgIGVudGl0eS5vYnN0cnVjdChTaWRlcy5UT1AsIG1hdGNoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdyb3VuZCA9IFsgaGFuZGxlWCwgaGFuZGxlWSBdOyIsImltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IExldmVsLCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5cbnR5cGUgRW1pdHRlckNhbGxiYWNrID0gKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQsIGxldmVsOiBMZXZlbCkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1pdHRlciBleHRlbmRzIFRyYWl0IHtcbiAgcHJpdmF0ZSBjb29sZG93bjogbnVtYmVyID0gMjtcbiAgcHVibGljIGludGVydmFsOiBudW1iZXIgPSAyO1xuICBwdWJsaWMgZW1pdHRlcnM6IEVtaXR0ZXJDYWxsYmFja1tdID0gW107XG5cbiAgZW1pdChlbnRpdHk6IEVudGl0eSwgZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0LCBsZXZlbDogTGV2ZWwpe1xuICAgIGZvcihjb25zdCBlbWl0dGVyIG9mIHRoaXMuZW1pdHRlcnMpe1xuICAgICAgZW1pdHRlcihlbnRpdHksIGdhbWVDb250ZXh0LCBsZXZlbCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQsIGxldmVsOiBMZXZlbCk6IHZvaWQge1xuICAgIGNvbnN0IHsgZHQgfSA9IGdhbWVDb250ZXh0O1xuICAgIHRoaXMuY29vbGRvd24gLT0gZHQ7XG4gICAgaWYodGhpcy5jb29sZG93biA8IDApe1xuICAgICAgdGhpcy5lbWl0KGVudGl0eSwgZ2FtZUNvbnRleHQsIGxldmVsKTtcbiAgICAgIHRoaXMuY29vbGRvd24gPSB0aGlzLmludGVydmFsO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IFRyYWl0IGZyb20gXCIuLi9UcmFpdFwiO1xuaW1wb3J0IHsgR2FtZUNvbnRleHQgfSBmcm9tIFwiLi4vTGV2ZWxcIjtcbmltcG9ydCBKdW1wIGZyb20gXCIuL0p1bXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR28gZXh0ZW5kcyBUcmFpdCB7XG4gIHB1YmxpYyBkaXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBhY2NlbGVyYXRpb246IG51bWJlcjtcbiAgcHJpdmF0ZSBkZWNlbGVyYXRpb246IG51bWJlcjtcbiAgcHJpdmF0ZSBmcmljdGlvbjogbnVtYmVyO1xuICBwdWJsaWMgZGlzdGFuY2U6IG51bWJlcjtcbiAgcHVibGljIGhlYWRpbmc6IG51bWJlcjtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGlyID0gMDtcbiAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IDQwMDtcbiAgICB0aGlzLmRlY2VsZXJhdGlvbiA9IDMwMDtcbiAgICB0aGlzLmZyaWN0aW9uID0gMS81MDAwO1xuICAgIHRoaXMuZGlzdGFuY2UgPSAwO1xuICAgIHRoaXMuaGVhZGluZyA9IDE7XG4gIH1cblxuICBzZXQgZHJhZyhmcmljdGlvbjogbnVtYmVyKXsgdGhpcy5mcmljdGlvbiA9IGZyaWN0aW9uOyB9XG5cbiAgdXBkYXRlKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQpe1xuICAgIGNvbnN0IHsgZHQgfSA9IGdhbWVDb250ZXh0O1xuICAgIGNvbnN0IGFic1ggPSBNYXRoLmFicyhlbnRpdHkudmVsLngpO1xuXG4gICAgaWYodGhpcy5kaXIgIT09IDApe1xuICAgICAgZW50aXR5LnZlbC54ICs9IHRoaXMuYWNjZWxlcmF0aW9uICogZHQgKiB0aGlzLmRpcjtcblxuICAgICAgaWYoZW50aXR5Lmhhc1RyYWl0KEp1bXApKXtcbiAgICAgICAgaWYoIWVudGl0eS5nZXRUcmFpdDxKdW1wPihKdW1wKS5mYWxsaW5nKXtcbiAgICAgICAgICB0aGlzLmhlYWRpbmcgPSB0aGlzLmRpcjtcbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuaGVhZGluZyA9IHRoaXMuZGlyO1xuICAgICAgfVxuICAgIH1lbHNlIGlmKGVudGl0eS52ZWwueCAhPT0gMCl7XG4gICAgICBjb25zdCBkZWNlbCA9IE1hdGgubWluKGFic1gsIHRoaXMuZGVjZWxlcmF0aW9uICogZHQpO1xuICAgICAgZW50aXR5LnZlbC54ICs9IGRlY2VsICogKGVudGl0eS52ZWwueCA+IDAgPyAtMSA6IDEpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5kaXN0YW5jZSA9IDA7XG4gICAgfVxuXG4gICAgY29uc3QgZHJhZyA9IHRoaXMuZnJpY3Rpb24gKiBlbnRpdHkudmVsLnggKiBhYnNYO1xuICAgIGVudGl0eS52ZWwueCAtPSBkcmFnO1xuICAgIFxuICAgIHRoaXMuZGlzdGFuY2UgKz0gYWJzWCAqIGR0O1xuICB9XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBHYW1lQ29udGV4dCB9IGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IFRyYWl0IGZyb20gXCIuLi9UcmFpdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmF2aXR5IGV4dGVuZHMgVHJhaXQge1xuICBwcml2YXRlIGdyYXZpdHk6IG51bWJlciA9IDE1MDA7XG4gIHVwZGF0ZShlbnRpdHk6IEVudGl0eSwgZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0KTogdm9pZCB7XG4gICAgY29uc3QgeyBkdCB9ID0gZ2FtZUNvbnRleHQ7XG5cbiAgICBlbnRpdHkudmVsLnkgKz0gdGhpcy5ncmF2aXR5ICogZHQ7XG4gIH1cbn0iLCJpbXBvcnQgRW50aXR5LCB7IFNpZGVzIH0gZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IHsgR2FtZUNvbnRleHQgfSBmcm9tIFwiLi4vTGV2ZWxcIjtcbmltcG9ydCBUcmFpdCBmcm9tIFwiLi4vVHJhaXRcIjtcblxuY29uc3QgU1BFRURfQk9PU1QgPSAwLjM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEp1bXAgZXh0ZW5kcyBUcmFpdCB7XG4gIHByaXZhdGUgZHVyYXRpb246IG51bWJlcjtcbiAgcHJpdmF0ZSB2ZWxvY2l0eTogbnVtYmVyO1xuICBwcml2YXRlIGVuZ2FnZVRpbWU6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkeTogbnVtYmVyO1xuXG4gIHByaXZhdGUgZ3JhY2VUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgZ3JhY2VEdXJhdGlvbjogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDAuMztcbiAgICB0aGlzLnZlbG9jaXR5ID0gMjAwO1xuICAgIHRoaXMuZW5nYWdlVGltZSA9IDA7XG4gICAgdGhpcy5yZWFkeSA9IDA7XG5cbiAgICB0aGlzLmdyYWNlVGltZSA9IDA7XG4gICAgdGhpcy5ncmFjZUR1cmF0aW9uID0gMC4xO1xuICB9XG4gIHB1YmxpYyBnZXQgZmFsbGluZygpIDogYm9vbGVhbiB7IHJldHVybiB0aGlzLnJlYWR5IDwgMDsgfVxuICBzdGFydCgpe1xuICAgIHRoaXMuZ3JhY2VUaW1lID0gdGhpcy5ncmFjZUR1cmF0aW9uO1xuICB9XG4gIGNhbmNlbCgpe1xuICAgIHRoaXMuZW5nYWdlVGltZSA9IDA7XG4gICAgdGhpcy5ncmFjZVRpbWUgPSAwO1xuICB9XG4gIG9ic3RydWN0KGVudGl0eTogRW50aXR5LCBzaWRlOiBTaWRlcyl7XG4gICAgaWYoc2lkZSA9PT0gU2lkZXMuQk9UVE9NKSB0aGlzLnJlYWR5ID0gMTtcbiAgICBpZihzaWRlID09PSBTaWRlcy5UT1ApIHRoaXMuY2FuY2VsKCk7XG4gIH1cbiAgdXBkYXRlKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQpe1xuICAgIGNvbnN0IHsgZHQgfSA9IGdhbWVDb250ZXh0O1xuICAgIFxuICAgIGlmKHRoaXMuZ3JhY2VUaW1lID4gMCl7XG4gICAgICBpZih0aGlzLnJlYWR5ID4gMCl7XG4gICAgICAgIGVudGl0eS5zb3VuZHMuYWRkKCdqdW1wJyk7XG4gICAgICAgIHRoaXMuZW5nYWdlVGltZSA9IHRoaXMuZHVyYXRpb247XG4gICAgICAgIHRoaXMuZ3JhY2VUaW1lID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ncmFjZVRpbWUgLT0gZHQ7XG4gICAgfVxuXG4gICAgaWYodGhpcy5lbmdhZ2VUaW1lID4gMCl7XG4gICAgICBlbnRpdHkudmVsLnkgPSAtKHRoaXMudmVsb2NpdHkgKyBNYXRoLmFicyhlbnRpdHkudmVsLngpICogU1BFRURfQk9PU1QpO1xuICAgICAgdGhpcy5lbmdhZ2VUaW1lIC09IGR0O1xuICAgIH1cblxuICAgIHRoaXMucmVhZHktLTtcbiAgfVxufSIsImltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IExldmVsLCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtpbGxhYmxlIGV4dGVuZHMgVHJhaXQge1xuICBwdWJsaWMgZGVhZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgcmVtb3ZlQWZ0ZXI6IG51bWJlciA9IDI7XG4gIHByaXZhdGUgZGVhZFRpbWU6IG51bWJlciA9IDA7XG5cbiAga2lsbCgpe1xuICAgIHRoaXMucXVldWUoKCkgPT4gdGhpcy5kZWFkID0gdHJ1ZSk7XG4gIH1cblxuICByZXZpdmUoKXtcbiAgICB0aGlzLmRlYWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlYWRUaW1lID0gMDtcbiAgfVxuXG4gIHVwZGF0ZShlbnRpdHk6IEVudGl0eSwgZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0LCBsZXZlbDogTGV2ZWwpOiB2b2lkIHtcbiAgICBpZih0aGlzLmRlYWQpe1xuICAgICAgdGhpcy5kZWFkVGltZSArPSBnYW1lQ29udGV4dC5kdDtcbiAgICAgIGlmKHRoaXMuZGVhZFRpbWUgPiB0aGlzLnJlbW92ZUFmdGVyKXtcbiAgICAgICAgdGhpcy5xdWV1ZSgoKSA9PiBsZXZlbC5lbnRpdGllcy5kZWxldGUoZW50aXR5KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgTGV2ZWwsIHsgR2FtZUNvbnRleHQgfSBmcm9tIFwiLi4vTGV2ZWxcIjtcbmltcG9ydCBUcmFpdCBmcm9tIFwiLi4vVHJhaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWxUaW1lciBleHRlbmRzIFRyYWl0IHtcbiAgc3RhdGljIFRJTUVSX0hVUlJZID0gU3ltYm9sKCd0aW1lci5odXJyeScpO1xuICBzdGF0aWMgVElNRVJfT0tBWSA9IFN5bWJvbCgndGltZXIub2theScpO1xuXG4gIHByaXZhdGUgdG90YWxUaW1lOiBudW1iZXIgPSAzMDA7XG4gIHB1YmxpYyBjdXJyZW50VGltZTogbnVtYmVyID0gdGhpcy50b3RhbFRpbWU7XG4gIHByaXZhdGUgaHVycnlUaW1lOiBudW1iZXIgPSAxMDA7XG4gIHByaXZhdGUgaHVycnlFbWl0dGVkOiBib29sZWFuID0gbnVsbDtcblxuICB1cGRhdGUoZW50aXR5OiBFbnRpdHksIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCwgbGV2ZWw6IExldmVsKTogdm9pZCB7XG4gICAgdGhpcy5jdXJyZW50VGltZSAtPSBnYW1lQ29udGV4dC5kdCAqIDI7XG4gICAgaWYodGhpcy5odXJyeUVtaXR0ZWQgIT09IHRydWUgJiYgdGhpcy5jdXJyZW50VGltZSA8IHRoaXMuaHVycnlUaW1lKXtcbiAgICAgIGxldmVsLmV2ZW50cy5lbWl0KExldmVsVGltZXIuVElNRVJfSFVSUlkpO1xuICAgICAgdGhpcy5odXJyeUVtaXR0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZih0aGlzLmh1cnJ5RW1pdHRlZCAhPT0gZmFsc2UgJiYgdGhpcy5jdXJyZW50VGltZSA+IHRoaXMuaHVycnlUaW1lKXtcbiAgICAgIGxldmVsLmV2ZW50cy5lbWl0KExldmVsVGltZXIuVElNRVJfT0tBWSk7XG4gICAgICB0aGlzLmh1cnJ5RW1pdHRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBFbnRpdHksIHsgU2lkZXMgfSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBHYW1lQ29udGV4dCB9IGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IFRyYWl0IGZyb20gXCIuLi9UcmFpdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZW5kdWx1bVdhbGsgZXh0ZW5kcyBUcmFpdCB7XG4gIHB1YmxpYyBlbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgcHVibGljIHNwZWVkOiBudW1iZXIgPSAtMzA7XG4gIG9ic3RydWN0KGVudGl0eTogRW50aXR5LCBzaWRlOiBTaWRlcyk6IHZvaWQge1xuICAgIGlmKHNpZGUgPT09IFNpZGVzLkxFRlQgfHwgc2lkZSA9PT0gU2lkZXMuUklHSFQpXG4gICAgICB0aGlzLnNwZWVkICo9IC0xO1xuICB9XG4gIHVwZGF0ZShlbnRpdHk6IEVudGl0eSwgZ2FtZUNvbnRleHQ6IEdhbWVDb250ZXh0KTogdm9pZCB7XG4gICAgaWYodGhpcy5lbmFibGVkKSBlbnRpdHkudmVsLnggPSB0aGlzLnNwZWVkO1xuICB9XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgTGV2ZWwsIHsgR2FtZUNvbnRleHQgfSBmcm9tIFwiLi4vTGV2ZWxcIjtcbmltcG9ydCBUcmFpdCBmcm9tIFwiLi4vVHJhaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGh5c2ljcyBleHRlbmRzIFRyYWl0IHtcbiAgcHJpdmF0ZSBncmF2aXR5OiBudW1iZXIgPSAxNTAwO1xuICB1cGRhdGUoZW50aXR5OiBFbnRpdHksIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCwgbGV2ZWw6IExldmVsKTogdm9pZCB7XG4gICAgY29uc3QgeyBkdCB9ID0gZ2FtZUNvbnRleHQ7XG5cbiAgICBlbnRpdHkucG9zLnggKz0gZW50aXR5LnZlbC54ICogZHQ7XG4gICAgbGV2ZWwudGlsZUNvbGxpZGVyLmNoZWNrWChlbnRpdHksIGdhbWVDb250ZXh0LCBsZXZlbCk7XG5cbiAgICBlbnRpdHkucG9zLnkgKz0gZW50aXR5LnZlbC55ICogZHQ7XG4gICAgbGV2ZWwudGlsZUNvbGxpZGVyLmNoZWNrWShlbnRpdHksIGdhbWVDb250ZXh0LCBsZXZlbCk7XG5cbiAgICBlbnRpdHkudmVsLnkgKz0gdGhpcy5ncmF2aXR5ICogZHQ7XG4gIH1cbn0iLCJpbXBvcnQgRW50aXR5IGZyb20gXCIuLi9FbnRpdHlcIjtcbmltcG9ydCBUcmFpdCBmcm9tIFwiLi4vVHJhaXRcIjtcbmltcG9ydCBTdG9tcGVyIGZyb20gXCIuL1N0b21wZXJcIjtcblxuY29uc3QgQ09JTl9MSUZFX1RIUkVTSE9MRCA9IDEwMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIGV4dGVuZHMgVHJhaXQge1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gJ04vQSc7XG4gIHB1YmxpYyBjb2luczogbnVtYmVyID0gMDtcbiAgcHVibGljIGxpdmVzOiBudW1iZXIgPSAzO1xuICBwdWJsaWMgc2NvcmU6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5saXN0ZW4oU3RvbXBlci5TVE9NUCwgKCkgPT4ge1xuICAgICAgdGhpcy5zY29yZSArPSAxMDA7XG4gICAgfSk7XG4gIH1cblxuICBhZGRDb2lucyhjb3VudDogbnVtYmVyKXtcbiAgICB0aGlzLmNvaW5zICs9IGNvdW50O1xuICAgIHRoaXMucXVldWUoKGVudGl0eTogRW50aXR5KSA9PiBlbnRpdHkuc291bmRzLmFkZCgnY29pbicpKTtcbiAgICB3aGlsZSh0aGlzLmNvaW5zID49IENPSU5fTElGRV9USFJFU0hPTEQpe1xuICAgICAgdGhpcy5hZGRMaXZlcygxKTtcbiAgICAgIHRoaXMuY29pbnMgLT0gQ09JTl9MSUZFX1RIUkVTSE9MRDtcbiAgICB9XG4gIH1cblxuICBhZGRMaXZlcyhjb3VudDogbnVtYmVyKXtcbiAgICB0aGlzLmxpdmVzICs9IGNvdW50O1xuICB9XG59IiwiaW1wb3J0IE1hcmlvIGZyb20gXCIuLi9lbnRpdGllcy9NYXJpb1wiO1xuaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgTGV2ZWwsIHsgR2FtZUNvbnRleHQgfSBmcm9tIFwiLi4vTGV2ZWxcIjtcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllckNvbnRyb2xsZXIgZXh0ZW5kcyBUcmFpdCB7XG4gIHB1YmxpYyBjaGVja3BvaW50OiBWZWN0b3IgPSBuZXcgVmVjdG9yKCk7XG4gIHB1YmxpYyBwbGF5ZXI6IE1hcmlvID0gbnVsbDtcblxuICBzZXRQbGF5ZXIocGxheWVyOiBNYXJpbyl7XG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gIH1cblxuICB1cGRhdGUoZW50aXR5OiBFbnRpdHksIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCwgbGV2ZWw6IExldmVsKTogdm9pZCB7XG4gICAgaWYodGhpcy5wbGF5ZXIgJiYgIWxldmVsLmVudGl0aWVzLmhhcyh0aGlzLnBsYXllcikpe1xuICAgICAgdGhpcy5wbGF5ZXIua2lsbGFibGUucmV2aXZlKCk7XG4gICAgICB0aGlzLnBsYXllci5wb3Muc2V0KHRoaXMuY2hlY2twb2ludC54LCB0aGlzLmNoZWNrcG9pbnQueSk7XG4gICAgICBsZXZlbC5lbnRpdGllcy5hZGQodGhpcy5wbGF5ZXIpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBFbnRpdHksIHsgU2lkZXMgfSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBSZXNvbHZlZFRpbGUgfSBmcm9tIFwiLi4vVGlsZUNvbGxpZGVyXCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvbGlkIGV4dGVuZHMgVHJhaXQge1xuICBwdWJsaWMgb2JzdHJ1Y3RzOiBib29sZWFuID0gdHJ1ZTtcbiAgb2JzdHJ1Y3QoZW50aXR5OiBFbnRpdHksIHNpZGU6IFNpZGVzLCBtYXRjaDogUmVzb2x2ZWRUaWxlKXtcbiAgICBpZighdGhpcy5vYnN0cnVjdHMpIHJldHVybjtcbiAgICBzd2l0Y2goc2lkZSl7XG4gICAgICBjYXNlIFNpZGVzLlJJR0hUOiB7XG4gICAgICAgIGVudGl0eS5ib3VuZHMubGVmdCA9IG1hdGNoLngxIC0gZW50aXR5LnNpemUueDtcbiAgICAgICAgZW50aXR5LnZlbC54ID0gMDtcbiAgICAgIH0gYnJlYWs7XG4gICAgICBjYXNlIFNpZGVzLkxFRlQ6IHtcbiAgICAgICAgZW50aXR5LmJvdW5kcy5sZWZ0ID0gbWF0Y2gueDI7XG4gICAgICAgIGVudGl0eS52ZWwueCA9IDA7XG4gICAgICB9IGJyZWFrO1xuICAgICAgY2FzZSBTaWRlcy5CT1RUT006IHtcbiAgICAgICAgZW50aXR5LmJvdW5kcy50b3AgPSBtYXRjaC55MSAtIGVudGl0eS5zaXplLnk7XG4gICAgICAgIGVudGl0eS52ZWwueSA9IDA7XG4gICAgICB9IGJyZWFrO1xuICAgICAgY2FzZSBTaWRlcy5UT1A6IHtcbiAgICAgICAgZW50aXR5LmJvdW5kcy50b3AgPSBtYXRjaC55MjtcbiAgICAgICAgZW50aXR5LnZlbC55ID0gMDtcbiAgICAgIH0gYnJlYWs7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5pbXBvcnQgS2lsbGFibGUgZnJvbSBcIi4vS2lsbGFibGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvbXBlciBleHRlbmRzIFRyYWl0IHtcbiAgc3RhdGljIFNUT01QID0gU3ltYm9sKCdzdG9tcCcpO1xuICBwcml2YXRlIGJvdW5kU3BlZWQ6IG51bWJlciA9IDQwMDtcbiAgXG4gIHByaXZhdGUgYm91bmNlKHVzOiBFbnRpdHksIHRoZW06IEVudGl0eSl7XG4gICAgdXMuYm91bmRzLmJvdHRvbSA9IHRoZW0uYm91bmRzLnRvcDtcbiAgICB1cy52ZWwueSA9IC10aGlzLmJvdW5kU3BlZWRcbiAgfVxuXG4gIGNvbGxpZGVzKHVzOiBFbnRpdHksIHRoZW06IEVudGl0eSk6IHZvaWQge1xuICAgIGlmKCF0aGVtLmhhc1RyYWl0KEtpbGxhYmxlKSkgcmV0dXJuO1xuICAgIGNvbnN0IGtpbGxhYmxlID0gdGhlbS5nZXRUcmFpdDxLaWxsYWJsZT4oS2lsbGFibGUpO1xuICAgIGlmKCFraWxsYWJsZSB8fCBraWxsYWJsZS5kZWFkKSByZXR1cm47XG4gIFxuICAgIGlmKHVzLnZlbC55ID4gdGhlbS52ZWwueSl7XG4gICAgICB0aGlzLnF1ZXVlKCgpID0+IHRoaXMuYm91bmNlKHVzLCB0aGVtKSk7XG4gICAgICB1cy5zb3VuZHMuYWRkKCdzdG9tcCcpO1xuICAgICAgdXMuZXZlbnRzLmVtaXQoU3RvbXBlci5TVE9NUCwgdXMsIHRoZW0pO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBFbnRpdHkgZnJvbSBcIi4uL0VudGl0eVwiO1xuaW1wb3J0IExldmVsLCB7IEdhbWVDb250ZXh0IH0gZnJvbSBcIi4uL0xldmVsXCI7XG5pbXBvcnQgVHJhaXQgZnJvbSBcIi4uL1RyYWl0XCI7XG5cbnR5cGUgVG91Y2ggPSAoZW50aXR5OiBFbnRpdHksIHRvdWNoZXM6IFNldDxFbnRpdHk+LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQsIGxldmVsOiBMZXZlbCkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJpZ2dlciBleHRlbmRzIFRyYWl0IHtcbiAgcHVibGljIHRvdWNoZXM6IFNldDxFbnRpdHk+ID0gbmV3IFNldCgpO1xuICBwdWJsaWMgY29uZGl0aW9uczogVG91Y2hbXSA9IFtdO1xuXG4gIGNvbGxpZGVzKHVzOiBFbnRpdHksIHRoZW06IEVudGl0eSk6IHZvaWQge1xuICAgIHRoaXMudG91Y2hlcy5hZGQodGhlbSk7XG4gIH1cblxuICB1cGRhdGUoZW50aXR5OiBFbnRpdHksIGdhbWVDb250ZXh0OiBHYW1lQ29udGV4dCwgbGV2ZWw6IExldmVsKSB7XG4gICAgaWYodGhpcy50b3VjaGVzLnNpemUgPiAwKXtcbiAgICAgIGZvcihjb25zdCBjb25kaXRpb24gb2YgdGhpcy5jb25kaXRpb25zKXtcbiAgICAgICAgY29uZGl0aW9uKGVudGl0eSwgdGhpcy50b3VjaGVzLCBnYW1lQ29udGV4dCwgbGV2ZWwpO1xuICAgICAgfVxuICAgICAgdGhpcy50b3VjaGVzLmNsZWFyKCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IEVudGl0eSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBHYW1lQ29udGV4dCB9IGZyb20gXCIuLi9MZXZlbFwiO1xuaW1wb3J0IFRyYWl0IGZyb20gXCIuLi9UcmFpdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZWxvY2l0eSBleHRlbmRzIFRyYWl0IHtcbiAgdXBkYXRlKGVudGl0eTogRW50aXR5LCBnYW1lQ29udGV4dDogR2FtZUNvbnRleHQpOiB2b2lkIHtcbiAgICBjb25zdCB7IGR0IH0gPSBnYW1lQ29udGV4dDtcbiAgICBlbnRpdHkucG9zLnggKz0gZW50aXR5LnZlbC54ICogZHQ7XG4gICAgZW50aXR5LnBvcy55ICs9IGVudGl0eS52ZWwueSAqIGR0O1xuICB9XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgVGltZXIgZnJvbSAnLi9UaW1lcic7XG5pbXBvcnQgeyBzZXR1cEtleWJvYXJkIH0gZnJvbSAnLi9pbnB1dCc7XG5pbXBvcnQgeyBjcmVhdGVMZXZlbExvYWRlciwgVHJpZ2dlclNwZWMgfSBmcm9tICcuL2xvYWRlcnMvbGV2ZWwnO1xuaW1wb3J0IHsgbG9hZEVudGl0aWVzIH0gZnJvbSAnLi9lbnRpdGllcyc7XG5pbXBvcnQgeyBjcmVhdGVDb2xsaXNpb25MYXllciB9IGZyb20gJy4vbGF5ZXJzL2NvbGxpc2lvbic7XG5pbXBvcnQgeyBsb2FkRm9udCB9IGZyb20gJy4vbG9hZGVycy9mb250JztcbmltcG9ydCB7IGNyZWF0ZURhc2hib2FyZExheWVyIH0gZnJvbSAnLi9sYXllcnMvZGFzaGJvYXJkJztcbmltcG9ydCB7IGNyZWF0ZVBsYXllckVudiB9IGZyb20gJy4vcGxheWVyJztcbmltcG9ydCBTY2VuZVJ1bm5lciBmcm9tICcuL1NjZW5lUnVubmVyJztcbmltcG9ydCB7IGNyZWF0ZVBsYXllclByb2dyZXNzTGF5ZXIgfSBmcm9tICcuL2xheWVycy9wbGF5ZXItcHJvZ3Jlc3MnO1xuaW1wb3J0IFRpbWVkU2NlbmUgZnJvbSAnLi9UaW1lZFNjZW5lJztcbmltcG9ydCB7IGNyZWF0ZUNvbG9yTGF5ZXIgfSBmcm9tICcuL2xheWVycy9jb2xvcic7XG5pbXBvcnQgTGV2ZWwgZnJvbSAnLi9MZXZlbCc7XG5pbXBvcnQgRW50aXR5IGZyb20gJy4vRW50aXR5JztcbmltcG9ydCBQbGF5ZXIgZnJvbSAnLi90cmFpdHMvUGxheWVyJztcbmltcG9ydCBTY2VuZSBmcm9tICcuL1NjZW5lJztcbmltcG9ydCB7IGNyZWF0ZVRleHRMYXllciB9IGZyb20gJy4vbGF5ZXJzL3RleHQnO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpe1xuICBjb25zdCB2aWRlb0NvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB2aWRlb0NvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcblxuICBjb25zdCBbZW50aXR5RmFjdG9yeSwgZm9udF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgbG9hZEVudGl0aWVzKGF1ZGlvQ29udGV4dCksXG4gICAgbG9hZEZvbnQoKSxcbiAgXSk7XG5cbiAgY29uc3QgbG9hZExldmVsID0gYXdhaXQgY3JlYXRlTGV2ZWxMb2FkZXIoZW50aXR5RmFjdG9yeSk7XG5cbiAgY29uc3Qgc2NlbmVSdW5uZXIgPSBuZXcgU2NlbmVSdW5uZXIoKTtcbiAgXG4gIGNvbnN0IG1hcmlvID0gZW50aXR5RmFjdG9yeS5tYXJpbygpO1xuICBtYXJpby5wbGF5ZXIubmFtZSA9ICdNQVJJTyc7XG5cbiAgY29uc3QgaW5wdXRSb3V0ZXIgPSBzZXR1cEtleWJvYXJkKHdpbmRvdyk7XG4gIGlucHV0Um91dGVyLmFkZFJlY2VpdmVyKG1hcmlvKTtcblxuICBhc3luYyBmdW5jdGlvbiBydW5MZXZlbChuYW1lOiBzdHJpbmcpe1xuICAgIGNvbnN0IGxvYWRTY3JlZW4gPSBuZXcgU2NlbmUoKTtcbiAgICBsb2FkU2NyZWVuLmNvbXAuYWRkKGNyZWF0ZUNvbG9yTGF5ZXIoJyMwMDAnKSk7XG4gICAgbG9hZFNjcmVlbi5jb21wLmFkZChjcmVhdGVUZXh0TGF5ZXIoZm9udCwgYExvYWRpbmcgJHtuYW1lfWApKTtcbiAgICBzY2VuZVJ1bm5lci5hZGRTY2VuZShsb2FkU2NyZWVuKTtcbiAgICBzY2VuZVJ1bm5lci5ydW5OZXh0KCk7XG5cbiAgICBjb25zdCBsZXZlbCA9IGF3YWl0IGxvYWRMZXZlbChuYW1lKTtcblxuICAgIGxldmVsLmV2ZW50cy5saXN0ZW4oTGV2ZWwuVFJJR0dFUiwgKHNwZWM6IFRyaWdnZXJTcGVjLCB0cmlnZ2VyOiBFbnRpdHksIHRvdWNoZXM6IFNldDxFbnRpdHk+KSA9PiB7XG4gICAgICBpZihzcGVjLnR5cGUgPT09ICdnb3RvJyl7XG4gICAgICAgIGZvcihjb25zdCBlbnRpdHkgb2YgdG91Y2hlcyl7XG4gICAgICAgICAgaWYoZW50aXR5Lmhhc1RyYWl0KFBsYXllcikpe1xuICAgICAgICAgICAgcmV0dXJuIHJ1bkxldmVsKHNwZWMubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICBcbiAgICBjb25zdCBkYXNoYm9hcmRMYXllciA9IGNyZWF0ZURhc2hib2FyZExheWVyKGZvbnQsIGxldmVsKTtcbiAgICBjb25zdCBwbGF5ZXJQcm9ncmVzc0xheWVyID0gY3JlYXRlUGxheWVyUHJvZ3Jlc3NMYXllcihmb250LCBsZXZlbCk7XG5cbiAgICBtYXJpby5wb3Muc2V0KDAsIDApO1xuICAgIGxldmVsLmVudGl0aWVzLmFkZChtYXJpbyk7XG4gIFxuICAgIGNvbnN0IHBsYXllckVudiA9IGNyZWF0ZVBsYXllckVudihtYXJpbyk7XG4gICAgbGV2ZWwuZW50aXRpZXMuYWRkKHBsYXllckVudik7XG4gIFxuICAgIGNvbnN0IHdhaXRTY3JlZW4gPSBuZXcgVGltZWRTY2VuZSgpO1xuICAgIHdhaXRTY3JlZW4uY29tcC5hZGQoY3JlYXRlQ29sb3JMYXllcignIzAwMCcpKTtcbiAgICB3YWl0U2NyZWVuLmNvbXAuYWRkKGRhc2hib2FyZExheWVyKTtcbiAgICB3YWl0U2NyZWVuLmNvbXAuYWRkKHBsYXllclByb2dyZXNzTGF5ZXIpO1xuICAgIHNjZW5lUnVubmVyLmFkZFNjZW5lKHdhaXRTY3JlZW4pO1xuICBcbiAgICBsZXZlbC5jb21wLmFkZChjcmVhdGVDb2xsaXNpb25MYXllcihsZXZlbCkpO1xuICAgIGxldmVsLmNvbXAuYWRkKGRhc2hib2FyZExheWVyKTtcbiAgICBzY2VuZVJ1bm5lci5hZGRTY2VuZShsZXZlbCk7XG5cbiAgICBzY2VuZVJ1bm5lci5ydW5OZXh0KCk7XG4gIH1cblxuICBjb25zdCB0aW1lciA9IG5ldyBUaW1lcigpO1xuXG4gIHRpbWVyLnVwZGF0ZSA9IChkdCkgPT4ge1xuICAgIHNjZW5lUnVubmVyLnVwZGF0ZSh7IGR0LCBhdWRpb0NvbnRleHQsIGVudGl0eUZhY3RvcnksIHZpZGVvQ29udGV4dCB9KTtcbiAgfVxuXG4gIHRpbWVyLnN0YXJ0KCk7XG5cbiAgcnVuTGV2ZWwoJ2RlYnVnLXByb2dyZXNzaW9uJyk7XG59XG5cbmNvbnN0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMjc2NyZWVuJyk7XG5cbmNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdGFydCk7XG4gIG1haW4oY2FudmFzKTtcbn1cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN0YXJ0KTtcbiJdLCJuYW1lcyI6WyJBdWRpb0JvYXJkIiwiYnVmZmVycyIsIk1hcCIsImFkZCIsIm5hbWUiLCJidWZmZXIiLCJ0aGlzIiwic2V0IiwicGxheSIsImNvbnRleHQiLCJnZXQiLCJzb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJzdGFydCIsIkJvdW5kaW5nQm94IiwiY29uc3RydWN0b3IiLCJwb3MiLCJzaXplIiwib2Zmc2V0Iiwib3ZlcmxhcHMiLCJib3giLCJib3R0b20iLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJ5IiwieCIsIkNhbWVyYSIsIlZlY3RvciIsIkNvbXBvc2l0b3IiLCJsYXllcnMiLCJsYXllciIsInB1c2giLCJkcmF3IiwiY3R4IiwiY2FtZXJhIiwiZm9yRWFjaCIsIlNpZGVzIiwiRW50aXR5IiwiYXVkaW9Cb2FyZCIsInNvdW5kcyIsIlNldCIsImV2ZW50cyIsInZlbCIsImxpZmV0aW1lIiwidHJhaXRzIiwiYm91bmRzIiwiYWRkVHJhaXQiLCJ0cmFpdCIsImNvbGxpZGVzIiwiY2FuZGlkYXRlIiwiZmluYWxpemUiLCJlbWl0IiwiY2xlYXIiLCJnZXRUcmFpdCIsImNscyIsImhhc1RyYWl0IiwiaGFzIiwib2JzdHJ1Y3QiLCJzaWRlIiwibWF0Y2giLCJwbGF5U291bmRzIiwiYXVkaW9Db250ZXh0IiwidXBkYXRlIiwiZ2FtZUNvbnRleHQiLCJsZXZlbCIsImR0IiwiRW50aXR5Q29sbGlkZXIiLCJlbnRpdGllcyIsImNoZWNrIiwic3ViamVjdCIsIkV2ZW50QnVmZmVyIiwibGVuZ3RoIiwiYXJncyIsImV2ZW50IiwicHJvY2VzcyIsImNhbGxiYWNrIiwiRXZlbnRFbWl0dGVyIiwibGlzdGVuZXJzIiwibGlzdGVuIiwiY2FsbGJhY2tzIiwiSW5wdXRSb3V0ZXIiLCJyZWNlaXZlcnMiLCJhZGRSZWNlaXZlciIsInJlY2VpdmVyIiwiZHJvcFJlY2VpdmVyIiwiZGVsZXRlIiwicm91dGUiLCJyb3V0ZUlucHV0IiwiS2V5U3RhdGUiLCJLZXlib2FyZFN0YXRlIiwia2V5U3RhdGVzIiwia2V5TWFwIiwiYWRkTWFwcGluZyIsImNvZGUiLCJoYW5kbGVFdmVudCIsInR5cGUiLCJwcmV2ZW50RGVmYXVsdCIsImtleVN0YXRlIiwiUFJFU1NFRCIsIlJFTEVBU0VEIiwibGlzdGVuVG8iLCJ3aW5kb3ciLCJldmVudE5hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiTGV2ZWwiLCJtdXNpYyIsInRpbGVDb2xsaWRlciIsImVudGl0eUNvbGxpZGVyIiwidGltZSIsImNvbXAiLCJwYXVzZSIsImVudGl0eSIsInBsYXllciIsImZpbmRQbGF5ZXJzIiwiTWF0aCIsIm1heCIsImZvY3VzUGxheWVyIiwiVFJJR0dFUiIsIlN5bWJvbCIsIk11c2ljQ29udHJvbGxlciIsIm11c2ljUGxheWVyIiwic2V0UGxheWVyIiwicGF1c2VBbGwiLCJwbGF5VGhlbWUiLCJzcGVlZCIsInBsYXliYWNrUmF0ZSIsInBsYXlIdXJyeVRoZW1lIiwiYXVkaW8iLCJsb29wIiwib25lbmRlZCIsIk11c2ljUGxheWVyIiwidHJhY2tzIiwiYWRkVHJhY2siLCJ0cmFjayIsIkF1ZGlvIiwidmFsdWVzIiwiU2NlbmUiLCJDT01QTEVURSIsIlNjZW5lUnVubmVyIiwic2NlbmVJbmRleCIsInNjZW5lcyIsImFkZFNjZW5lIiwic2NlbmUiLCJydW5OZXh0IiwiY3VycmVudFNjZW5lIiwidmlkZW9Db250ZXh0IiwiU3ByaXRlU2hlZXQiLCJpbWFnZSIsIndpZHRoIiwiaGVpZ2h0IiwiZnJhbWVzIiwiYW5pbWF0aW9ucyIsImdldEFuaW1hdGlvbiIsImRlZmluZUFuaW0iLCJhbmltYXRpb24iLCJkZWZpbmUiLCJtYXAiLCJmbGlwIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsImNhbnZhcyIsInNldEF0dHJpYnV0ZSIsInNjYWxlIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiZGVmaW5lVGlsZSIsImZyYW1lIiwiY29uc29sZSIsIndhcm4iLCJkcmF3QW5pbSIsImRpc3RhbmNlIiwiZHJhd1RpbGUiLCJoYW5kbGVycyIsImJyaWNrIiwiZ3JvdW5kIiwiY29pbiIsIlRpbGVSZXNvbHZlciIsIm1hdHJpeCIsInRpbGVTaXplIiwidG9JbmRleCIsImZsb29yIiwidG9JbmRleFJhbmdlIiwicG9zMSIsInBvczIiLCJwTWF4IiwiY2VpbCIsInJhbmdlIiwiZ2V0QnlJbmRleCIsInRpbGUiLCJ4MSIsIngyIiwieTEiLCJ5MiIsImluZGV4WCIsImluZGV4WSIsInNlYXJjaEJ5UG9zaXRpb24iLCJzZWFyY2hCeVJhbmdlIiwibWF0Y2hlcyIsIlRpbGVDb2xsaWRlciIsInJlc29sdmVycyIsImFkZEdyaWQiLCJ0aWxlTWF0cml4IiwiY2hlY2tYIiwicmVzb2x2ZXIiLCJoYW5kbGUiLCJjaGVja1kiLCJpbmRleCIsInRpbGVDb2xsaXNpb25Db250ZXh0IiwiaGFuZGxlciIsIlRpbWVkU2NlbmUiLCJjb3VudGRvd24iLCJUaW1lciIsImRlbHRhVGltZSIsInJ1bm5pbmciLCJhY2N1bXVsYXRlZFRpbWUiLCJsYXN0VGltZSIsInVwZGF0ZVByb3h5IiwiZW5xdWV1ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlRyYWl0IiwidXMiLCJ0aGVtIiwiZmlsdGVyIiwibGlzdGVuZXIiLCJjb3VudCIsIkluZmluaXR5IiwicXVldWUiLCJ0YXNrIiwiVEFTSyIsImNyZWF0ZUFuaW0iLCJmcmFtZUxlbiIsImxvYWRFbnRpdGllcyIsImVudGl0eUZhY3RvcnkiLCJhZGRBcyIsImZhY3RvcnkiLCJQcm9taXNlIiwiYWxsIiwibG9hZE1hcmlvIiwidGhlbiIsImxvYWRHb29tYmEiLCJsb2FkS29vcGEiLCJsb2FkQnVsbGV0IiwibG9hZENhbm5vbiIsIkJlaGF2aW9yIiwiZ3Jhdml0eSIsIkJ1bGxldCIsImtpbGxhYmxlIiwiZGVhZCIsImtpbGwiLCJzdXBlciIsInZlbG9jaXR5IiwiYmVoYXZpb3IiLCJsb2FkU3ByaXRlU2hlZXQiLCJjcmVhdGVCdWxsZXRGYWN0b3J5Iiwic3ByaXRlcyIsImRyYXdCdWxsZXQiLCJidWxsZXQiLCJDYW5ub24iLCJlbWl0dGVyIiwibG9hZEF1ZGlvQm9hcmQiLCJlbWl0QnVsbGV0IiwiZGlyIiwiYWJzIiwiY29weSIsInNpZ24iLCJjYW5ub24iLCJpbnRlcnZhbCIsImVtaXR0ZXJzIiwiY3JlYXRlQ2Fubm9uRmFjdG9yeSIsIkdvb21iYSIsInBlbmR1bHVtTW92ZSIsInBoeXNpY3MiLCJzb2xpZCIsImNyZWF0ZUdvb21iYUZhY3RvcnkiLCJ3YWxrQW5pbSIsImRyYXdHb29tYmEiLCJnb29tYmEiLCJLb29wYVN0YXRlIiwic3RhdGUiLCJXQUxLSU5HIiwiaGlkZVRpbWUiLCJoaWRlRHVyYXRpb24iLCJwYW5pY1NwZWVkIiwid2Fsa1NwZWVkIiwiS29vcGEiLCJoYW5kbGVTdG9tcCIsImhhbmRsZU51ZGdlIiwiSElESU5HIiwicGFuaWMiLCJQQU5JQyIsInRyYXZlbERpciIsImltcGFjdERpciIsImhpZGUiLCJvYnN0cnVjdHMiLCJlbmFibGVkIiwidW5oaWRlIiwiY3JlYXRlS29vcGFGYWN0b3J5Iiwid2FrZUFuaW0iLCJkcmF3S29vcGEiLCJrb29wYSIsInJvdXRlQW5pbSIsIk1hcmlvIiwiZ28iLCJqdW1wIiwic3RvbXBlciIsImRyYWciLCJ0dXJibyIsInJ1bkFuaW0iLCJyb3V0ZUZyYW1lIiwibWFyaW8iLCJmYWxsaW5nIiwiZHJhd01hcmlvIiwicmVtb3ZlQWZ0ZXIiLCJjcmVhdGVNYXJpb0ZhY3RvcnkiLCJzZXR1cEtleWJvYXJkIiwiaW5wdXQiLCJyb3V0ZXIiLCJjYW5jZWwiLCJjcmVhdGVCYWNrZ3JvdW5kTGF5ZXIiLCJ0aWxlcyIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsInNjcmVlbiIsImRyYXdXaWR0aCIsImRyYXdGcm9tIiwiZHJhd1RvIiwiY2xlYXJSZWN0IiwiY29sIiwiZ3JpZCIsInJlZHJhdyIsImNyZWF0ZVRpbGVDYW5kaWRhdGVMYXllciIsInRpbGVSZXNvbHZlciIsInJlc29sdmVkVGlsZXMiLCJnZXRCeUluZGV4T3JpZ2luYWwiLCJjYWxsIiwic3Ryb2tlU3R5bGUiLCJiZWdpblBhdGgiLCJyZWN0Iiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwiY3JlYXRlQ29sbGlzaW9uTGF5ZXIiLCJkcmF3VGlsZUNhbmRpZGF0ZXMiLCJkcmF3Qm91bmRpbmdCb3hlcyIsImNyZWF0ZUNvbG9yTGF5ZXIiLCJjb2xvciIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY3JlYXRlRGFzaGJvYXJkTGF5ZXIiLCJmb250IiwiTElORTEiLCJMSU5FMiIsInRpbWVyIiwiZ2V0VGltZXJUcmFpdCIsImdldFBsYXllclRyYWl0Iiwic2NvcmUiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiY29pbnMiLCJjdXJyZW50VGltZSIsInRvRml4ZWQiLCJjcmVhdGVQbGF5ZXJQcm9ncmVzc0xheWVyIiwiYnVmZmVyQ3R4IiwiZ2V0UGxheWVyIiwibGl2ZXMiLCJjcmVhdGVTcHJpdGVMYXllciIsInNwcml0ZUN0eCIsImNyZWF0ZVRleHRMYXllciIsInRleHQiLCJ0ZXh0VyIsImxvYWRJbWFnZSIsInBhdGgiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwibG9hZEpTT04iLCJmZXRjaCIsInJlcyIsImpzb24iLCJsb2FkQXVkaW8iLCJjcmVhdGVBdWRpb0xvYWRlciIsImF1ZGlvU2hlZXQiLCJqb2JzIiwiZngiLCJ1cmwiLCJyZXNwb25zZSIsImFycmF5QnVmZmVyIiwiZGVjb2RlQXVkaW9EYXRhIiwiTEVUVEVSUyIsIkZvbnRTaGVldCIsInNoZWV0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJsb2FkRm9udCIsImkiLCJsb2FkUGF0dGVybiIsInNldHVwQmFja2dyb3VuZHMiLCJsZXZlbFNwZWMiLCJwYXR0ZXJuc1NwZWMiLCJwYXR0ZXJucyIsIk1hdHJpeCIsIndhbGtUaWxlcyIsImV4cGFuZFJhbmdlcyIsInJhbmdlcyIsImRlcml2ZWRYIiwiZGVyaXZlZFkiLCJwYXR0ZXJuIiwiZXhwYW5kVGlsZXMiLCJjcmVhdGVHcmlkIiwiYmFja2dyb3VuZExheWVyIiwiY3JlYXRlTGV2ZWxMb2FkZXIiLCJzcHJpdGVTaGVldCIsImxvYWRNdXNpY1NoZWV0IiwibXVzaWNTaGVldCIsInBhdHRlcm5TaGVldCIsInBhdHRlcm5TcGVjIiwiY3JlYXRlRW50aXR5Iiwic3ByaXRlTGF5ZXIiLCJzZXR1cEVudGl0aWVzIiwidHJpZ2dlcnMiLCJ0cmlnZ2VyU3BlYyIsInRyaWdnZXIiLCJjb25kaXRpb25zIiwidG91Y2hlcyIsImdjIiwic2V0dXBUcmlnZ2VycyIsInNldHVwQmVoYXZpb3IiLCJleHBhbmRTcGFuIiwieFN0YXJ0IiwieExlbiIsInlTdGFydCIsInlMZW4iLCJ4RW5kIiwieUVuZCIsImV4cGFuZFJhbmdlIiwiT2JqZWN0IiwiZW50cmllcyIsInNoZWV0U3BlYyIsImltYWdlVVJMIiwidGlsZVciLCJ0aWxlSCIsInRpbGVTcGVjIiwidmFsdWUiLCJjb2x1bW5zIiwiY3JlYXRlUGxheWVyRW52IiwiZW52IiwiY29udHJvbGxlciIsImNoZWNrcG9pbnQiLCJhZGRDb2lucyIsIkVtaXR0ZXIiLCJjb29sZG93biIsIkdvIiwiYWNjZWxlcmF0aW9uIiwiZGVjZWxlcmF0aW9uIiwiZnJpY3Rpb24iLCJoZWFkaW5nIiwiYWJzWCIsImRlY2VsIiwibWluIiwiR3Jhdml0eSIsIkp1bXAiLCJkdXJhdGlvbiIsImVuZ2FnZVRpbWUiLCJyZWFkeSIsImdyYWNlVGltZSIsImdyYWNlRHVyYXRpb24iLCJLaWxsYWJsZSIsImRlYWRUaW1lIiwicmV2aXZlIiwiTGV2ZWxUaW1lciIsInRvdGFsVGltZSIsImh1cnJ5VGltZSIsImh1cnJ5RW1pdHRlZCIsIlRJTUVSX0hVUlJZIiwiVElNRVJfT0tBWSIsIlBlbmR1bHVtV2FsayIsIlBoeXNpY3MiLCJQbGF5ZXIiLCJhZGRMaXZlcyIsIlBsYXllckNvbnRyb2xsZXIiLCJTb2xpZCIsIlN0b21wZXIiLCJib3VuZFNwZWVkIiwiYm91bmNlIiwiU1RPTVAiLCJUcmlnZ2VyIiwiY29uZGl0aW9uIiwiVmVsb2NpdHkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInIiLCJ0b1N0cmluZ1RhZyIsInF1ZXJ5U2VsZWN0b3IiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQXVkaW9Db250ZXh0IiwibG9hZExldmVsIiwic2NlbmVSdW5uZXIiLCJydW5MZXZlbCIsImxvYWRTY3JlZW4iLCJzcGVjIiwic2V0VGltZW91dCIsImRhc2hib2FyZExheWVyIiwicGxheWVyUHJvZ3Jlc3NMYXllciIsInBsYXllckVudiIsIndhaXRTY3JlZW4iLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==