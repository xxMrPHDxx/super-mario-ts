/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/AudioBoard.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.buffers=new Map}add(t,e){this.buffers.set(t,e)}play(t,e){const s=this.buffers.get(t);if(!s)return;const i=e.createBufferSource();i.connect(e.destination),i.buffer=s,i.start(0)}}},"./src/BoundingBox.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t,e,s){this.pos=t,this.size=e,this.offset=s}overlaps(t){return this.bottom>t.top&&this.top<t.bottom&&this.left<t.right&&this.right>t.left}get bottom(){return this.pos.y+this.size.y+this.offset.y}get top(){return this.pos.y+this.offset.y}get left(){return this.pos.x+this.offset.x}get right(){return this.pos.x+this.size.x+this.offset.x}set bottom(t){this.pos.y=t-(this.size.y+this.offset.y)}set top(t){this.pos.y=t-this.offset.y}set left(t){this.pos.x=t-this.offset.x}set right(t){this.pos.x=t-(this.size.x+this.offset.x)}}},"./src/Camera.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/math.ts");class r{constructor(){this.pos=new i.Vector(0,0),this.size=new i.Vector(256,224)}}},"./src/Compositor.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.layers=[]}add(t){this.layers.push(t)}draw(t,e){this.layers.forEach((s=>s(t,e)))}}},"./src/Entity.ts":(t,e,s)=>{s.r(e),s.d(e,{Sides:()=>i,Trait:()=>o,default:()=>c});var i,r=s("./src/BoundingBox.ts"),n=s("./src/EventEmitter.ts"),a=s("./src/math.ts");!function(t){t[t.TOP=0]="TOP",t[t.BOTTOM=1]="BOTTOM",t[t.LEFT=2]="LEFT",t[t.RIGHT=3]="RIGHT"}(i||(i={}));class o{constructor(){this.tasks=[],this.events=new n.default}collides(t,e){}finalize(){this.tasks.forEach((t=>t())),this.tasks.length=0}obstruct(t,e,s){}queue(t){this.tasks.push(t)}update(t,e){}}class c{constructor(t){this.sounds=new Set,this.pos=new a.Vector,this.size=new a.Vector,this.offset=new a.Vector,this.vel=new a.Vector,this.traits=new Map,this.lifetime=0,this.draw=(t,e)=>{},this.audioBoard=t,this.bounds=new r.default(this.pos,this.size,this.offset)}addTrait(t,e){this.traits.set(t,e)}collides(t){this.traits.forEach((e=>{e.collides(this,t)}))}finalize(){this.traits.forEach((t=>{t.finalize()}))}getTrait(t){return this.traits.get(t)}obstruct(t,e){this.traits.forEach((s=>{s.obstruct(this,t,e)}))}playSounds(t,e){this.sounds.forEach((s=>{t.play(s,e)})),this.sounds.clear()}update(t){this.traits.forEach((e=>{e.update(this,t)})),this.playSounds(this.audioBoard,t.audioContext),this.lifetime+=t.dt}}},"./src/EntityCollider.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t){this.entities=t}check(t){this.entities.forEach((e=>{t!==e&&t.bounds.overlaps(e.bounds)&&(t.collides(e),e.collides(t))}))}}},"./src/EventEmitter.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.listeners=new Map}listen(t,e){const s=this.listeners.get(t)||[];s.push(e),this.listeners.set(t,s)}emit(t,...e){const s=this.listeners.get(t);s&&s.forEach((t=>{t(...e)}))}}},"./src/KeyboardState.ts":(t,e,s)=>{var i;s.r(e),s.d(e,{KeyState:()=>i,default:()=>r}),function(t){t[t.RELEASED=0]="RELEASED",t[t.PRESSED=1]="PRESSED"}(i||(i={}));class r{constructor(){this.keyStates=new Map,this.keyMap=new Map}addMapping(t,e){this.keyMap.set(t,e)}handleEvent(t){const{code:e,type:s}=t;if(!this.keyMap.has(e))return;t.preventDefault();const r="keydown"===s?i.PRESSED:i.RELEASED;this.keyStates.get(e)!==r&&(this.keyStates.set(e,r),this.keyMap.get(e)(r))}listenTo(t){["keydown","keyup"].forEach((e=>{t.addEventListener(e,(t=>{this.handleEvent(t)}))}))}}},"./src/Level.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./src/Compositor.ts"),r=s("./src/EntityCollider.ts"),n=s("./src/MusicController.ts"),a=s("./src/TileCollider.ts");class o{constructor(){this.music=new n.default,this.comp=new i.default,this.entities=new Set,this.tileCollider=new a.default,this.entityCollider=new r.default(this.entities),this.time=0}update(t,e,s){this.entities.forEach((i=>{i.update({dt:t,level:this,audioContext:e,entityFactory:s})})),this.entities.forEach((t=>{this.entityCollider.check(t)})),this.entities.forEach((t=>{t.finalize()})),this.time+=t}}},"./src/MusicController.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.musicPlayer=null}play(t){this.musicPlayer.play(t)}setPlayer(t){this.musicPlayer=t}}},"./src/MusicPlayer.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(){this.tracks=new Map}addTrack(t,e){const s=new Audio(e);s.loop=!0,this.tracks.set(t,s)}play(t){const e=this.tracks.get(t);e&&e.play()}}},"./src/SpriteSheet.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t,e,s){this.image=t,this.width=e,this.height=s,this.frames=new Map,this.animations=new Map}getAnimation(t){return this.animations.get(t)}defineAnim(t,e){this.animations.set(t,e)}define(t,e,s,i,r){const n=[!1,!0].map((t=>{const n=document.createElement("canvas").getContext("2d");return n.canvas.setAttribute("width",`${this.width}px`),n.canvas.setAttribute("height",`${this.height}px`),t&&(n.scale(-1,1),n.translate(-i,0)),n.drawImage(this.image,e,s,i,r,0,0,i,r),n.canvas}));this.frames.set(t,n)}defineTile(t,e,s){this.define(t,e*this.width,s*this.height,this.width,this.height)}draw(t,e,s,i,r=!1){const n=this.frames.get(t);n||console.warn(`Frame ${t} is not defined!`),e.drawImage(n[r?1:0],s,i)}drawAnim(t,e,s,i,r){const n=this.animations.get(t);if(!n)return this.drawTile(t,e,s,i);this.drawTile(n(r),e,s,i)}drawTile(t,e,s,i,r=!1){this.draw(t,e,s*this.width,i*this.height,r)}}},"./src/TileCollider.ts":(t,e,s)=>{s.r(e),s.d(e,{TileResolver:()=>a,default:()=>o});var i=s("./src/tiles/brick.ts"),r=s("./src/tiles/ground.ts");const n={brick:i.brick,ground:r.ground};class a{constructor(t,e=16){this.matrix=t,this.tileSize=e}toIndex(t){return Math.floor(t/this.tileSize)}toIndexRange(t,e){const s=Math.ceil(e/this.tileSize)*this.tileSize,i=[];let r=t;do{i.push(this.toIndex(r)),r+=this.tileSize}while(r<s);return i}getByIndex(t,e){const s=this.matrix.get(t,e);return s?{tile:s,x1:t*this.tileSize,x2:(t+1)*this.tileSize,y1:e*this.tileSize,y2:(e+1)*this.tileSize,indexX:t,indexY:e}:null}searchByPosition(t,e){return this.getByIndex(this.toIndex(t),this.toIndex(e))}searchByRange(t,e,s,i){const r=[];return this.toIndexRange(t,e).forEach((t=>{this.toIndexRange(s,i).forEach((e=>{const s=this.getByIndex(t,e);s&&r.push(s)}))})),r}}class o{constructor(){this.resolvers=[]}addGrid(t){this.resolvers.push(new a(t))}checkX(t,e){if(0===t.vel.x)return;let s=t.bounds.left+(t.vel.x>0?t.size.x:0);for(const i of this.resolvers){i.searchByRange(s,s,t.bounds.top,t.bounds.bottom).forEach((s=>{this.handle(0,{entity:t,match:s,resolver:i,gameContext:e})}))}}checkY(t,e){if(0===t.vel.y)return;let s=t.bounds.top+(t.vel.y>0?t.size.y:0);for(const i of this.resolvers){i.searchByRange(t.bounds.left,t.bounds.right,s,s).forEach((s=>{this.handle(1,{entity:t,match:s,resolver:i,gameContext:e})}))}}handle(t,e){const s=n[e.match.tile.type];s&&s[t]&&s[t](e)}}},"./src/Timer.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{constructor(t=1/60){this.running=!1;let e=0,s=0;this.updateProxy=(i=0)=>{for(e+=(i-s)/1e3,e>1&&(e=1);e>t;)this.update(t),e-=t;s=i,this.enqueue()}}enqueue(){requestAnimationFrame(this.updateProxy)}start(){this.running||(this.running=!0,this.enqueue())}}},"./src/anim.ts":(t,e,s)=>{function i(t,e){return function(s){return t[Math.floor(s/e)%t.length]}}s.r(e),s.d(e,{createAnim:()=>i})},"./src/entities.ts":(t,e,s)=>{s.r(e),s.d(e,{loadEntities:()=>c});var i=s("./src/entities/Mario.ts"),r=s("./src/entities/Goomba.ts"),n=s("./src/entities/Koopa.ts"),a=s("./src/entities/Bullet.ts"),o=s("./src/entities/Cannon.ts");function c(t){const e={};function s(t){return s=>e[t]=s}return Promise.all([(0,i.loadMario)(t).then(s("mario")),(0,r.loadGoomba)(t).then(s("goomba")),(0,n.loadKoopa)(t).then(s("koopa")),(0,a.loadBullet)(t).then(s("bullet")),(0,o.loadCannon)(t,e).then(s("cannon"))]).then((()=>e))}},"./src/entities/Bullet.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h,loadBullet:()=>u});var i=s("./src/Entity.ts"),r=s("./src/loaders/sprite.ts"),n=s("./src/traits/Gravity.ts"),a=s("./src/traits/Killable.ts"),o=s("./src/traits/Stomper.ts"),c=s("./src/traits/Velocity.ts"),l=s("./src/entities/Mario.ts");class d extends i.Trait{constructor(){super(...arguments),this.gravity=new n.default}collides(t,e){const s=e.getTrait("stomper");t instanceof h&&!t.killable.dead&&s instanceof o.default&&(e.vel.y>t.vel.y?(t.killable.kill(),t.vel.set(100,-200)):e instanceof l.default&&e.killable.kill())}update(t,e){t instanceof h&&t.killable.dead&&this.gravity.update(t,e)}}class h extends i.default{constructor(){super(),this.addTrait("velocity",this.velocity=new c.default),this.addTrait("bullet",this.behavior=new d),this.addTrait("killable",this.killable=new a.default)}}function u(t){return(0,r.loadSpriteSheet)("bullet").then(f)}function f(t){function e(e){t.draw("bullet",e,0,0,this.vel.x<0)}return function(){const t=new h;return t.size.set(16,16),t.draw=e,t}}},"./src/entities/Cannon.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o,loadCannon:()=>c});var i=s("./src/Entity.ts"),r=s("./src/loaders/audio.ts"),n=s("./src/player.ts"),a=s("./src/traits/Emitter.ts");class o extends i.default{constructor(t){super(t),this.addTrait("emitter",this.emitter=new a.default),this.size.set(16,14)}}function c(t,e){return(0,r.loadAudioBoard)("cannon",t).then((t=>function(t,e){function s(t,s){if(!(t instanceof o))return;let i;for(const e of(0,n.findPlayers)(s))if(i=e.pos.x-t.pos.x,Math.abs(e.pos.x-t.pos.x)<=30)return;const r=e.bullet();r.pos.copy(t.pos),r.vel.x=80*Math.sign(i),t.sounds.add("shoot"),s.entities.add(r)}return function(){const e=new o(t);return e.emitter.interval=4,e.emitter.emitters.push(s),e}}(t,e)))}},"./src/entities/Goomba.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>u,loadGoomba:()=>f});var i=s("./src/Entity.ts"),r=s("./src/loaders/sprite.ts"),n=s("./src/traits/Killable.ts"),a=s("./src/traits/PendulumMove.ts"),o=s("./src/traits/Physics.ts"),c=s("./src/traits/Solid.ts"),l=s("./src/traits/Stomper.ts"),d=s("./src/entities/Mario.ts");class h extends i.Trait{collides(t,e){const s=e.getTrait("stomper");t instanceof u&&!t.killable.dead&&s instanceof l.default&&(e.vel.y>t.vel.y?(t.killable.kill(),t.pendulumMove.speed=0):e instanceof d.default&&e.killable.kill())}}class u extends i.default{constructor(){super(),this.addTrait("physics",this.physics=new o.default),this.addTrait("solid",this.solid=new c.default),this.addTrait("pendulumMove",this.pendulumMove=new a.default),this.addTrait("goomba",this.behavior=new h),this.addTrait("killable",this.killable=new n.default)}}function f(t){return(0,r.loadSpriteSheet)("goomba").then(p)}function p(t){const e=t.getAnimation("walk");function s(s){var i;t.draw((i=this).killable.dead?"flat":e(i.lifetime),s,0,0)}return function(){const t=new u;return t.size.set(16,16),t.draw=s,t}}},"./src/entities/Koopa.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>f,loadKoopa:()=>p});var i,r=s("./src/Entity.ts"),n=s("./src/loaders/sprite.ts"),a=s("./src/traits/Killable.ts"),o=s("./src/traits/PendulumMove.ts"),c=s("./src/traits/Physics.ts"),l=s("./src/traits/Solid.ts"),d=s("./src/traits/Stomper.ts"),h=s("./src/entities/Mario.ts");!function(t){t[t.WALKING=0]="WALKING",t[t.HIDING=1]="HIDING",t[t.PANIC=2]="PANIC"}(i||(i={}));class u extends r.Trait{constructor(){super(...arguments),this.state=i.WALKING,this.hideTime=0,this.hideDuration=5,this.panicSpeed=300,this.walkSpeed=null}collides(t,e){const s=e.getTrait("stomper");t instanceof f&&!t.killable.dead&&s instanceof d.default&&(e.vel.y>t.vel.y?this.handleStomp(t,e):e instanceof h.default&&this.handleNudge(t,e))}handleNudge(t,e){switch(this.state){case i.WALKING:e.killable.kill();break;case i.HIDING:this.panic(t,e);break;case i.PANIC:{const s=Math.sign(t.vel.x),i=Math.sign(t.pos.x-e.pos.x);0!==s&&s!==i&&e.killable.kill()}}}handleStomp(t,e){switch(this.state){case i.WALKING:this.hide(t);break;case i.HIDING:t.killable.kill(),t.vel.set(100,-200),t.solid.obstructs=!1;break;case i.PANIC:this.hide(t)}}hide(t){t.vel.x=0,t.pendulumMove.enabled=!1,this.walkSpeed||(this.walkSpeed=t.pendulumMove.speed),this.state=i.HIDING}panic(t,e){t.pendulumMove.enabled=!0,t.pendulumMove.speed=this.panicSpeed*Math.sign(e.vel.x),this.state=i.PANIC}unhide(t){t.pendulumMove.enabled=!0,t.pendulumMove.speed=this.walkSpeed,this.state=i.WALKING}update(t,e){const{dt:s}=e;t instanceof f&&this.state===i.HIDING&&(this.hideTime+=s,this.hideTime>this.hideDuration&&this.unhide(t))}}class f extends r.default{constructor(){super(),this.addTrait("physics",this.physics=new c.default),this.addTrait("solid",this.solid=new l.default),this.addTrait("pendulumMove",this.pendulumMove=new o.default),this.addTrait("goomba",this.behavior=new u),this.addTrait("killable",this.killable=new a.default)}}function p(t){return(0,n.loadSpriteSheet)("koopa").then(y)}function y(t){const e=t.getAnimation("walk"),s=t.getAnimation("wake");function r(r){t.draw(function(t){switch(t.behavior.state){case i.HIDING:if(t.behavior.hideTime>3)return s(t.lifetime);case i.PANIC:return"hiding";default:return e(t.lifetime)}}(this),r,0,0,this.vel.x<0)}return function(){const t=new f;return t.size.set(16,16),t.offset.y=8,t.draw=r,t}}},"./src/entities/Mario.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>f,loadMario:()=>p});var i=s("./src/Entity.ts"),r=s("./src/loaders/audio.ts"),n=s("./src/loaders/sprite.ts"),a=s("./src/traits/Go.ts"),o=s("./src/traits/Jump.ts"),c=s("./src/traits/Killable.ts"),l=s("./src/traits/Physics.ts"),d=s("./src/traits/Player.ts"),h=s("./src/traits/Solid.ts"),u=s("./src/traits/Stomper.ts");class f extends i.default{constructor(t){super(t),this.size.set(14,16),this.addTrait("player",this.player=new d.default),this.addTrait("physics",this.physics=new l.default),this.addTrait("solid",this.solid=new h.default),this.addTrait("go",this.go=new a.default),this.addTrait("jump",this.jump=new o.default),this.addTrait("stomper",this.stomper=new u.default),this.addTrait("killable",this.killable=new c.default),this.go.drag=.001}turbo(t){this.go.drag=t?2e-4:.001}}function p(t){return Promise.all([(0,n.loadSpriteSheet)("mario"),(0,r.loadAudioBoard)("mario",t)]).then((([t,e])=>function(t,e){const s=t.getAnimation("run");function i(t){return t.jump.falling?"jump":t.go.distance>0?t.vel.x>0&&t.go.dir<0||t.vel.x<0&&t.go.dir>0?"break":s(t.go.distance):"idle"}function r(e){t.draw(i(this),e,0,0,this.go.heading<0)}return function(){const t=new f(e);return t.draw=r,t.killable.removeAfter=0,t}}(t,e)))}},"./src/input.ts":(t,e,s)=>{s.r(e),s.d(e,{setupKeyboard:()=>r});var i=s("./src/KeyboardState.ts");function r(t){const e=new i.default;return e.addMapping("KeyP",(e=>{e?t.jump.start():t.jump.cancel()})),e.addMapping("KeyO",(e=>{t.turbo(1===e)})),e.addMapping("KeyA",(e=>{t.go.dir+=e?-1:1})),e.addMapping("KeyD",(e=>{t.go.dir+=e?1:-1})),e}},"./src/layers/background.ts":(t,e,s)=>{s.r(e),s.d(e,{createBackgroundLayer:()=>r});var i=s("./src/TileCollider.ts");function r(t,e,s){const r=new i.TileResolver(e),n=document.createElement("canvas").getContext("2d");return n.imageSmoothingEnabled=!1,n.canvas.width=272,n.canvas.height=240,function(i,a){const o=r.toIndex(a.size.x),c=r.toIndex(a.pos.x);!function(i,r){n.clearRect(0,0,n.canvas.width,n.canvas.height);for(let a=i;a<=r;a++){const r=e.grid[a];r&&r.forEach(((e,r)=>{s.drawAnim(e.name,n,a-i,r,t.time)}))}}(c,c+o),i.drawImage(n.canvas,-a.pos.x%16,-a.pos.y)}}},"./src/layers/collision.ts":(t,e,s)=>{function i(t){const e=[],s=t.tileSize,i=t.getByIndex;return t.getByIndex=function(s,r){return e.push({x:s,y:r}),i.call(t,s,r)},function(t,i){t.strokeStyle="blue",e.forEach((({x:e,y:r})=>{t.beginPath(),t.rect(e*s-i.pos.x,r*s-i.pos.y,s,s),t.stroke(),t.closePath()})),e.length=0}}function r(t){const e=t.tileCollider.resolvers.map(i),s=(r=t.entities,function(t,e){t.strokeStyle="red",r.forEach((s=>{t.beginPath(),t.rect(s.bounds.left-e.pos.x,s.bounds.top-e.pos.y,s.size.x,s.size.y),t.stroke(),t.closePath()}))});var r;return function(t,i){e.forEach((e=>e(t,i))),s(t,i)}}s.r(e),s.d(e,{createCollisionLayer:()=>r})},"./src/layers/dashboard.ts":(t,e,s)=>{function i(t,e){const s=t.size,i=2*t.size;return function(r){const n=Math.max(0,e.time);t.draw("MARIO",r,16,s),t.draw(e.score.toString().padStart(6,"0"),r,16,i),t.draw(`@x${26..toString().padStart(2,"0")}`,r,96,i),t.draw("WORLD",r,152,s),t.draw("1-1",r,160,i),t.draw("TIME",r,208,s),t.draw(n.toFixed(0).padStart(3,"0"),r,216,i)}}s.r(e),s.d(e,{createDashboardLayer:()=>i})},"./src/layers/sprite.ts":(t,e,s)=>{function i(t,e=64,s=64){const i=document.createElement("canvas").getContext("2d");return i.imageSmoothingEnabled=!1,i.canvas.width=e,i.canvas.height=s,function(r,n){t.forEach((t=>{i.clearRect(0,0,e,s),t.draw(i),r.drawImage(i.canvas,t.pos.x-n.pos.x,t.pos.y-n.pos.y)}))}}s.r(e),s.d(e,{createSpriteLayer:()=>i})},"./src/loaders.ts":(t,e,s)=>{s.r(e),s.d(e,{loadImage:()=>r,loadJSON:()=>n});var i=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function r(t){return i(this,void 0,void 0,(function*(){return new Promise(((e,s)=>{const i=new Image;i.onload=()=>e(i),i.onerror=s,i.src=t}))}))}function n(t){return fetch(t).then((t=>t.json()))}},"./src/loaders/audio.ts":(t,e,s)=>{s.r(e),s.d(e,{loadAudioBoard:()=>a,createAudioLoader:()=>o});var i=s("./src/AudioBoard.ts"),r=s("./src/loaders.ts"),n=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function a(t,e){return n(this,void 0,void 0,(function*(){const s=o(e),n=yield(0,r.loadJSON)(`./sounds/${t}.json`),a=new i.default,c=[];return n.fx.forEach((({name:t,url:e})=>{c.push(s(e).then((e=>{a.add(t,e)})))})),yield Promise.all(c),a}))}function o(t){return function(e){return fetch(e).then((t=>t.arrayBuffer())).then((e=>t.decodeAudioData(e)))}}},"./src/loaders/font.ts":(t,e,s)=>{s.r(e),s.d(e,{FontSheet:()=>o,loadFont:()=>c});var i=s("./src/loaders.ts"),r=s("./src/SpriteSheet.ts"),n=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};const a=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";class o{constructor(t,e){this.sheet=t,this.size=e}draw(t,e,s,i){for(let r=0;r<t.length;r++)this.sheet.draw(t[r],e,s+r*this.size,i)}}function c(){return n(this,void 0,void 0,(function*(){const t=yield(0,i.loadImage)("./sheets/font.png"),e=new r.default(t);for(let t=0;t<a.length;t++){const s=8*(15&t),i=8*(t>>4);e.define(a[t],s,i,8,8)}return new o(e,8)}))}},"./src/loaders/level.ts":(t,e,s)=>{s.r(e),s.d(e,{createLevelLoader:()=>h});var i=s("./src/layers/background.ts"),r=s("./src/layers/sprite.ts"),n=s("./src/Level.ts"),a=s("./src/loaders.ts"),o=s("./src/math.ts"),c=s("./src/loaders/music.ts"),l=s("./src/loaders/sprite.ts");function d(t,e,s){t.layers.forEach(((r,n)=>{const a=function(t,e){const s=new o.Matrix;for(const{tile:i,x:r,y:n}of function*(t,e){function*s(t,i,r){for(const n of t)for(const{x:t,y:a}of p(n.ranges)){const o=t+i,c=a+r;if(n.pattern){const t=e[n.pattern].tiles;yield*s(t,o,c)}else yield{tile:n,x:o,y:c}}}yield*s(t,0,0)}(t,e))s.set(r,n,i);return s}(r.tiles,t.patterns),c=(0,i.createBackgroundLayer)(e,a,s);e.comp.add(c),e.tileCollider.addGrid(a)}))}function h(t){return function(e){return(0,a.loadJSON)(`./levels/${e}.json`).then((t=>Promise.all([t,(0,l.loadSpriteSheet)(t.spriteSheet),(0,c.loadMusicSheet)(t.musicSheet)]))).then((([e,s,i])=>{const a=new n.default;return a.music.setPlayer(i),d(e,a,s),function(t,e,s){t.entities.forEach((({name:t,pos:[i,r]})=>{const n=(0,s[t])();n.pos.set(i,r),e.entities.add(n)}));const i=(0,r.createSpriteLayer)(e.entities);e.comp.add(i)}(e,a,t),a}))}}function*u(t,e,s,i){const r=t+e,n=s+i;for(let e=t;e<r;e++)for(let t=s;t<n;t++)yield{x:e,y:t}}function f(t){switch(t.length){case 4:return u(...t);case 3:return u(t[0],t[1],t[2],1);case 2:return u(t[0],1,t[1],1)}}function*p(t){for(const e of t)yield*f(e)}},"./src/loaders/music.ts":(t,e,s)=>{s.r(e),s.d(e,{loadMusicSheet:()=>a});var i=s("./src/loaders.ts"),r=s("./src/MusicPlayer.ts"),n=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};function a(t){return n(this,void 0,void 0,(function*(){const e=yield(0,i.loadJSON)(`./music/${t}.json`),s=new r.default;for(const[t,i]of Object.entries(e))s.addTrack(t,i.url);return s}))}},"./src/loaders/sprite.ts":(t,e,s)=>{s.r(e),s.d(e,{loadSpriteSheet:()=>a});var i=s("./src/anim.ts"),r=s("./src/loaders.ts"),n=s("./src/SpriteSheet.ts");function a(t){return(0,r.loadJSON)(`./sprites/${t}.json`).then((t=>Promise.all([t,(0,r.loadImage)(t.imageURL)]))).then((([t,e])=>{const s=new n.default(e,t.tileW,t.tileH);return t.tiles&&t.tiles.forEach((t=>{s.defineTile(t.name,...t.index)})),t.frames&&t.frames.forEach((({name:t,rect:e})=>{s.define(t,...e)})),t.animations&&t.animations.forEach((({name:t,frameLen:e,frames:r})=>{const n=(0,i.createAnim)(r,e);s.defineAnim(t,n)})),s}))}},"./src/math.ts":(t,e,s)=>{s.r(e),s.d(e,{Matrix:()=>i,Vector:()=>r});class i{constructor(){this.grid=[]}delete(t,e){const s=this.grid[t];s&&delete s[e]}get(t,e){const s=this.grid[t];if(s)return s[e]}set(t,e,s){this.grid[t]||(this.grid[t]=[]),this.grid[t][e]=s}forEach(t){this.grid.forEach(((e,s)=>{e.forEach(((e,i)=>{t(s,i,e)}))}))}}class r{constructor(t=0,e=0){this.set(t,e)}copy(t){this.set(t.x,t.y)}set(t,e){this.x=t,this.y=e}}},"./src/player.ts":(t,e,s)=>{s.r(e),s.d(e,{createPlayerEnv:()=>a,findPlayers:()=>o});var i=s("./src/Entity.ts"),r=s("./src/traits/Player.ts"),n=s("./src/traits/PlayerController.ts");function a(t){const e=new i.default,s=new n.default;return s.checkpoint.set(64,64),s.setPlayer(t),e.addTrait("controller",s),e}function*o(t){for(const e of t.entities)e.getTrait("player")instanceof r.default&&(yield e)}},"./src/tiles/brick.ts":(t,e,s)=>{s.r(e),s.d(e,{brick:()=>r});var i=s("./src/Entity.ts");const r=[function(t){const{entity:e,match:s}=t;e.vel.x>0?e.bounds.right>s.x1&&e.obstruct(i.Sides.RIGHT,s):e.vel.x<0&&e.bounds.left<s.x2&&e.obstruct(i.Sides.LEFT,s)},function(t){const{entity:e,match:s,resolver:r,gameContext:n}=t;if(e.vel.y>0)e.bounds.bottom>s.y1&&e.obstruct(i.Sides.BOTTOM,s);else if(e.vel.y<0){if(e.getTrait("player")){r.matrix.delete(s.indexX,s.indexY);const t=n.entityFactory.goomba();t.pos.set(e.pos.x,s.y1),t.vel.set(50,-400),n.level.entities.add(t)}e.bounds.top<s.y2&&e.obstruct(i.Sides.TOP,s)}}]},"./src/tiles/ground.ts":(t,e,s)=>{s.r(e),s.d(e,{ground:()=>r});var i=s("./src/Entity.ts");const r=[function(t){const{entity:e,match:s}=t;e.vel.x>0?e.bounds.right>s.x1&&e.obstruct(i.Sides.RIGHT,s):e.vel.x<0&&e.bounds.left<s.x2&&e.obstruct(i.Sides.LEFT,s)},function(t){const{entity:e,match:s}=t;e.vel.y>0?e.bounds.bottom>s.y1&&e.obstruct(i.Sides.BOTTOM,s):e.vel.y<0&&e.bounds.top<s.y2&&e.obstruct(i.Sides.TOP,s)}]},"./src/traits/Emitter.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.cooldown=2,this.interval=2,this.emitters=[]}emit(t,e){for(const s of this.emitters)s(t,e)}update(t,e){const{dt:s,level:i}=e;this.cooldown-=s,this.cooldown<0&&(this.emit(t,i),this.cooldown=this.interval)}}},"./src/traits/Go.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Entity.ts"),r=s("./src/traits/Jump.ts");class n extends i.Trait{constructor(){super(),this.dir=0,this.acceleration=400,this.deceleration=300,this.friction=2e-4,this.distance=0,this.heading=1}set drag(t){this.friction=t}update(t,e){const{dt:s}=e,i=Math.abs(t.vel.x);if(0!==this.dir){t.vel.x+=this.acceleration*s*this.dir;const e=t.getTrait("jump");e?e instanceof r.default&&!e.falling&&(this.heading=this.dir):this.heading=this.dir}else if(0!==t.vel.x){const e=Math.min(i,this.deceleration*s);t.vel.x+=e*(t.vel.x>0?-1:1)}else this.distance=0;const n=this.friction*t.vel.x*i;t.vel.x-=n,this.distance+=i*s}}},"./src/traits/Gravity.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.gravity=1500}update(t,e){const{dt:s}=e;t.vel.y+=this.gravity*s}}},"./src/traits/Jump.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(),this.duration=.3,this.velocity=200,this.engageTime=0,this.ready=0,this.graceTime=0,this.graceDuration=.1}get falling(){return this.ready<0}start(){this.graceTime=this.graceDuration}cancel(){this.engageTime=0,this.graceTime=0}obstruct(t,e){e===i.Sides.BOTTOM&&(this.ready=1),e===i.Sides.TOP&&this.cancel()}update(t,e){const{dt:s}=e;this.graceTime>0&&(this.ready>0&&(t.sounds.add("jump"),this.engageTime=this.duration,this.graceTime=0),this.graceTime-=s),this.engageTime>0&&(t.vel.y=-(this.velocity+.3*Math.abs(t.vel.x)),this.engageTime-=s),this.ready--}}},"./src/traits/Killable.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.dead=!1,this.removeAfter=2,this.deadTime=0}kill(){this.queue((()=>this.dead=!0))}revive(){this.dead=!1,this.deadTime=0}update(t,e){const{dt:s,level:i}=e;this.dead&&(this.deadTime+=s,this.deadTime>this.removeAfter&&this.queue((()=>i.entities.delete(t))))}}},"./src/traits/PendulumMove.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.enabled=!0,this.speed=-30}obstruct(t,e){e!==i.Sides.LEFT&&e!==i.Sides.RIGHT||(this.speed*=-1)}update(t,e){this.enabled&&(t.vel.x=this.speed)}}},"./src/traits/Physics.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.gravity=1500}update(t,e){const{level:s,dt:i}=e;t.pos.x+=t.vel.x*i,s.tileCollider.checkX(t,e),t.pos.y+=t.vel.y*i,s.tileCollider.checkY(t,e),t.vel.y+=this.gravity*i}}},"./src/traits/Player.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.lives=3,this.score=0}}},"./src/traits/PlayerController.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Entity.ts"),r=s("./src/math.ts");class n extends i.Trait{constructor(){super(...arguments),this.player=null,this.checkpoint=new r.Vector,this.time=300,this.score=0}setPlayer(t){this.player=t,this.player.stomper.events.listen("stomp",(()=>{this.score+=100}))}update(t,e){const{dt:s,level:i}=e;this.player&&!i.entities.has(this.player)?(this.player.killable.revive(),this.player.pos.set(this.checkpoint.x,this.checkpoint.y),i.entities.add(this.player)):this.time-=2*s}}},"./src/traits/Solid.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{constructor(){super(...arguments),this.obstructs=!0}obstruct(t,e,s){if(this.obstructs)switch(e){case i.Sides.RIGHT:t.bounds.left=s.x1-t.size.x,t.vel.x=0;break;case i.Sides.LEFT:t.bounds.left=s.x2,t.vel.x=0;break;case i.Sides.BOTTOM:t.bounds.top=s.y1-t.size.y,t.vel.y=0;break;case i.Sides.TOP:t.bounds.top=s.y2,t.vel.y=0}}}},"./src/traits/Stomper.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/Entity.ts"),r=s("./src/traits/Killable.ts");class n extends i.Trait{constructor(){super(...arguments),this.boundSpeed=400}bounce(t,e){t.bounds.bottom=e.bounds.top,t.vel.y=-this.boundSpeed}collides(t,e){const s=e.getTrait("killable");s&&s instanceof r.default&&!s.dead&&t.vel.y>e.vel.y&&(this.queue((()=>this.bounce(t,e))),t.sounds.add("stomp"),this.events.emit("stomp",t,e))}}},"./src/traits/Velocity.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/Entity.ts");class r extends i.Trait{update(t,e){const{dt:s}=e;t.pos.x+=t.vel.x*s,t.pos.y+=t.vel.y*s}}}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{s.r(i);var t=s("./src/Timer.ts"),e=s("./src/input.ts"),r=s("./src/Camera.ts"),n=s("./src/loaders/level.ts"),a=s("./src/entities.ts"),o=s("./src/layers/collision.ts"),c=s("./src/loaders/font.ts"),l=s("./src/layers/dashboard.ts"),d=s("./src/player.ts"),h=function(t,e,s,i){return new(s||(s=Promise))((function(r,n){function a(t){try{c(i.next(t))}catch(t){n(t)}}function o(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))};const u=document.querySelector("canvas#screen"),f=()=>{window.removeEventListener("click",f),function(s){h(this,void 0,void 0,(function*(){const i=s.getContext("2d");i.imageSmoothingEnabled=!1;const h=new AudioContext,[u,f]=yield Promise.all([(0,a.loadEntities)(h),(0,c.loadFont)()]),p=yield(0,n.createLevelLoader)(u),y=yield p("1-1"),m=new r.default,v=u.mario(),g=(0,d.createPlayerEnv)(v);y.entities.add(g),y.comp.add((0,o.createCollisionLayer)(y)),y.comp.add((0,l.createDashboardLayer)(f,g.getTrait("controller"))),(0,e.setupKeyboard)(v).listenTo(window);const b=new t.default;b.update=t=>{y.update(t,h,u),m.pos.x=Math.max(0,v.pos.x-100),y.comp.draw(i,m)},b.start(),y.music.play("main")}))}(u)};window.addEventListener("click",f)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,